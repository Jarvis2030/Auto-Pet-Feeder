
Camera CubeMX sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009018  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  08009200  08009200  00019200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb4  08009cb4  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  08009cb4  08009cb4  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cb4  08009cb4  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb4  08009cb4  00019cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cb8  08009cb8  00019cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08009cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000278  08009f34  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08009f34  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9a8  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9e  00000000  00000000  0002fc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  000327e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00033838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2a2  00000000  00000000  00034720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012636  00000000  00000000  000509c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a44a0  00000000  00000000  00062ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107498  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000543c  00000000  00000000  001074e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000278 	.word	0x20000278
 8000204:	00000000 	.word	0x00000000
 8000208:	080091e8 	.word	0x080091e8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000027c 	.word	0x2000027c
 8000224:	080091e8 	.word	0x080091e8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 8000baa:	2300      	movs	r3, #0
 8000bac:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	2012      	movs	r0, #18
 8000bb2:	f000 f999 	bl	8000ee8 <SCCB_WriteByte>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <Ov7725_Init+0x20>
	{
		return ERROR ;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e030      	b.n	8000c22 <Ov7725_Init+0x82>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 8000bc0:	1d7b      	adds	r3, r7, #5
 8000bc2:	220b      	movs	r2, #11
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f9bd 	bl	8000f46 <SCCB_ReadByte>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <Ov7725_Init+0x36>
	{
		return ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e025      	b.n	8000c22 <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 8000bd6:	797b      	ldrb	r3, [r7, #5]
 8000bd8:	2b21      	cmp	r3, #33	; 0x21
 8000bda:	d11f      	bne.n	8000c1c <Ov7725_Init+0x7c>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000bdc:	2300      	movs	r3, #0
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	e015      	b.n	8000c0e <Ov7725_Init+0x6e>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <Ov7725_Init+0x8c>)
 8000be6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	490f      	ldr	r1, [pc, #60]	; (8000c2c <Ov7725_Init+0x8c>)
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	440b      	add	r3, r1
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	f000 f975 	bl	8000ee8 <SCCB_WriteByte>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <Ov7725_Init+0x68>
			{                
				return ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e00c      	b.n	8000c22 <Ov7725_Init+0x82>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	80fb      	strh	r3, [r7, #6]
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <Ov7725_Init+0x90>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d3e3      	bcc.n	8000be2 <Ov7725_Init+0x42>
 8000c1a:	e001      	b.n	8000c20 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <Ov7725_Init+0x82>
	}
	
	return SUCCESS;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	2000009a 	.word	0x2000009a

08000c34 <ImagDisp>:

void ImagDisp(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	uint16_t i, j;
	uint16_t Camera_Data;
	
	LCD_Cam_Gram();
 8000c3a:	f000 fcb9 	bl	80015b0 <LCD_Cam_Gram>
	
	for(i = 0; i < 240; i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	80fb      	strh	r3, [r7, #6]
 8000c42:	e02c      	b.n	8000c9e <ImagDisp+0x6a>
	{
		for(j = 0; j < 320; j++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	80bb      	strh	r3, [r7, #4]
 8000c48:	e022      	b.n	8000c90 <ImagDisp+0x5c>
		{
			READ_FIFO_PIXEL(Camera_Data);		
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	807b      	strh	r3, [r7, #2]
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <ImagDisp+0x80>)
 8000c50:	2220      	movs	r2, #32
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <ImagDisp+0x84>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c5e:	807b      	strh	r3, [r7, #2]
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <ImagDisp+0x80>)
 8000c62:	2220      	movs	r2, #32
 8000c64:	611a      	str	r2, [r3, #16]
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <ImagDisp+0x80>)
 8000c68:	2220      	movs	r2, #32
 8000c6a:	615a      	str	r2, [r3, #20]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <ImagDisp+0x84>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <ImagDisp+0x80>)
 8000c7e:	2220      	movs	r2, #32
 8000c80:	611a      	str	r2, [r3, #16]
			LCD_Write_Data(Camera_Data);
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fa1d 	bl	80010c4 <LCD_Write_Data>
		for(j = 0; j < 320; j++)
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	80bb      	strh	r3, [r7, #4]
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c96:	d3d8      	bcc.n	8000c4a <ImagDisp+0x16>
	for(i = 0; i < 240; i++)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	2bef      	cmp	r3, #239	; 0xef
 8000ca2:	d9cf      	bls.n	8000c44 <ImagDisp+0x10>
		}
	}
	HAL_Delay(1000);
 8000ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca8:	f001 ff46 	bl	8002b38 <HAL_Delay>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40010c00 	.word	0x40010c00

08000cbc <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000cc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cc6:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000cc8:	e002      	b.n	8000cd0 <SCCB_delay+0x14>
   { 
     i--; 
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f9      	bne.n	8000cca <SCCB_delay+0xe>
   } 
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SCCB_Start>:


static int SCCB_Start(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	SDA_H;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <SCCB_Start+0x54>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <SCCB_Start+0x54>)
 8000cf0:	2240      	movs	r2, #64	; 0x40
 8000cf2:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cf4:	f7ff ffe2 	bl	8000cbc <SCCB_delay>
	if(!SDA_read)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	480f      	ldr	r0, [pc, #60]	; (8000d38 <SCCB_Start+0x54>)
 8000cfc:	f002 fece 	bl	8003a9c <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <SCCB_Start+0x26>
	return DISABLE;	
 8000d06:	2300      	movs	r3, #0
 8000d08:	e013      	b.n	8000d32 <SCCB_Start+0x4e>
	SDA_L;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <SCCB_Start+0x54>)
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d10:	f7ff ffd4 	bl	8000cbc <SCCB_delay>
	if(SDA_read) 
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	4808      	ldr	r0, [pc, #32]	; (8000d38 <SCCB_Start+0x54>)
 8000d18:	f002 fec0 	bl	8003a9c <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SCCB_Start+0x42>
	return DISABLE;	
 8000d22:	2300      	movs	r3, #0
 8000d24:	e005      	b.n	8000d32 <SCCB_Start+0x4e>
	SDA_L;
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SCCB_Start+0x54>)
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d2c:	f7ff ffc6 	bl	8000cbc <SCCB_delay>
	return ENABLE;
 8000d30:	2301      	movs	r3, #1
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40011000 	.word	0x40011000

08000d3c <SCCB_Stop>:


static void SCCB_Stop(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	SCL_L;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <SCCB_Stop+0x30>)
 8000d42:	2240      	movs	r2, #64	; 0x40
 8000d44:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d46:	f7ff ffb9 	bl	8000cbc <SCCB_delay>
	SDA_L;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <SCCB_Stop+0x30>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d50:	f7ff ffb4 	bl	8000cbc <SCCB_delay>
	SCL_H;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SCCB_Stop+0x30>)
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d5a:	f7ff ffaf 	bl	8000cbc <SCCB_delay>
	SDA_H;
 8000d5e:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <SCCB_Stop+0x30>)
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d64:	f7ff ffaa 	bl	8000cbc <SCCB_delay>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40011000 	.word	0x40011000

08000d70 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	SCL_L;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <SCCB_Ack+0x30>)
 8000d76:	2240      	movs	r2, #64	; 0x40
 8000d78:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d7a:	f7ff ff9f 	bl	8000cbc <SCCB_delay>
	SDA_L;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <SCCB_Ack+0x30>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d84:	f7ff ff9a 	bl	8000cbc <SCCB_delay>
	SCL_H;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SCCB_Ack+0x30>)
 8000d8a:	2240      	movs	r2, #64	; 0x40
 8000d8c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d8e:	f7ff ff95 	bl	8000cbc <SCCB_delay>
	SCL_L;
 8000d92:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <SCCB_Ack+0x30>)
 8000d94:	2240      	movs	r2, #64	; 0x40
 8000d96:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d98:	f7ff ff90 	bl	8000cbc <SCCB_delay>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40011000 	.word	0x40011000

08000da4 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	SCL_L;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <SCCB_NoAck+0x30>)
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000dae:	f7ff ff85 	bl	8000cbc <SCCB_delay>
	SDA_H;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <SCCB_NoAck+0x30>)
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000db8:	f7ff ff80 	bl	8000cbc <SCCB_delay>
	SCL_H;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SCCB_NoAck+0x30>)
 8000dbe:	2240      	movs	r2, #64	; 0x40
 8000dc0:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000dc2:	f7ff ff7b 	bl	8000cbc <SCCB_delay>
	SCL_L;
 8000dc6:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <SCCB_NoAck+0x30>)
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000dcc:	f7ff ff76 	bl	8000cbc <SCCB_delay>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	SCL_L;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <SCCB_WaitAck+0x48>)
 8000dde:	2240      	movs	r2, #64	; 0x40
 8000de0:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000de2:	f7ff ff6b 	bl	8000cbc <SCCB_delay>
	SDA_H;			
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <SCCB_WaitAck+0x48>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000dec:	f7ff ff66 	bl	8000cbc <SCCB_delay>
	SCL_H;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <SCCB_WaitAck+0x48>)
 8000df2:	2240      	movs	r2, #64	; 0x40
 8000df4:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000df6:	f7ff ff61 	bl	8000cbc <SCCB_delay>
	if(SDA_read)
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <SCCB_WaitAck+0x48>)
 8000dfe:	f002 fe4d 	bl	8003a9c <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SCCB_WaitAck+0x48>)
 8000e0a:	2240      	movs	r2, #64	; 0x40
 8000e0c:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e003      	b.n	8000e1a <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <SCCB_WaitAck+0x48>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40011000 	.word	0x40011000

08000e24 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8000e32:	e019      	b.n	8000e68 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <SCCB_SendByte+0x5c>)
 8000e36:	2240      	movs	r2, #64	; 0x40
 8000e38:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000e3a:	f7ff ff3f 	bl	8000cbc <SCCB_delay>
      if(SendByte&0x80)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	da03      	bge.n	8000e4e <SCCB_SendByte+0x2a>
        SDA_H;  
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <SCCB_SendByte+0x5c>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	e002      	b.n	8000e54 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <SCCB_SendByte+0x5c>)
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8000e5a:	f7ff ff2f 	bl	8000cbc <SCCB_delay>
		SCL_H;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <SCCB_SendByte+0x5c>)
 8000e60:	2240      	movs	r2, #64	; 0x40
 8000e62:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8000e64:	f7ff ff2a 	bl	8000cbc <SCCB_delay>
    while(i--)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	73fa      	strb	r2, [r7, #15]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1e0      	bne.n	8000e34 <SCCB_SendByte+0x10>
    }
    SCL_L;
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <SCCB_SendByte+0x5c>)
 8000e74:	2240      	movs	r2, #64	; 0x40
 8000e76:	615a      	str	r2, [r3, #20]
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40011000 	.word	0x40011000

08000e84 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <SCCB_ReceiveByte+0x60>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	611a      	str	r2, [r3, #16]
    while(i--)
 8000e98:	e017      	b.n	8000eca <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <SCCB_ReceiveByte+0x60>)
 8000ea2:	2240      	movs	r2, #64	; 0x40
 8000ea4:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000ea6:	f7ff ff09 	bl	8000cbc <SCCB_delay>
	  SCL_H;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <SCCB_ReceiveByte+0x60>)
 8000eac:	2240      	movs	r2, #64	; 0x40
 8000eae:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000eb0:	f7ff ff04 	bl	8000cbc <SCCB_delay>
      if(SDA_read)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <SCCB_ReceiveByte+0x60>)
 8000eb8:	f002 fdf0 	bl	8003a9c <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	71fa      	strb	r2, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1e2      	bne.n	8000e9a <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <SCCB_ReceiveByte+0x60>)
 8000ed6:	2240      	movs	r2, #64	; 0x40
 8000ed8:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000eda:	79bb      	ldrb	r3, [r7, #6]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40011000 	.word	0x40011000

08000ee8 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000ef8:	f7ff fef4 	bl	8000ce4 <SCCB_Start>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e01b      	b.n	8000f3e <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000f06:	2042      	movs	r0, #66	; 0x42
 8000f08:	f7ff ff8c 	bl	8000e24 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000f0c:	f7ff ff64 	bl	8000dd8 <SCCB_WaitAck>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d103      	bne.n	8000f1e <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000f16:	f7ff ff11 	bl	8000d3c <SCCB_Stop>
		return DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e00f      	b.n	8000f3e <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff7e 	bl	8000e24 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000f28:	f7ff ff56 	bl	8000dd8 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000f2c:	797b      	ldrb	r3, [r7, #5]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff78 	bl	8000e24 <SCCB_SendByte>
    SCCB_WaitAck();   
 8000f34:	f7ff ff50 	bl	8000dd8 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000f38:	f7ff ff00 	bl	8000d3c <SCCB_Stop>
    return ENABLE;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	807b      	strh	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8000f56:	f7ff fec5 	bl	8000ce4 <SCCB_Start>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e040      	b.n	8000fe6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8000f64:	2042      	movs	r0, #66	; 0x42
 8000f66:	f7ff ff5d 	bl	8000e24 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000f6a:	f7ff ff35 	bl	8000dd8 <SCCB_WaitAck>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d103      	bne.n	8000f7c <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8000f74:	f7ff fee2 	bl	8000d3c <SCCB_Stop>
		return DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e034      	b.n	8000fe6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff50 	bl	8000e24 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000f84:	f7ff ff28 	bl	8000dd8 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000f88:	f7ff fed8 	bl	8000d3c <SCCB_Stop>
	
    if(!SCCB_Start())
 8000f8c:	f7ff feaa 	bl	8000ce4 <SCCB_Start>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e025      	b.n	8000fe6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000f9a:	2043      	movs	r0, #67	; 0x43
 8000f9c:	f7ff ff42 	bl	8000e24 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000fa0:	f7ff ff1a 	bl	8000dd8 <SCCB_WaitAck>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d117      	bne.n	8000fda <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000faa:	f7ff fec7 	bl	8000d3c <SCCB_Stop>
		return DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e019      	b.n	8000fe6 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000fb2:	f7ff ff67 	bl	8000e84 <SCCB_ReceiveByte>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d102      	bne.n	8000fca <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000fc4:	f7ff feee 	bl	8000da4 <SCCB_NoAck>
 8000fc8:	e001      	b.n	8000fce <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000fca:	f7ff fed1 	bl	8000d70 <SCCB_Ack>
	  }
      pBuffer++;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
      length--;
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	807b      	strh	r3, [r7, #2]
    while(length)
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e8      	bne.n	8000fb2 <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000fe0:	f7ff feac 	bl	8000d3c <SCCB_Stop>
    return ENABLE;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	e002      	b.n	8000ffe <Delay+0x10>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f9      	bne.n	8000ff8 <Delay+0xa>
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <LCD_INIT>:

void LCD_INIT ( void )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001016:	2001      	movs	r0, #1
 8001018:	f000 f82a 	bl	8001070 <LCD_BackLed_Control>
	LCD_Rst();
 800101c:	f000 f810 	bl	8001040 <LCD_Rst>
	LCD_REG_Config();
 8001020:	f000 f860 	bl	80010e4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800102e:	22f0      	movs	r2, #240	; 0xf0
 8001030:	2100      	movs	r1, #0
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f9e7 	bl	8001406 <LCD_Clear>
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2102      	movs	r1, #2
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <LCD_Rst+0x28>)
 800104a:	f002 fd3e 	bl	8003aca <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <LCD_Rst+0x2c>)
 8001050:	f7ff ffcd 	bl	8000fee <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2102      	movs	r1, #2
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <LCD_Rst+0x28>)
 800105a:	f002 fd36 	bl	8003aca <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <LCD_Rst+0x2c>)
 8001060:	f7ff ffc5 	bl	8000fee <Delay>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40011800 	.word	0x40011800
 800106c:	0002bffc 	.word	0x0002bffc

08001070 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <LCD_BackLed_Control+0x34>)
 8001088:	f002 fd1f 	bl	8003aca <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800108c:	e005      	b.n	800109a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <LCD_BackLed_Control+0x34>)
 8001096:	f002 fd18 	bl	8003aca <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40011400 	.word	0x40011400

080010a8 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80010b2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	8013      	strh	r3, [r2, #0]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <LCD_Write_Data+0x1c>)
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	8013      	strh	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	60020000 	.word	0x60020000

080010e4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80010e8:	20cf      	movs	r0, #207	; 0xcf
 80010ea:	f7ff ffdd 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ffe8 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80010f4:	2081      	movs	r0, #129	; 0x81
 80010f6:	f7ff ffe5 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80010fa:	2030      	movs	r0, #48	; 0x30
 80010fc:	f7ff ffe2 	bl	80010c4 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001100:	20ed      	movs	r0, #237	; 0xed
 8001102:	f7ff ffd1 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f7ff ffdc 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800110c:	2003      	movs	r0, #3
 800110e:	f7ff ffd9 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001112:	2012      	movs	r0, #18
 8001114:	f7ff ffd6 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001118:	2081      	movs	r0, #129	; 0x81
 800111a:	f7ff ffd3 	bl	80010c4 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800111e:	20e8      	movs	r0, #232	; 0xe8
 8001120:	f7ff ffc2 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001124:	2085      	movs	r0, #133	; 0x85
 8001126:	f7ff ffcd 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800112a:	2010      	movs	r0, #16
 800112c:	f7ff ffca 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001130:	2078      	movs	r0, #120	; 0x78
 8001132:	f7ff ffc7 	bl	80010c4 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001136:	20cb      	movs	r0, #203	; 0xcb
 8001138:	f7ff ffb6 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 800113c:	2039      	movs	r0, #57	; 0x39
 800113e:	f7ff ffc1 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001142:	202c      	movs	r0, #44	; 0x2c
 8001144:	f7ff ffbe 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ffbb 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800114e:	2034      	movs	r0, #52	; 0x34
 8001150:	f7ff ffb8 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff ffb5 	bl	80010c4 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800115a:	20f7      	movs	r0, #247	; 0xf7
 800115c:	f7ff ffa4 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001160:	2020      	movs	r0, #32
 8001162:	f7ff ffaf 	bl	80010c4 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001166:	20ea      	movs	r0, #234	; 0xea
 8001168:	f7ff ff9e 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff ffa9 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff ffa6 	bl	80010c4 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001178:	20b1      	movs	r0, #177	; 0xb1
 800117a:	f7ff ff95 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ffa0 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001184:	201b      	movs	r0, #27
 8001186:	f7ff ff9d 	bl	80010c4 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800118a:	20b6      	movs	r0, #182	; 0xb6
 800118c:	f7ff ff8c 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001190:	200a      	movs	r0, #10
 8001192:	f7ff ff97 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001196:	20a2      	movs	r0, #162	; 0xa2
 8001198:	f7ff ff94 	bl	80010c4 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800119c:	20c0      	movs	r0, #192	; 0xc0
 800119e:	f7ff ff83 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80011a2:	2035      	movs	r0, #53	; 0x35
 80011a4:	f7ff ff8e 	bl	80010c4 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80011a8:	20c1      	movs	r0, #193	; 0xc1
 80011aa:	f7ff ff7d 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80011ae:	2011      	movs	r0, #17
 80011b0:	f7ff ff88 	bl	80010c4 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80011b4:	20c5      	movs	r0, #197	; 0xc5
 80011b6:	f7ff ff77 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80011ba:	2045      	movs	r0, #69	; 0x45
 80011bc:	f7ff ff82 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80011c0:	2045      	movs	r0, #69	; 0x45
 80011c2:	f7ff ff7f 	bl	80010c4 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80011c6:	20c7      	movs	r0, #199	; 0xc7
 80011c8:	f7ff ff6e 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80011cc:	20a2      	movs	r0, #162	; 0xa2
 80011ce:	f7ff ff79 	bl	80010c4 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80011d2:	20f2      	movs	r0, #242	; 0xf2
 80011d4:	f7ff ff68 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff ff73 	bl	80010c4 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80011de:	2026      	movs	r0, #38	; 0x26
 80011e0:	f7ff ff62 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff ff6d 	bl	80010c4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80011ea:	20e0      	movs	r0, #224	; 0xe0
 80011ec:	f7ff ff5c 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80011f0:	200f      	movs	r0, #15
 80011f2:	f7ff ff67 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80011f6:	2026      	movs	r0, #38	; 0x26
 80011f8:	f7ff ff64 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80011fc:	2024      	movs	r0, #36	; 0x24
 80011fe:	f7ff ff61 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001202:	200b      	movs	r0, #11
 8001204:	f7ff ff5e 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001208:	200e      	movs	r0, #14
 800120a:	f7ff ff5b 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800120e:	2009      	movs	r0, #9
 8001210:	f7ff ff58 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001214:	2054      	movs	r0, #84	; 0x54
 8001216:	f7ff ff55 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800121a:	20a8      	movs	r0, #168	; 0xa8
 800121c:	f7ff ff52 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001220:	2046      	movs	r0, #70	; 0x46
 8001222:	f7ff ff4f 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001226:	200c      	movs	r0, #12
 8001228:	f7ff ff4c 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 800122c:	2017      	movs	r0, #23
 800122e:	f7ff ff49 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001232:	2009      	movs	r0, #9
 8001234:	f7ff ff46 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001238:	200f      	movs	r0, #15
 800123a:	f7ff ff43 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800123e:	2007      	movs	r0, #7
 8001240:	f7ff ff40 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff3d 	bl	80010c4 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800124a:	20e1      	movs	r0, #225	; 0xe1
 800124c:	f7ff ff2c 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff ff37 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001256:	2019      	movs	r0, #25
 8001258:	f7ff ff34 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800125c:	201b      	movs	r0, #27
 800125e:	f7ff ff31 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001262:	2004      	movs	r0, #4
 8001264:	f7ff ff2e 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001268:	2010      	movs	r0, #16
 800126a:	f7ff ff2b 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800126e:	2007      	movs	r0, #7
 8001270:	f7ff ff28 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001274:	202a      	movs	r0, #42	; 0x2a
 8001276:	f7ff ff25 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800127a:	2047      	movs	r0, #71	; 0x47
 800127c:	f7ff ff22 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001280:	2039      	movs	r0, #57	; 0x39
 8001282:	f7ff ff1f 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001286:	2003      	movs	r0, #3
 8001288:	f7ff ff1c 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800128c:	2006      	movs	r0, #6
 800128e:	f7ff ff19 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001292:	2006      	movs	r0, #6
 8001294:	f7ff ff16 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001298:	2030      	movs	r0, #48	; 0x30
 800129a:	f7ff ff13 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800129e:	2038      	movs	r0, #56	; 0x38
 80012a0:	f7ff ff10 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80012a4:	200f      	movs	r0, #15
 80012a6:	f7ff ff0d 	bl	80010c4 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80012aa:	2036      	movs	r0, #54	; 0x36
 80012ac:	f7ff fefc 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80012b0:	20c8      	movs	r0, #200	; 0xc8
 80012b2:	f7ff ff07 	bl	80010c4 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80012b6:	202a      	movs	r0, #42	; 0x2a
 80012b8:	f7ff fef6 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff01 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fefe 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fefb 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80012ce:	20ef      	movs	r0, #239	; 0xef
 80012d0:	f7ff fef8 	bl	80010c4 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80012d4:	202b      	movs	r0, #43	; 0x2b
 80012d6:	f7ff fee7 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff fef2 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff feef 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff feec 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80012ec:	203f      	movs	r0, #63	; 0x3f
 80012ee:	f7ff fee9 	bl	80010c4 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80012f2:	203a      	movs	r0, #58	; 0x3a
 80012f4:	f7ff fed8 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80012f8:	2055      	movs	r0, #85	; 0x55
 80012fa:	f7ff fee3 	bl	80010c4 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80012fe:	2011      	movs	r0, #17
 8001300:	f7ff fed2 	bl	80010a8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <LCD_REG_Config+0x230>)
 8001306:	f7ff fe72 	bl	8000fee <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800130a:	2029      	movs	r0, #41	; 0x29
 800130c:	f7ff fecc 	bl	80010a8 <LCD_Write_Cmd>
	
	
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0002bffc 	.word	0x0002bffc

08001318 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4603      	mov	r3, r0
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]
 8001332:	4613      	mov	r3, r2
 8001334:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001336:	202a      	movs	r0, #42	; 0x2a
 8001338:	f7ff feb6 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff febe 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff feb8 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	4413      	add	r3, r2
 800135a:	3b01      	subs	r3, #1
 800135c:	121b      	asrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff feaf 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001366:	88fa      	ldrh	r2, [r7, #6]
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	3b01      	subs	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	b29b      	uxth	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fea4 	bl	80010c4 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800137c:	202b      	movs	r0, #43	; 0x2b
 800137e:	f7ff fe93 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001382:	88bb      	ldrh	r3, [r7, #4]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe9b 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	b29b      	uxth	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe95 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800139a:	88ba      	ldrh	r2, [r7, #4]
 800139c:	883b      	ldrh	r3, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	3b01      	subs	r3, #1
 80013a2:	121b      	asrs	r3, r3, #8
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fe8c 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80013ac:	88ba      	ldrh	r2, [r7, #4]
 80013ae:	883b      	ldrh	r3, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe81 	bl	80010c4 <LCD_Write_Data>
	
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}

080013ca <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80013da:	202c      	movs	r0, #44	; 0x2c
 80013dc:	f7ff fe64 	bl	80010a8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e006      	b.n	80013f4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe6b 	bl	80010c4 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3301      	adds	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d3f4      	bcc.n	80013e6 <LCD_FillColor+0x1c>
		
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001406:	b590      	push	{r4, r7, lr}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	4604      	mov	r4, r0
 800140e:	4608      	mov	r0, r1
 8001410:	4611      	mov	r1, r2
 8001412:	461a      	mov	r2, r3
 8001414:	4623      	mov	r3, r4
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	4603      	mov	r3, r0
 800141a:	80bb      	strh	r3, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001424:	883b      	ldrh	r3, [r7, #0]
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	88b9      	ldrh	r1, [r7, #4]
 800142a:	88f8      	ldrh	r0, [r7, #6]
 800142c:	f7ff ff74 	bl	8001318 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	883a      	ldrh	r2, [r7, #0]
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	461a      	mov	r2, r3
 800143a:	8b3b      	ldrh	r3, [r7, #24]
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f7ff ffc3 	bl	80013ca <LCD_FillColor>
	
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}

0800144c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
 8001456:	460b      	mov	r3, r1
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	3b20      	subs	r3, #32
 8001462:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001464:	88b9      	ldrh	r1, [r7, #4]
 8001466:	88f8      	ldrh	r0, [r7, #6]
 8001468:	2310      	movs	r3, #16
 800146a:	2208      	movs	r2, #8
 800146c:	f7ff ff54 	bl	8001318 <LCD_OpenWindow>
	

	LCD_Write_Cmd ( CMD_SetPixel );	
 8001470:	202c      	movs	r0, #44	; 0x2c
 8001472:	f7ff fe19 	bl	80010a8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001476:	2300      	movs	r3, #0
 8001478:	73bb      	strb	r3, [r7, #14]
 800147a:	e023      	b.n	80014c4 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800147c:	7b3a      	ldrb	r2, [r7, #12]
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	4914      	ldr	r1, [pc, #80]	; (80014d4 <LCD_DrawChar+0x88>)
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	440a      	add	r2, r1
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800148c:	2300      	movs	r3, #0
 800148e:	737b      	strb	r3, [r7, #13]
 8001490:	e012      	b.n	80014b8 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800149c:	201f      	movs	r0, #31
 800149e:	f7ff fe11 	bl	80010c4 <LCD_Write_Data>
 80014a2:	e003      	b.n	80014ac <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80014a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014a8:	f7ff fe0c 	bl	80010c4 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80014b2:	7b7b      	ldrb	r3, [r7, #13]
 80014b4:	3301      	adds	r3, #1
 80014b6:	737b      	strb	r3, [r7, #13]
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	d9e9      	bls.n	8001492 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	3301      	adds	r3, #1
 80014c2:	73bb      	strb	r3, [r7, #14]
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	d9d8      	bls.n	800147c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	080092a8 	.word	0x080092a8

080014d8 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	603a      	str	r2, [r7, #0]
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	460b      	mov	r3, r1
 80014e6:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80014e8:	e01c      	b.n	8001524 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	2be8      	cmp	r3, #232	; 0xe8
 80014ee:	d904      	bls.n	80014fa <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80014f0:	2300      	movs	r3, #0
 80014f2:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	3310      	adds	r3, #16
 80014f8:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001500:	d903      	bls.n	800150a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001502:	2300      	movs	r3, #0
 8001504:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001506:	2300      	movs	r3, #0
 8001508:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	88b9      	ldrh	r1, [r7, #4]
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff9a 	bl	800144c <LCD_DrawChar>
		
		pStr ++;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	3308      	adds	r3, #8
 8001522:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1de      	bne.n	80014ea <LCD_DrawString+0x12>
		
	}
	
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <LCD_DrawValue>:

}


void LCD_DrawValue (uint16_t usC, uint16_t usP, uint16_t value)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	; 0x40
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
 8001542:	460b      	mov	r3, r1
 8001544:	80bb      	strh	r3, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	807b      	strh	r3, [r7, #2]
	char value_str[50];
	sprintf(value_str, "%04d", value);
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	4916      	ldr	r1, [pc, #88]	; (80015ac <LCD_DrawValue+0x74>)
 8001552:	4618      	mov	r0, r3
 8001554:	f005 fbce 	bl	8006cf4 <siprintf>
	const char* pStr = value_str;
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	63fb      	str	r3, [r7, #60]	; 0x3c

		while ( * pStr != '\0' )
 800155e:	e01c      	b.n	800159a <LCD_DrawValue+0x62>
		{
			if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	2be8      	cmp	r3, #232	; 0xe8
 8001564:	d904      	bls.n	8001570 <LCD_DrawValue+0x38>
			{
				usC = LCD_DispWindow_Start_COLUMN;
 8001566:	2300      	movs	r3, #0
 8001568:	80fb      	strh	r3, [r7, #6]
				usP += HEIGHT_EN_CHAR;
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	3310      	adds	r3, #16
 800156e:	80bb      	strh	r3, [r7, #4]
			}

			if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001570:	88bb      	ldrh	r3, [r7, #4]
 8001572:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001576:	d903      	bls.n	8001580 <LCD_DrawValue+0x48>
			{
				usC = LCD_DispWindow_Start_COLUMN;
 8001578:	2300      	movs	r3, #0
 800157a:	80fb      	strh	r3, [r7, #6]
				usP = LCD_DispWindow_Start_PAGE;
 800157c:	2300      	movs	r3, #0
 800157e:	80bb      	strh	r3, [r7, #4]
			}

			LCD_DrawChar ( usC, usP, * pStr );
 8001580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	88b9      	ldrh	r1, [r7, #4]
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5f 	bl	800144c <LCD_DrawChar>

			pStr ++;
 800158e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001590:	3301      	adds	r3, #1
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c

			usC += WIDTH_EN_CHAR;
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	3308      	adds	r3, #8
 8001598:	80fb      	strh	r3, [r7, #6]
		while ( * pStr != '\0' )
 800159a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1de      	bne.n	8001560 <LCD_DrawValue+0x28>

		}
//	LCD_DrawString(usC, usP, value_str);
	
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3740      	adds	r7, #64	; 0x40
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	08009208 	.word	0x08009208

080015b0 <LCD_Cam_Gram>:

void LCD_Cam_Gram()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 );
 80015b4:	2036      	movs	r0, #54	; 0x36
 80015b6:	f7ff fd77 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );
 80015ba:	2068      	movs	r0, #104	; 0x68
 80015bc:	f7ff fd82 	bl	80010c4 <LCD_Write_Data>
	DEBUG_DELAY ();

	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN );
 80015c0:	202a      	movs	r0, #42	; 0x2a
 80015c2:	f7ff fd71 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fd7c 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fd79 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fd76 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80015d8:	203f      	movs	r0, #63	; 0x3f
 80015da:	f7ff fd73 	bl	80010c4 <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE );
 80015de:	202b      	movs	r0, #43	; 0x2b
 80015e0:	f7ff fd62 	bl	80010a8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff fd6d 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fd6a 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff fd67 	bl	80010c4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80015f6:	20ef      	movs	r0, #239	; 0xef
 80015f8:	f7ff fd64 	bl	80010c4 <LCD_Write_Data>

	LCD_Write_Cmd ( 0x2C );
 80015fc:	202c      	movs	r0, #44	; 0x2c
 80015fe:	f7ff fd53 	bl	80010a8 <LCD_Write_Cmd>

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b085      	sub	sp, #20
 800160c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
time.Hours = 0;
 800160e:	4ba7      	ldr	r3, [pc, #668]	; (80018ac <main+0x2a4>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
time.Minutes = 0;
 8001614:	4ba5      	ldr	r3, [pc, #660]	; (80018ac <main+0x2a4>)
 8001616:	2200      	movs	r2, #0
 8001618:	705a      	strb	r2, [r3, #1]
time.Seconds = 0;
 800161a:	4ba4      	ldr	r3, [pc, #656]	; (80018ac <main+0x2a4>)
 800161c:	2200      	movs	r2, #0
 800161e:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001620:	f001 fa28 	bl	8002a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 fbf0 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001628:	f000 fdbe 	bl	80021a8 <MX_GPIO_Init>
  MX_FSMC_Init();
 800162c:	f000 feda 	bl	80023e4 <MX_FSMC_Init>
  MX_ADC2_Init();
 8001630:	f000 fc4c 	bl	8001ecc <MX_ADC2_Init>
  MX_RTC_Init();
 8001634:	f000 fc88 	bl	8001f48 <MX_RTC_Init>
  MX_TIM1_Init();
 8001638:	f000 fcea 	bl	8002010 <MX_TIM1_Init>
  MX_TIM3_Init(50);
 800163c:	2032      	movs	r0, #50	; 0x32
 800163e:	f000 fd37 	bl	80020b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001642:	f7ff fce5 	bl	8001010 <LCD_INIT>
//  MPU6050_init();

//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start(&htim1);
 8001646:	489a      	ldr	r0, [pc, #616]	; (80018b0 <main+0x2a8>)
 8001648:	f003 ffac 	bl	80055a4 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800164c:	2200      	movs	r2, #0
 800164e:	2140      	movs	r1, #64	; 0x40
 8001650:	4898      	ldr	r0, [pc, #608]	; (80018b4 <main+0x2ac>)
 8001652:	f002 fa3a 	bl	8003aca <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	
	HAL_ADCEx_Calibration_Start(&hadc2); // turn on the Calibration model
 8001656:	4898      	ldr	r0, [pc, #608]	; (80018b8 <main+0x2b0>)
 8001658:	f001 fed0 	bl	80033fc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc2);
 800165c:	4896      	ldr	r0, [pc, #600]	; (80018b8 <main+0x2b0>)
 800165e:	f001 fb79 	bl	8002d54 <HAL_ADC_Start>

	while(Ov7725_Init() != SUCCESS);
 8001662:	bf00      	nop
 8001664:	f7ff fa9c 	bl	8000ba0 <Ov7725_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1fa      	bne.n	8001664 <main+0x5c>
	Ov7725_vsync = 0;
 800166e:	4b93      	ldr	r3, [pc, #588]	; (80018bc <main+0x2b4>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
	  /* USER CODE END 2 */

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1){
		  HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN);
 8001674:	2200      	movs	r2, #0
 8001676:	4992      	ldr	r1, [pc, #584]	; (80018c0 <main+0x2b8>)
 8001678:	4892      	ldr	r0, [pc, #584]	; (80018c4 <main+0x2bc>)
 800167a:	f003 f91b 	bl	80048b4 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN);
 800167e:	2200      	movs	r2, #0
 8001680:	4991      	ldr	r1, [pc, #580]	; (80018c8 <main+0x2c0>)
 8001682:	4890      	ldr	r0, [pc, #576]	; (80018c4 <main+0x2bc>)
 8001684:	f003 faa4 	bl	8004bd0 <HAL_RTC_GetDate>

		  LCD_DrawString(50, 10, "Date: ");
 8001688:	4a90      	ldr	r2, [pc, #576]	; (80018cc <main+0x2c4>)
 800168a:	210a      	movs	r1, #10
 800168c:	2032      	movs	r0, #50	; 0x32
 800168e:	f7ff ff23 	bl	80014d8 <LCD_DrawString>
		  LCD_DrawValue(90, 10, getDate.Year);
 8001692:	4b8d      	ldr	r3, [pc, #564]	; (80018c8 <main+0x2c0>)
 8001694:	78db      	ldrb	r3, [r3, #3]
 8001696:	461a      	mov	r2, r3
 8001698:	210a      	movs	r1, #10
 800169a:	205a      	movs	r0, #90	; 0x5a
 800169c:	f7ff ff4c 	bl	8001538 <LCD_DrawValue>
		  LCD_DrawValue(130, 10, getDate.Month);
 80016a0:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <main+0x2c0>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	461a      	mov	r2, r3
 80016a6:	210a      	movs	r1, #10
 80016a8:	2082      	movs	r0, #130	; 0x82
 80016aa:	f7ff ff45 	bl	8001538 <LCD_DrawValue>
		  LCD_DrawValue(170, 10, getDate.Date);
 80016ae:	4b86      	ldr	r3, [pc, #536]	; (80018c8 <main+0x2c0>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	461a      	mov	r2, r3
 80016b4:	210a      	movs	r1, #10
 80016b6:	20aa      	movs	r0, #170	; 0xaa
 80016b8:	f7ff ff3e 	bl	8001538 <LCD_DrawValue>

		  LCD_DrawString(50, 25, "Time: ");
 80016bc:	4a84      	ldr	r2, [pc, #528]	; (80018d0 <main+0x2c8>)
 80016be:	2119      	movs	r1, #25
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f7ff ff09 	bl	80014d8 <LCD_DrawString>
		  LCD_DrawValue(90, 25, getTime.Hours);
 80016c6:	4b7e      	ldr	r3, [pc, #504]	; (80018c0 <main+0x2b8>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	2119      	movs	r1, #25
 80016ce:	205a      	movs	r0, #90	; 0x5a
 80016d0:	f7ff ff32 	bl	8001538 <LCD_DrawValue>
		  LCD_DrawValue(130, 25, getTime.Minutes);
 80016d4:	4b7a      	ldr	r3, [pc, #488]	; (80018c0 <main+0x2b8>)
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	461a      	mov	r2, r3
 80016da:	2119      	movs	r1, #25
 80016dc:	2082      	movs	r0, #130	; 0x82
 80016de:	f7ff ff2b 	bl	8001538 <LCD_DrawValue>
		  LCD_DrawValue(170, 25, getTime.Seconds);
 80016e2:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <main+0x2b8>)
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	461a      	mov	r2, r3
 80016e8:	2119      	movs	r1, #25
 80016ea:	20aa      	movs	r0, #170	; 0xaa
 80016ec:	f7ff ff24 	bl	8001538 <LCD_DrawValue>

		  HAL_ADC_PollForConversion(&hadc2, 1000);
 80016f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016f4:	4870      	ldr	r0, [pc, #448]	; (80018b8 <main+0x2b0>)
 80016f6:	f001 fbdb 	bl	8002eb0 <HAL_ADC_PollForConversion>
		  value2 = HAL_ADC_GetValue(&hadc2);
 80016fa:	486f      	ldr	r0, [pc, #444]	; (80018b8 <main+0x2b0>)
 80016fc:	f001 fcde 	bl	80030bc <HAL_ADC_GetValue>
 8001700:	4603      	mov	r3, r0
 8001702:	4a74      	ldr	r2, [pc, #464]	; (80018d4 <main+0x2cc>)
 8001704:	6013      	str	r3, [r2, #0]

		  menu = value2/1600; // min = 0, max = 4XXX
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <main+0x2cc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a73      	ldr	r2, [pc, #460]	; (80018d8 <main+0x2d0>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	0a5b      	lsrs	r3, r3, #9
 8001712:	4a72      	ldr	r2, [pc, #456]	; (80018dc <main+0x2d4>)
 8001714:	6013      	str	r3, [r2, #0]

	// -------------------------- Menu selection using VR as controller (ADC convertor)---------------
		 switch(Machine_state){
 8001716:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <main+0x2d8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b04      	cmp	r3, #4
 800171c:	d8aa      	bhi.n	8001674 <main+0x6c>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <main+0x11c>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001739 	.word	0x08001739
 8001728:	0800183b 	.word	0x0800183b
 800172c:	08001ae1 	.word	0x08001ae1
 8001730:	08001c3d 	.word	0x08001c3d
 8001734:	08001d55 	.word	0x08001d55
		 	case 0:
		 	  		  LCD_DrawString(50,60, "Select Function:");
 8001738:	4a6a      	ldr	r2, [pc, #424]	; (80018e4 <main+0x2dc>)
 800173a:	213c      	movs	r1, #60	; 0x3c
 800173c:	2032      	movs	r0, #50	; 0x32
 800173e:	f7ff fecb 	bl	80014d8 <LCD_DrawString>
		 	  		  LCD_DrawString(70,75, "Manual mode");
 8001742:	4a69      	ldr	r2, [pc, #420]	; (80018e8 <main+0x2e0>)
 8001744:	214b      	movs	r1, #75	; 0x4b
 8001746:	2046      	movs	r0, #70	; 0x46
 8001748:	f7ff fec6 	bl	80014d8 <LCD_DrawString>
		 	  		  LCD_DrawString(70,90, "Schedule mode");
 800174c:	4a67      	ldr	r2, [pc, #412]	; (80018ec <main+0x2e4>)
 800174e:	215a      	movs	r1, #90	; 0x5a
 8001750:	2046      	movs	r0, #70	; 0x46
 8001752:	f7ff fec1 	bl	80014d8 <LCD_DrawString>
		 	  		  LCD_DrawValue(70,280,value2);
 8001756:	4b5f      	ldr	r3, [pc, #380]	; (80018d4 <main+0x2cc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001760:	2046      	movs	r0, #70	; 0x46
 8001762:	f7ff fee9 	bl	8001538 <LCD_DrawValue>
					 if(menu == 0){
 8001766:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <main+0x2d4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d111      	bne.n	8001792 <main+0x18a>
						 LCD_Clear (50, 78, 20, 35, 0xFFFF);
 800176e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2323      	movs	r3, #35	; 0x23
 8001776:	2214      	movs	r2, #20
 8001778:	214e      	movs	r1, #78	; 0x4e
 800177a:	2032      	movs	r0, #50	; 0x32
 800177c:	f7ff fe43 	bl	8001406 <LCD_Clear>
						 HAL_Delay(10);
 8001780:	200a      	movs	r0, #10
 8001782:	f001 f9d9 	bl	8002b38 <HAL_Delay>
						 LCD_DrawString(50,75, ">>");
 8001786:	4a5a      	ldr	r2, [pc, #360]	; (80018f0 <main+0x2e8>)
 8001788:	214b      	movs	r1, #75	; 0x4b
 800178a:	2032      	movs	r0, #50	; 0x32
 800178c:	f7ff fea4 	bl	80014d8 <LCD_DrawString>
 8001790:	e014      	b.n	80017bc <main+0x1b4>

					 }else if(menu == 1){
 8001792:	4b52      	ldr	r3, [pc, #328]	; (80018dc <main+0x2d4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d110      	bne.n	80017bc <main+0x1b4>
				 		 LCD_Clear (50, 78, 20, 35, 0xFFFF);
 800179a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2323      	movs	r3, #35	; 0x23
 80017a2:	2214      	movs	r2, #20
 80017a4:	214e      	movs	r1, #78	; 0x4e
 80017a6:	2032      	movs	r0, #50	; 0x32
 80017a8:	f7ff fe2d 	bl	8001406 <LCD_Clear>
				 		 HAL_Delay(10);
 80017ac:	200a      	movs	r0, #10
 80017ae:	f001 f9c3 	bl	8002b38 <HAL_Delay>
				 		 LCD_DrawString(50,90, ">>");
 80017b2:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <main+0x2e8>)
 80017b4:	215a      	movs	r1, #90	; 0x5a
 80017b6:	2032      	movs	r0, #50	; 0x32
 80017b8:	f7ff fe8e 	bl	80014d8 <LCD_DrawString>
				 	  }
					 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == SET){
 80017bc:	2120      	movs	r1, #32
 80017be:	484d      	ldr	r0, [pc, #308]	; (80018f4 <main+0x2ec>)
 80017c0:	f002 f96c 	bl	8003a9c <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d111      	bne.n	80017ee <main+0x1e6>
							function = menu;
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <main+0x2d4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <main+0x2f0>)
 80017d2:	701a      	strb	r2, [r3, #0]
							Machine_state = 1;
 80017d4:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <main+0x2d8>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
							LCD_Clear (0, 0, 240, 320, 0xFFFF);
 80017da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017e4:	22f0      	movs	r2, #240	; 0xf0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fe0c 	bl	8001406 <LCD_Clear>
					 }

					 if(alarm_set){
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <main+0x2f4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 82e3 	beq.w	8001dbe <main+0x7b6>
						 HAL_RTC_GetAlarm(&hrtc, &sAlarm2, RTC_ALARM_A, RTC_FORMAT_BIN);
 80017f8:	2300      	movs	r3, #0
 80017fa:	2200      	movs	r2, #0
 80017fc:	4940      	ldr	r1, [pc, #256]	; (8001900 <main+0x2f8>)
 80017fe:	4831      	ldr	r0, [pc, #196]	; (80018c4 <main+0x2bc>)
 8001800:	f003 faf2 	bl	8004de8 <HAL_RTC_GetAlarm>
						 LCD_DrawString(70,110, "Alarm set");
 8001804:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <main+0x2fc>)
 8001806:	216e      	movs	r1, #110	; 0x6e
 8001808:	2046      	movs	r0, #70	; 0x46
 800180a:	f7ff fe65 	bl	80014d8 <LCD_DrawString>
						 LCD_DrawValue(70,130, sAlarm2.AlarmTime.Hours);
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <main+0x2f8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	2182      	movs	r1, #130	; 0x82
 8001816:	2046      	movs	r0, #70	; 0x46
 8001818:	f7ff fe8e 	bl	8001538 <LCD_DrawValue>
						 LCD_DrawValue(120,130, sAlarm2.AlarmTime.Minutes);
 800181c:	4b38      	ldr	r3, [pc, #224]	; (8001900 <main+0x2f8>)
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	461a      	mov	r2, r3
 8001822:	2182      	movs	r1, #130	; 0x82
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f7ff fe87 	bl	8001538 <LCD_DrawValue>
						 LCD_DrawValue(170,130, sAlarm2.AlarmTime.Seconds);
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <main+0x2f8>)
 800182c:	789b      	ldrb	r3, [r3, #2]
 800182e:	461a      	mov	r2, r3
 8001830:	2182      	movs	r1, #130	; 0x82
 8001832:	20aa      	movs	r0, #170	; 0xaa
 8001834:	f7ff fe80 	bl	8001538 <LCD_DrawValue>

					 }
					 break;
 8001838:	e2c1      	b.n	8001dbe <main+0x7b6>
		 	case 1:
		 		  switch(function){
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <main+0x2f0>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <main+0x240>
 8001842:	2b01      	cmp	r3, #1
 8001844:	d066      	beq.n	8001914 <main+0x30c>

				 		}



		 		break;
 8001846:	e2bd      	b.n	8001dc4 <main+0x7bc>
							LCD_DrawString(50,60, "Food weight: ");
 8001848:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <main+0x300>)
 800184a:	213c      	movs	r1, #60	; 0x3c
 800184c:	2032      	movs	r0, #50	; 0x32
 800184e:	f7ff fe43 	bl	80014d8 <LCD_DrawString>
				 	  	 	amount = value2/200;
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <main+0x2cc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <main+0x2d0>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	4a2b      	ldr	r2, [pc, #172]	; (800190c <main+0x304>)
 8001860:	6013      	str	r3, [r2, #0]
				 	  	 	LCD_DrawValue(150,60, 5*amount);
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <main+0x304>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	461a      	mov	r2, r3
 800186e:	213c      	movs	r1, #60	; 0x3c
 8001870:	2096      	movs	r0, #150	; 0x96
 8001872:	f7ff fe61 	bl	8001538 <LCD_DrawValue>
				 	  	 	LCD_DrawString(200,60, "g");
 8001876:	4a26      	ldr	r2, [pc, #152]	; (8001910 <main+0x308>)
 8001878:	213c      	movs	r1, #60	; 0x3c
 800187a:	20c8      	movs	r0, #200	; 0xc8
 800187c:	f7ff fe2c 	bl	80014d8 <LCD_DrawString>
				 	  	 	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == SET){
 8001880:	2120      	movs	r1, #32
 8001882:	481c      	ldr	r0, [pc, #112]	; (80018f4 <main+0x2ec>)
 8001884:	f002 f90a 	bl	8003a9c <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	f040 8124 	bne.w	8001ad8 <main+0x4d0>
				 	  			Machine_state = 2;
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <main+0x2d8>)
 8001892:	2202      	movs	r2, #2
 8001894:	701a      	strb	r2, [r3, #0]
				 	  			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8001896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018a0:	22f0      	movs	r2, #240	; 0xf0
 80018a2:	2100      	movs	r1, #0
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff fdae 	bl	8001406 <LCD_Clear>
				 	  	 	break;
 80018aa:	e115      	b.n	8001ad8 <main+0x4d0>
 80018ac:	200003b8 	.word	0x200003b8
 80018b0:	200002d8 	.word	0x200002d8
 80018b4:	40011800 	.word	0x40011800
 80018b8:	20000294 	.word	0x20000294
 80018bc:	200003f4 	.word	0x200003f4
 80018c0:	200003b4 	.word	0x200003b4
 80018c4:	200002c4 	.word	0x200002c4
 80018c8:	200003b0 	.word	0x200003b0
 80018cc:	08009210 	.word	0x08009210
 80018d0:	08009218 	.word	0x08009218
 80018d4:	200003e0 	.word	0x200003e0
 80018d8:	51eb851f 	.word	0x51eb851f
 80018dc:	200003e4 	.word	0x200003e4
 80018e0:	200003ce 	.word	0x200003ce
 80018e4:	08009220 	.word	0x08009220
 80018e8:	08009234 	.word	0x08009234
 80018ec:	08009240 	.word	0x08009240
 80018f0:	08009250 	.word	0x08009250
 80018f4:	40010800 	.word	0x40010800
 80018f8:	200003e8 	.word	0x200003e8
 80018fc:	200003f3 	.word	0x200003f3
 8001900:	200003c4 	.word	0x200003c4
 8001904:	08009254 	.word	0x08009254
 8001908:	08009260 	.word	0x08009260
 800190c:	200003ec 	.word	0x200003ec
 8001910:	08009270 	.word	0x08009270
				 		 LCD_DrawString(50,60, "First Daily Alarm: ");
 8001914:	4a9e      	ldr	r2, [pc, #632]	; (8001b90 <main+0x588>)
 8001916:	213c      	movs	r1, #60	; 0x3c
 8001918:	2032      	movs	r0, #50	; 0x32
 800191a:	f7ff fddd 	bl	80014d8 <LCD_DrawString>
				 		 if(time_setting == 0){
 800191e:	4b9d      	ldr	r3, [pc, #628]	; (8001b94 <main+0x58c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d134      	bne.n	8001990 <main+0x388>
				 			hour = value2/145;
 8001926:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <main+0x590>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a9c      	ldr	r2, [pc, #624]	; (8001b9c <main+0x594>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	09db      	lsrs	r3, r3, #7
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b9a      	ldr	r3, [pc, #616]	; (8001ba0 <main+0x598>)
 8001936:	701a      	strb	r2, [r3, #0]
				 			if(hour > 24) hour = 24;
 8001938:	4b99      	ldr	r3, [pc, #612]	; (8001ba0 <main+0x598>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b18      	cmp	r3, #24
 800193e:	d902      	bls.n	8001946 <main+0x33e>
 8001940:	4b97      	ldr	r3, [pc, #604]	; (8001ba0 <main+0x598>)
 8001942:	2218      	movs	r2, #24
 8001944:	701a      	strb	r2, [r3, #0]
				 			LCD_DrawValue(50,75, hour);
 8001946:	4b96      	ldr	r3, [pc, #600]	; (8001ba0 <main+0x598>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	214b      	movs	r1, #75	; 0x4b
 800194e:	2032      	movs	r0, #50	; 0x32
 8001950:	f7ff fdf2 	bl	8001538 <LCD_DrawValue>
				 			LCD_DrawString(85,75, ":");
 8001954:	4a93      	ldr	r2, [pc, #588]	; (8001ba4 <main+0x59c>)
 8001956:	214b      	movs	r1, #75	; 0x4b
 8001958:	2055      	movs	r0, #85	; 0x55
 800195a:	f7ff fdbd 	bl	80014d8 <LCD_DrawString>
				 			LCD_DrawValue(90,75, time.Minutes);
 800195e:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <main+0x5a0>)
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	461a      	mov	r2, r3
 8001964:	214b      	movs	r1, #75	; 0x4b
 8001966:	205a      	movs	r0, #90	; 0x5a
 8001968:	f7ff fde6 	bl	8001538 <LCD_DrawValue>
				 			HAL_Delay(400);
 800196c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001970:	f001 f8e2 	bl	8002b38 <HAL_Delay>
				 			LCD_Clear (50, 75, 35, 15, 0xFFFF);
 8001974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	230f      	movs	r3, #15
 800197c:	2223      	movs	r2, #35	; 0x23
 800197e:	214b      	movs	r1, #75	; 0x4b
 8001980:	2032      	movs	r0, #50	; 0x32
 8001982:	f7ff fd40 	bl	8001406 <LCD_Clear>
				 			HAL_Delay(400);
 8001986:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800198a:	f001 f8d5 	bl	8002b38 <HAL_Delay>
				 		break;
 800198e:	e0a5      	b.n	8001adc <main+0x4d4>
				 		 } else if(time_setting == 1){
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <main+0x58c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d13b      	bne.n	8001a10 <main+0x408>
				 			time.Hours = hour;
 8001998:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <main+0x598>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b82      	ldr	r3, [pc, #520]	; (8001ba8 <main+0x5a0>)
 800199e:	701a      	strb	r2, [r3, #0]
				 			minute = value2/57;
 80019a0:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <main+0x590>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b81      	ldr	r3, [pc, #516]	; (8001bac <main+0x5a4>)
 80019a6:	fba3 1302 	umull	r1, r3, r3, r2
 80019aa:	1ad2      	subs	r2, r2, r3
 80019ac:	0852      	lsrs	r2, r2, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	095b      	lsrs	r3, r3, #5
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <main+0x5a8>)
 80019b6:	701a      	strb	r2, [r3, #0]
				 			if(minute > 60) minute = 60;
 80019b8:	4b7d      	ldr	r3, [pc, #500]	; (8001bb0 <main+0x5a8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b3c      	cmp	r3, #60	; 0x3c
 80019be:	d902      	bls.n	80019c6 <main+0x3be>
 80019c0:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <main+0x5a8>)
 80019c2:	223c      	movs	r2, #60	; 0x3c
 80019c4:	701a      	strb	r2, [r3, #0]
				 			LCD_DrawValue(50,75, time.Hours);
 80019c6:	4b78      	ldr	r3, [pc, #480]	; (8001ba8 <main+0x5a0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	214b      	movs	r1, #75	; 0x4b
 80019ce:	2032      	movs	r0, #50	; 0x32
 80019d0:	f7ff fdb2 	bl	8001538 <LCD_DrawValue>
				 			LCD_DrawString(85,75, ":");
 80019d4:	4a73      	ldr	r2, [pc, #460]	; (8001ba4 <main+0x59c>)
 80019d6:	214b      	movs	r1, #75	; 0x4b
 80019d8:	2055      	movs	r0, #85	; 0x55
 80019da:	f7ff fd7d 	bl	80014d8 <LCD_DrawString>
				 			LCD_DrawValue(90,75, minute);
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <main+0x5a8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	214b      	movs	r1, #75	; 0x4b
 80019e6:	205a      	movs	r0, #90	; 0x5a
 80019e8:	f7ff fda6 	bl	8001538 <LCD_DrawValue>
				 			HAL_Delay(400);
 80019ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80019f0:	f001 f8a2 	bl	8002b38 <HAL_Delay>
				 			LCD_Clear (90, 75, 35, 15, 0xFFFF);
 80019f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	230f      	movs	r3, #15
 80019fc:	2223      	movs	r2, #35	; 0x23
 80019fe:	214b      	movs	r1, #75	; 0x4b
 8001a00:	205a      	movs	r0, #90	; 0x5a
 8001a02:	f7ff fd00 	bl	8001406 <LCD_Clear>
				 			HAL_Delay(400);
 8001a06:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001a0a:	f001 f895 	bl	8002b38 <HAL_Delay>
				 		break;
 8001a0e:	e065      	b.n	8001adc <main+0x4d4>
				 		 } else if (time_setting == 2){
 8001a10:	4b60      	ldr	r3, [pc, #384]	; (8001b94 <main+0x58c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d133      	bne.n	8001a80 <main+0x478>
				 			time.Minutes = minute;
 8001a18:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <main+0x5a8>)
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	4b62      	ldr	r3, [pc, #392]	; (8001ba8 <main+0x5a0>)
 8001a1e:	705a      	strb	r2, [r3, #1]
				 			LCD_DrawValue(50,75, time.Hours);
 8001a20:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <main+0x5a0>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	214b      	movs	r1, #75	; 0x4b
 8001a28:	2032      	movs	r0, #50	; 0x32
 8001a2a:	f7ff fd85 	bl	8001538 <LCD_DrawValue>
				 			LCD_DrawString(85,75, ":");
 8001a2e:	4a5d      	ldr	r2, [pc, #372]	; (8001ba4 <main+0x59c>)
 8001a30:	214b      	movs	r1, #75	; 0x4b
 8001a32:	2055      	movs	r0, #85	; 0x55
 8001a34:	f7ff fd50 	bl	80014d8 <LCD_DrawString>
				 			LCD_DrawValue(90,75, time.Minutes);
 8001a38:	4b5b      	ldr	r3, [pc, #364]	; (8001ba8 <main+0x5a0>)
 8001a3a:	785b      	ldrb	r3, [r3, #1]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	214b      	movs	r1, #75	; 0x4b
 8001a40:	205a      	movs	r0, #90	; 0x5a
 8001a42:	f7ff fd79 	bl	8001538 <LCD_DrawValue>
				 			LCD_DrawString(50,90, "Food weight: ");
 8001a46:	4a5b      	ldr	r2, [pc, #364]	; (8001bb4 <main+0x5ac>)
 8001a48:	215a      	movs	r1, #90	; 0x5a
 8001a4a:	2032      	movs	r0, #50	; 0x32
 8001a4c:	f7ff fd44 	bl	80014d8 <LCD_DrawString>
				 			amount = value2/200;
 8001a50:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <main+0x590>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <main+0x5b0>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <main+0x5b4>)
 8001a5e:	6013      	str	r3, [r2, #0]
				 			LCD_DrawValue(150,90, 5*amount);
 8001a60:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <main+0x5b4>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	215a      	movs	r1, #90	; 0x5a
 8001a6e:	2096      	movs	r0, #150	; 0x96
 8001a70:	f7ff fd62 	bl	8001538 <LCD_DrawValue>
				 			LCD_DrawString(200,90, "g");
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <main+0x5b8>)
 8001a76:	215a      	movs	r1, #90	; 0x5a
 8001a78:	20c8      	movs	r0, #200	; 0xc8
 8001a7a:	f7ff fd2d 	bl	80014d8 <LCD_DrawString>
				 		break;
 8001a7e:	e02d      	b.n	8001adc <main+0x4d4>
				 		 }else if(time_setting == 3){
 8001a80:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <main+0x58c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d129      	bne.n	8001adc <main+0x4d4>
				 			sAlarm.Alarm = RTC_ALARM_A;
 8001a88:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <main+0x5bc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
				 			sAlarm.AlarmTime.Hours = time.Hours;
 8001a8e:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <main+0x5a0>)
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <main+0x5bc>)
 8001a94:	701a      	strb	r2, [r3, #0]
				 			sAlarm.AlarmTime.Minutes = time.Minutes;
 8001a96:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <main+0x5a0>)
 8001a98:	785a      	ldrb	r2, [r3, #1]
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <main+0x5bc>)
 8001a9c:	705a      	strb	r2, [r3, #1]
				 			sAlarm.AlarmTime.Seconds = time.Seconds;
 8001a9e:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <main+0x5a0>)
 8001aa0:	789a      	ldrb	r2, [r3, #2]
 8001aa2:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <main+0x5bc>)
 8001aa4:	709a      	strb	r2, [r3, #2]
				 			if(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) == HAL_OK){
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4946      	ldr	r1, [pc, #280]	; (8001bc4 <main+0x5bc>)
 8001aaa:	4847      	ldr	r0, [pc, #284]	; (8001bc8 <main+0x5c0>)
 8001aac:	f003 f8e4 	bl	8004c78 <HAL_RTC_SetAlarm_IT>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <main+0x4b4>
				 				alarm_set = 1;
 8001ab6:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <main+0x5c4>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
				 			Machine_state = 0;
 8001abc:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <main+0x5c8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
				 			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8001ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001acc:	22f0      	movs	r2, #240	; 0xf0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff fc98 	bl	8001406 <LCD_Clear>
				 		break;
 8001ad6:	e001      	b.n	8001adc <main+0x4d4>
				 	  	 	break;
 8001ad8:	bf00      	nop
 8001ada:	e173      	b.n	8001dc4 <main+0x7bc>
				 		break;
 8001adc:	bf00      	nop
		 		break;
 8001ade:	e171      	b.n	8001dc4 <main+0x7bc>
	//------------- ----------------------------- RTC & Servo motor ------------------------------------------------
		 	case 2:

		 		 switch(function){
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <main+0x5cc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <main+0x4e6>
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d034      	beq.n	8001b56 <main+0x54e>
 8001aec:	e0a6      	b.n	8001c3c <main+0x634>
		 		 	case 0:
		 		 		LCD_DrawString(50,60, "Dispatching...");
 8001aee:	4a3a      	ldr	r2, [pc, #232]	; (8001bd8 <main+0x5d0>)
 8001af0:	213c      	movs	r1, #60	; 0x3c
 8001af2:	2032      	movs	r0, #50	; 0x32
 8001af4:	f7ff fcf0 	bl	80014d8 <LCD_DrawString>

		 		 		for(int i = 0; i < amount; i++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	e018      	b.n	8001b30 <main+0x528>
		 		 			MX_TIM3_Init(250);
 8001afe:	20fa      	movs	r0, #250	; 0xfa
 8001b00:	f000 fad6 	bl	80020b0 <MX_TIM3_Init>
		 		 			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b04:	2100      	movs	r1, #0
 8001b06:	4835      	ldr	r0, [pc, #212]	; (8001bdc <main+0x5d4>)
 8001b08:	f003 fdfc 	bl	8005704 <HAL_TIM_PWM_Start>
		 		 			HAL_Delay(300);
 8001b0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b10:	f001 f812 	bl	8002b38 <HAL_Delay>

		 		 			MX_TIM3_Init(50);
 8001b14:	2032      	movs	r0, #50	; 0x32
 8001b16:	f000 facb 	bl	80020b0 <MX_TIM3_Init>
		 		 			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	482f      	ldr	r0, [pc, #188]	; (8001bdc <main+0x5d4>)
 8001b1e:	f003 fdf1 	bl	8005704 <HAL_TIM_PWM_Start>
		 		 			HAL_Delay(500);
 8001b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b26:	f001 f807 	bl	8002b38 <HAL_Delay>
		 		 		for(int i = 0; i < amount; i++){
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <main+0x5b4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3e1      	bcc.n	8001afe <main+0x4f6>
		 		 		}
		 		 		Machine_state = 3;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <main+0x5c8>)
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	701a      	strb	r2, [r3, #0]
		 		 		LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8001b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b4a:	22f0      	movs	r2, #240	; 0xf0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff fc59 	bl	8001406 <LCD_Clear>
		 		 		break;
 8001b54:	e072      	b.n	8001c3c <main+0x634>

		 		 	case 1:
		 		 			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8001b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b60:	22f0      	movs	r2, #240	; 0xf0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fc4e 	bl	8001406 <LCD_Clear>
		 		 			LCD_DrawString(50,60, "Dispatching...");
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <main+0x5d0>)
 8001b6c:	213c      	movs	r1, #60	; 0x3c
 8001b6e:	2032      	movs	r0, #50	; 0x32
 8001b70:	f7ff fcb2 	bl	80014d8 <LCD_DrawString>
		 		 			MX_TIM3_Init(50);
 8001b74:	2032      	movs	r0, #50	; 0x32
 8001b76:	f000 fa9b 	bl	80020b0 <MX_TIM3_Init>
		 		 			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4817      	ldr	r0, [pc, #92]	; (8001bdc <main+0x5d4>)
 8001b7e:	f003 fdc1 	bl	8005704 <HAL_TIM_PWM_Start>

		 		 			if(status){
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <main+0x5d8>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d058      	beq.n	8001c3c <main+0x634>
		 		 				for(int i = 0; i < amount; i++){
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	e042      	b.n	8001c16 <main+0x60e>
 8001b90:	08009274 	.word	0x08009274
 8001b94:	200003f0 	.word	0x200003f0
 8001b98:	200003e0 	.word	0x200003e0
 8001b9c:	e1fc780f 	.word	0xe1fc780f
 8001ba0:	200003f1 	.word	0x200003f1
 8001ba4:	08009288 	.word	0x08009288
 8001ba8:	200003b8 	.word	0x200003b8
 8001bac:	1f7047dd 	.word	0x1f7047dd
 8001bb0:	200003f2 	.word	0x200003f2
 8001bb4:	08009260 	.word	0x08009260
 8001bb8:	51eb851f 	.word	0x51eb851f
 8001bbc:	200003ec 	.word	0x200003ec
 8001bc0:	08009270 	.word	0x08009270
 8001bc4:	200003bc 	.word	0x200003bc
 8001bc8:	200002c4 	.word	0x200002c4
 8001bcc:	200003f3 	.word	0x200003f3
 8001bd0:	200003ce 	.word	0x200003ce
 8001bd4:	200003e8 	.word	0x200003e8
 8001bd8:	0800928c 	.word	0x0800928c
 8001bdc:	20000320 	.word	0x20000320
 8001be0:	200003cc 	.word	0x200003cc
		 		 				MX_TIM3_Init(250);
 8001be4:	20fa      	movs	r0, #250	; 0xfa
 8001be6:	f000 fa63 	bl	80020b0 <MX_TIM3_Init>
		 		 				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001bea:	2100      	movs	r1, #0
 8001bec:	4878      	ldr	r0, [pc, #480]	; (8001dd0 <main+0x7c8>)
 8001bee:	f003 fd89 	bl	8005704 <HAL_TIM_PWM_Start>
		 		 				HAL_Delay(300);
 8001bf2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bf6:	f000 ff9f 	bl	8002b38 <HAL_Delay>

		 		 				MX_TIM3_Init(50);
 8001bfa:	2032      	movs	r0, #50	; 0x32
 8001bfc:	f000 fa58 	bl	80020b0 <MX_TIM3_Init>
		 		 				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c00:	2100      	movs	r1, #0
 8001c02:	4873      	ldr	r0, [pc, #460]	; (8001dd0 <main+0x7c8>)
 8001c04:	f003 fd7e 	bl	8005704 <HAL_TIM_PWM_Start>
		 		 				HAL_Delay(500);
 8001c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c0c:	f000 ff94 	bl	8002b38 <HAL_Delay>
		 		 				for(int i = 0; i < amount; i++){
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4b6e      	ldr	r3, [pc, #440]	; (8001dd4 <main+0x7cc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3e1      	bcc.n	8001be4 <main+0x5dc>
		 		 				}
		 		 				Machine_state = 3;
 8001c20:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <main+0x7d0>)
 8001c22:	2203      	movs	r2, #3
 8001c24:	701a      	strb	r2, [r3, #0]
		 		 				LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8001c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c30:	22f0      	movs	r2, #240	; 0xf0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fbe6 	bl	8001406 <LCD_Clear>
		 		 				break;
 8001c3a:	bf00      	nop
		 		 			  }
		 		 }
	//------------- ----------------------------- Sensing approach and eat ------------------------------------------------
		 	case 3:
		 		//------------- ----------------------HCSR04-------------------------------
		 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2140      	movs	r1, #64	; 0x40
 8001c40:	4866      	ldr	r0, [pc, #408]	; (8001ddc <main+0x7d4>)
 8001c42:	f001 ff42 	bl	8003aca <HAL_GPIO_WritePin>
		 		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c46:	4b66      	ldr	r3, [pc, #408]	; (8001de0 <main+0x7d8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
		 		while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001c4e:	bf00      	nop
 8001c50:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <main+0x7d8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	d9fa      	bls.n	8001c50 <main+0x648>
		 		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2140      	movs	r1, #64	; 0x40
 8001c5e:	485f      	ldr	r0, [pc, #380]	; (8001ddc <main+0x7d4>)
 8001c60:	f001 ff33 	bl	8003aca <HAL_GPIO_WritePin>

		 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001c64:	f000 ff5e 	bl	8002b24 <HAL_GetTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a5e      	ldr	r2, [pc, #376]	; (8001de4 <main+0x7dc>)
 8001c6c:	6013      	str	r3, [r2, #0]
		 			 			      // wait for the echo pin to go high
		 		while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001c6e:	bf00      	nop
 8001c70:	2120      	movs	r1, #32
 8001c72:	485a      	ldr	r0, [pc, #360]	; (8001ddc <main+0x7d4>)
 8001c74:	f001 ff12 	bl	8003a9c <HAL_GPIO_ReadPin>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <main+0x688>
 8001c7e:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <main+0x7dc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f103 040a 	add.w	r4, r3, #10
 8001c86:	f000 ff4d 	bl	8002b24 <HAL_GetTick>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	d8ef      	bhi.n	8001c70 <main+0x668>
		 		Val1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <main+0x7d8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	4a54      	ldr	r2, [pc, #336]	; (8001de8 <main+0x7e0>)
 8001c98:	6013      	str	r3, [r2, #0]

		 		pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001c9a:	f000 ff43 	bl	8002b24 <HAL_GetTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <main+0x7dc>)
 8001ca2:	6013      	str	r3, [r2, #0]
		 			 			      // wait for the echo pin to go low
		 		while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001ca4:	bf00      	nop
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	484c      	ldr	r0, [pc, #304]	; (8001ddc <main+0x7d4>)
 8001caa:	f001 fef7 	bl	8003a9c <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <main+0x6be>
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <main+0x7dc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001cbc:	f000 ff32 	bl	8002b24 <HAL_GetTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	429c      	cmp	r4, r3
 8001cc4:	d8ef      	bhi.n	8001ca6 <main+0x69e>
		 		Val2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001cc6:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <main+0x7d8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	4a47      	ldr	r2, [pc, #284]	; (8001dec <main+0x7e4>)
 8001cce:	6013      	str	r3, [r2, #0]

		 		Distance = (Val2-Val1)* 0.034/2;
 8001cd0:	4b46      	ldr	r3, [pc, #280]	; (8001dec <main+0x7e4>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <main+0x7e0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fbee 	bl	80004bc <__aeabi_ui2d>
 8001ce0:	a339      	add	r3, pc, #228	; (adr r3, 8001dc8 <main+0x7c0>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fc63 	bl	80005b0 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfa:	f7fe fd83 	bl	8000804 <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff2b 	bl	8000b60 <__aeabi_d2uiz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <main+0x7e8>)
 8001d10:	801a      	strh	r2, [r3, #0]
		 		LCD_DrawString(50, 130, "Distance: ");
 8001d12:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <main+0x7ec>)
 8001d14:	2182      	movs	r1, #130	; 0x82
 8001d16:	2032      	movs	r0, #50	; 0x32
 8001d18:	f7ff fbde 	bl	80014d8 <LCD_DrawString>
		 		LCD_DrawValue(150, 130, Distance);
 8001d1c:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <main+0x7e8>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	2182      	movs	r1, #130	; 0x82
 8001d24:	2096      	movs	r0, #150	; 0x96
 8001d26:	f7ff fc07 	bl	8001538 <LCD_DrawValue>
//		 			}
//		 		}
//		 		if(accu_second > 10)
//		 			 if(pause_second > 60 && Distance > 20) Machine_state = 4;

		 		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == SET){
 8001d2a:	2120      	movs	r1, #32
 8001d2c:	4832      	ldr	r0, [pc, #200]	; (8001df8 <main+0x7f0>)
 8001d2e:	f001 feb5 	bl	8003a9c <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d144      	bne.n	8001dc2 <main+0x7ba>

		 			Machine_state = 4;
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <main+0x7d0>)
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	701a      	strb	r2, [r3, #0]
		 			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8001d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d48:	22f0      	movs	r2, #240	; 0xf0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff fb5a 	bl	8001406 <LCD_Clear>
		 		}
		 		break;
 8001d52:	e036      	b.n	8001dc2 <main+0x7ba>

		 	case 4: // Done eating
		 		LCD_DrawValue(50, 130, countdown);
 8001d54:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <main+0x7f4>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2182      	movs	r1, #130	; 0x82
 8001d5c:	2032      	movs	r0, #50	; 0x32
 8001d5e:	f7ff fbeb 	bl	8001538 <LCD_DrawValue>
		 		countdown--;
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <main+0x7f4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <main+0x7f4>)
 8001d6c:	701a      	strb	r2, [r3, #0]
		 		 if(!countdown)
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <main+0x7f4>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d11e      	bne.n	8001db4 <main+0x7ac>
					 if (Ov7725_vsync == 2){
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <main+0x7f8>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d119      	bne.n	8001db4 <main+0x7ac>
						 FIFO_PREPARE;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <main+0x7f0>)
 8001d82:	2204      	movs	r2, #4
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <main+0x7fc>)
 8001d88:	2220      	movs	r2, #32
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <main+0x7fc>)
 8001d8e:	2220      	movs	r2, #32
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <main+0x7f0>)
 8001d94:	2204      	movs	r2, #4
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <main+0x7fc>)
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	615a      	str	r2, [r3, #20]
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <main+0x7fc>)
 8001da0:	2220      	movs	r2, #32
 8001da2:	611a      	str	r2, [r3, #16]
						 ImagDisp();
 8001da4:	f7fe ff46 	bl	8000c34 <ImagDisp>
						 Ov7725_vsync = 0;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <main+0x7f8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
						 Machine_state = 5;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <main+0x7d0>)
 8001db0:	2205      	movs	r2, #5
 8001db2:	701a      	strb	r2, [r3, #0]
					}
		 		 HAL_Delay(1000);
 8001db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db8:	f000 febe 	bl	8002b38 <HAL_Delay>
		 		break;
 8001dbc:	e002      	b.n	8001dc4 <main+0x7bc>
					 break;
 8001dbe:	bf00      	nop
 8001dc0:	e458      	b.n	8001674 <main+0x6c>
		 		break;
 8001dc2:	bf00      	nop
	  while (1){
 8001dc4:	e456      	b.n	8001674 <main+0x6c>
 8001dc6:	bf00      	nop
 8001dc8:	b020c49c 	.word	0xb020c49c
 8001dcc:	3fa16872 	.word	0x3fa16872
 8001dd0:	20000320 	.word	0x20000320
 8001dd4:	200003ec 	.word	0x200003ec
 8001dd8:	200003ce 	.word	0x200003ce
 8001ddc:	40011800 	.word	0x40011800
 8001de0:	200002d8 	.word	0x200002d8
 8001de4:	200003dc 	.word	0x200003dc
 8001de8:	200003d0 	.word	0x200003d0
 8001dec:	200003d4 	.word	0x200003d4
 8001df0:	200003d8 	.word	0x200003d8
 8001df4:	0800929c 	.word	0x0800929c
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	2000009b 	.word	0x2000009b
 8001e00:	200003f4 	.word	0x200003f4
 8001e04:	40011000 	.word	0x40011000

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b096      	sub	sp, #88	; 0x58
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e12:	2228      	movs	r2, #40	; 0x28
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 fb04 	bl	8006424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]
 8001e3a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e52:	2302      	movs	r3, #2
 8001e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 fe76 	bl	8003b58 <HAL_RCC_OscConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e72:	f000 fb39 	bl	80024e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e76:	230f      	movs	r3, #15
 8001e78:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 f8e2 	bl	800405c <HAL_RCC_ClockConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e9e:	f000 fb23 	bl	80024e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fa4b 	bl	8004350 <HAL_RCCEx_PeriphCLKConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001ec0:	f000 fb12 	bl	80024e8 <Error_Handler>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3758      	adds	r7, #88	; 0x58
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001ede:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <MX_ADC2_Init+0x78>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001ef6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001efa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f08:	480d      	ldr	r0, [pc, #52]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001f0a:	f000 fe39 	bl	8002b80 <HAL_ADC_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001f14:	f000 fae8 	bl	80024e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f18:	2307      	movs	r3, #7
 8001f1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_ADC2_Init+0x74>)
 8001f2a:	f001 f8d3 	bl	80030d4 <HAL_ADC_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001f34:	f000 fad8 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000294 	.word	0x20000294
 8001f44:	40012800 	.word	0x40012800

08001f48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	2100      	movs	r1, #0
 8001f54:	460a      	mov	r2, r1
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	460a      	mov	r2, r1
 8001f5a:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <MX_RTC_Init+0xc0>)
 8001f6a:	4a28      	ldr	r2, [pc, #160]	; (800200c <MX_RTC_Init+0xc4>)
 8001f6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <MX_RTC_Init+0xc0>)
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f74:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <MX_RTC_Init+0xc0>)
 8001f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f7e:	4822      	ldr	r0, [pc, #136]	; (8002008 <MX_RTC_Init+0xc0>)
 8001f80:	f002 fb74 	bl	800466c <HAL_RTC_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f000 faad 	bl	80024e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 8001f8e:	2318      	movs	r3, #24
 8001f90:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x53;
 8001f92:	2353      	movs	r3, #83	; 0x53
 8001f94:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4819      	ldr	r0, [pc, #100]	; (8002008 <MX_RTC_Init+0xc0>)
 8001fa4:	f002 fbee 	bl	8004784 <HAL_RTC_SetTime>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001fae:	f000 fa9b 	bl	80024e8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x16;
 8001fba:	2316      	movs	r3, #22
 8001fbc:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x24;
 8001fbe:	2324      	movs	r3, #36	; 0x24
 8001fc0:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480f      	ldr	r0, [pc, #60]	; (8002008 <MX_RTC_Init+0xc0>)
 8001fcc:	f002 fd4a 	bl	8004a64 <HAL_RTC_SetDate>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001fd6:	f000 fa87 	bl	80024e8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x00;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001fea:	463b      	mov	r3, r7
 8001fec:	2201      	movs	r2, #1
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_RTC_Init+0xc0>)
 8001ff2:	f002 fe41 	bl	8004c78 <HAL_RTC_SetAlarm_IT>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001ffc:	f000 fa74 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200002c4 	.word	0x200002c4
 800200c:	40002800 	.word	0x40002800

08002010 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	463b      	mov	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <MX_TIM1_Init+0x98>)
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <MX_TIM1_Init+0x9c>)
 8002030:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <MX_TIM1_Init+0x98>)
 8002034:	2247      	movs	r2, #71	; 0x47
 8002036:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <MX_TIM1_Init+0x98>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_TIM1_Init+0x98>)
 8002040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002044:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <MX_TIM1_Init+0x98>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <MX_TIM1_Init+0x98>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <MX_TIM1_Init+0x98>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <MX_TIM1_Init+0x98>)
 800205a:	f003 fa54 	bl	8005506 <HAL_TIM_Base_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002064:	f000 fa40 	bl	80024e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4619      	mov	r1, r3
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <MX_TIM1_Init+0x98>)
 8002076:	f003 fcc1 	bl	80059fc <HAL_TIM_ConfigClockSource>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002080:	f000 fa32 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_TIM1_Init+0x98>)
 8002092:	f004 f85b 	bl	800614c <HAL_TIMEx_MasterConfigSynchronization>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800209c:	f000 fa24 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200002d8 	.word	0x200002d8
 80020ac:	40012c00 	.word	0x40012c00

080020b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(uint16_t pulse)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b090      	sub	sp, #64	; 0x40
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
 80020e2:	615a      	str	r2, [r3, #20]
 80020e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020e6:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <MX_TIM3_Init+0xf0>)
 80020e8:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <MX_TIM3_Init+0xf4>)
 80020ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <MX_TIM3_Init+0xf0>)
 80020ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80020f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <MX_TIM3_Init+0xf0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <MX_TIM3_Init+0xf0>)
 80020fc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002100:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002102:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <MX_TIM3_Init+0xf0>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <MX_TIM3_Init+0xf0>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800210e:	4824      	ldr	r0, [pc, #144]	; (80021a0 <MX_TIM3_Init+0xf0>)
 8002110:	f003 f9f9 	bl	8005506 <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800211a:	f000 f9e5 	bl	80024e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002128:	4619      	mov	r1, r3
 800212a:	481d      	ldr	r0, [pc, #116]	; (80021a0 <MX_TIM3_Init+0xf0>)
 800212c:	f003 fc66 	bl	80059fc <HAL_TIM_ConfigClockSource>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002136:	f000 f9d7 	bl	80024e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800213a:	4819      	ldr	r0, [pc, #100]	; (80021a0 <MX_TIM3_Init+0xf0>)
 800213c:	f003 fa8a 	bl	8005654 <HAL_TIM_PWM_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002146:	f000 f9cf 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002156:	4619      	mov	r1, r3
 8002158:	4811      	ldr	r0, [pc, #68]	; (80021a0 <MX_TIM3_Init+0xf0>)
 800215a:	f003 fff7 	bl	800614c <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002164:	f000 f9c0 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002168:	2360      	movs	r3, #96	; 0x60
 800216a:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = pulse;
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2200      	movs	r2, #0
 800217e:	4619      	mov	r1, r3
 8002180:	4807      	ldr	r0, [pc, #28]	; (80021a0 <MX_TIM3_Init+0xf0>)
 8002182:	f003 fb79 	bl	8005878 <HAL_TIM_PWM_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800218c:	f000 f9ac 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <MX_TIM3_Init+0xf0>)
 8002192:	f000 fa7b 	bl	800268c <HAL_TIM_MspPostInit>

}
 8002196:	bf00      	nop
 8002198:	3740      	adds	r7, #64	; 0x40
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000320 	.word	0x20000320
 80021a4:	40000400 	.word	0x40000400

080021a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ae:	f107 0318 	add.w	r3, r7, #24
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021bc:	4b81      	ldr	r3, [pc, #516]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a80      	ldr	r2, [pc, #512]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d4:	4b7b      	ldr	r3, [pc, #492]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a7a      	ldr	r2, [pc, #488]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b78      	ldr	r3, [pc, #480]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b75      	ldr	r3, [pc, #468]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a74      	ldr	r2, [pc, #464]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <MX_GPIO_Init+0x21c>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <MX_GPIO_Init+0x21c>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a6e      	ldr	r2, [pc, #440]	; (80023c4 <MX_GPIO_Init+0x21c>)
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b6c      	ldr	r3, [pc, #432]	; (80023c4 <MX_GPIO_Init+0x21c>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800221c:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <MX_GPIO_Init+0x21c>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <MX_GPIO_Init+0x21c>)
 8002222:	f043 0320 	orr.w	r3, r3, #32
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <MX_GPIO_Init+0x21c>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Ultrasound_Trigger_Pin|camera_pinE1_Pin, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	2142      	movs	r1, #66	; 0x42
 8002238:	4863      	ldr	r0, [pc, #396]	; (80023c8 <MX_GPIO_Init+0x220>)
 800223a:	f001 fc46 	bl	8003aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, camera_pin_Pin|camera_pinA3_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	210c      	movs	r1, #12
 8002242:	4862      	ldr	r0, [pc, #392]	; (80023cc <MX_GPIO_Init+0x224>)
 8002244:	f001 fc41 	bl	8003aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, camera_pinC4_Pin|camera_pinC5_Pin|camera_pinC6_Pin|camera_pinC7_Pin, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	21f0      	movs	r1, #240	; 0xf0
 800224c:	4860      	ldr	r0, [pc, #384]	; (80023d0 <MX_GPIO_Init+0x228>)
 800224e:	f001 fc3c 	bl	8003aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, camera_pi_Pin|camera_pinD3_Pin, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	f241 0108 	movw	r1, #4104	; 0x1008
 8002258:	485e      	ldr	r0, [pc, #376]	; (80023d4 <MX_GPIO_Init+0x22c>)
 800225a:	f001 fc36 	bl	8003aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ultrasound_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasound_Echo_Pin;
 800225e:	2320      	movs	r3, #32
 8002260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ultrasound_Echo_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	4619      	mov	r1, r3
 8002270:	4855      	ldr	r0, [pc, #340]	; (80023c8 <MX_GPIO_Init+0x220>)
 8002272:	f001 fa7f 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasound_Trigger_Pin */
  GPIO_InitStruct.Pin = Ultrasound_Trigger_Pin;
 8002276:	2340      	movs	r3, #64	; 0x40
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227a:	2301      	movs	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2302      	movs	r3, #2
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Ultrasound_Trigger_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	4619      	mov	r1, r3
 800228c:	484e      	ldr	r0, [pc, #312]	; (80023c8 <MX_GPIO_Init+0x220>)
 800228e:	f001 fa71 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : camer_pin_Pin */
  GPIO_InitStruct.Pin = camer_pin_Pin;
 8002292:	2308      	movs	r3, #8
 8002294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002296:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <MX_GPIO_Init+0x230>)
 8002298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(camer_pin_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	4619      	mov	r1, r3
 80022a4:	484a      	ldr	r0, [pc, #296]	; (80023d0 <MX_GPIO_Init+0x228>)
 80022a6:	f001 fa65 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : Clock_setting_key_Pin */
  GPIO_InitStruct.Pin = Clock_setting_key_Pin;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ae:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <MX_GPIO_Init+0x234>)
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Clock_setting_key_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0318 	add.w	r3, r7, #24
 80022ba:	4619      	mov	r1, r3
 80022bc:	4843      	ldr	r0, [pc, #268]	; (80023cc <MX_GPIO_Init+0x224>)
 80022be:	f001 fa59 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pin_Pin camera_pinA3_Pin */
  GPIO_InitStruct.Pin = camera_pin_Pin|camera_pinA3_Pin;
 80022c2:	230c      	movs	r3, #12
 80022c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 0318 	add.w	r3, r7, #24
 80022d6:	4619      	mov	r1, r3
 80022d8:	483c      	ldr	r0, [pc, #240]	; (80023cc <MX_GPIO_Init+0x224>)
 80022da:	f001 fa4b 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022de:	2310      	movs	r3, #16
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4836      	ldr	r0, [pc, #216]	; (80023cc <MX_GPIO_Init+0x224>)
 80022f2:	f001 fa3f 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : External_key_Pin */
  GPIO_InitStruct.Pin = External_key_Pin;
 80022f6:	2320      	movs	r3, #32
 80022f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022fe:	2302      	movs	r3, #2
 8002300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(External_key_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	4619      	mov	r1, r3
 8002308:	4830      	ldr	r0, [pc, #192]	; (80023cc <MX_GPIO_Init+0x224>)
 800230a:	f001 fa33 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pinC4_Pin camera_pinC5_Pin */
  GPIO_InitStruct.Pin = camera_pinC4_Pin|camera_pinC5_Pin;
 800230e:	2330      	movs	r3, #48	; 0x30
 8002310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002312:	2301      	movs	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231e:	f107 0318 	add.w	r3, r7, #24
 8002322:	4619      	mov	r1, r3
 8002324:	482a      	ldr	r0, [pc, #168]	; (80023d0 <MX_GPIO_Init+0x228>)
 8002326:	f001 fa25 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pinB10_Pin camera_pinB11_Pin camera_pinB12_Pin camera_pinB13_Pin
                           camera_pinB14_Pin camera_pinB15_Pin camera_pinB8_Pin camera_pinB9_Pin */
  GPIO_InitStruct.Pin = camera_pinB10_Pin|camera_pinB11_Pin|camera_pinB12_Pin|camera_pinB13_Pin
 800232a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800232e:	61bb      	str	r3, [r7, #24]
                          |camera_pinB14_Pin|camera_pinB15_Pin|camera_pinB8_Pin|camera_pinB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 0318 	add.w	r3, r7, #24
 800233c:	4619      	mov	r1, r3
 800233e:	4828      	ldr	r0, [pc, #160]	; (80023e0 <MX_GPIO_Init+0x238>)
 8002340:	f001 fa18 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pi_Pin camera_pinD3_Pin */
  GPIO_InitStruct.Pin = camera_pi_Pin|camera_pinD3_Pin;
 8002344:	f241 0308 	movw	r3, #4104	; 0x1008
 8002348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	4619      	mov	r1, r3
 800235c:	481d      	ldr	r0, [pc, #116]	; (80023d4 <MX_GPIO_Init+0x22c>)
 800235e:	f001 fa09 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pinC6_Pin camera_pinC7_Pin */
  GPIO_InitStruct.Pin = camera_pinC6_Pin|camera_pinC7_Pin;
 8002362:	23c0      	movs	r3, #192	; 0xc0
 8002364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002366:	2311      	movs	r3, #17
 8002368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002372:	f107 0318 	add.w	r3, r7, #24
 8002376:	4619      	mov	r1, r3
 8002378:	4815      	ldr	r0, [pc, #84]	; (80023d0 <MX_GPIO_Init+0x228>)
 800237a:	f001 f9fb 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : camera_pinE1_Pin */
  GPIO_InitStruct.Pin = camera_pinE1_Pin;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002382:	2301      	movs	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(camera_pinE1_GPIO_Port, &GPIO_InitStruct);
 800238e:	f107 0318 	add.w	r3, r7, #24
 8002392:	4619      	mov	r1, r3
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <MX_GPIO_Init+0x220>)
 8002396:	f001 f9ed 	bl	8003774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2006      	movs	r0, #6
 80023a0:	f001 f9b1 	bl	8003706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023a4:	2006      	movs	r0, #6
 80023a6:	f001 f9ca 	bl	800373e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2009      	movs	r0, #9
 80023b0:	f001 f9a9 	bl	8003706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80023b4:	2009      	movs	r0, #9
 80023b6:	f001 f9c2 	bl	800373e <HAL_NVIC_EnableIRQ>

}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40011800 	.word	0x40011800
 80023cc:	40010800 	.word	0x40010800
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40011400 	.word	0x40011400
 80023d8:	10210000 	.word	0x10210000
 80023dc:	10110000 	.word	0x10110000
 80023e0:	40010c00 	.word	0x40010c00

080023e4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
 80023f8:	615a      	str	r2, [r3, #20]
 80023fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <MX_FSMC_Init+0xbc>)
 80023fe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002402:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002406:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <MX_FSMC_Init+0xc0>)
 8002408:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <MX_FSMC_Init+0xbc>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002410:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <MX_FSMC_Init+0xbc>)
 800241e:	2210      	movs	r2, #16
 8002420:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002422:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_FSMC_Init+0xbc>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002434:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002436:	2200      	movs	r2, #0
 8002438:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <MX_FSMC_Init+0xbc>)
 800243c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002440:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002444:	2200      	movs	r2, #0
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <MX_FSMC_Init+0xbc>)
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002450:	2200      	movs	r2, #0
 8002452:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <MX_FSMC_Init+0xbc>)
 8002456:	2200      	movs	r2, #0
 8002458:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800245a:	230f      	movs	r3, #15
 800245c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800245e:	230f      	movs	r3, #15
 8002460:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002462:	23ff      	movs	r3, #255	; 0xff
 8002464:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002466:	230f      	movs	r3, #15
 8002468:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800246a:	2310      	movs	r3, #16
 800246c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800246e:	2311      	movs	r3, #17
 8002470:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	2200      	movs	r2, #0
 800247a:	4619      	mov	r1, r3
 800247c:	4808      	ldr	r0, [pc, #32]	; (80024a0 <MX_FSMC_Init+0xbc>)
 800247e:	f002 fff5 	bl	800546c <HAL_SRAM_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002488:	f000 f82e 	bl	80024e8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_FSMC_Init+0xc4>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <MX_FSMC_Init+0xc4>)
 8002492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002496:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002498:	bf00      	nop
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000368 	.word	0x20000368
 80024a4:	a0000104 	.word	0xa0000104
 80024a8:	40010000 	.word	0x40010000

080024ac <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

	status = 1;
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	801a      	strh	r2, [r3, #0]
	Machine_state = 2;
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RTC_AlarmAEventCallback+0x30>)
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
	function = 1;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_RTC_AlarmAEventCallback+0x34>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80024c6:	2201      	movs	r2, #1
 80024c8:	2120      	movs	r1, #32
 80024ca:	4806      	ldr	r0, [pc, #24]	; (80024e4 <HAL_RTC_AlarmAEventCallback+0x38>)
 80024cc:	f001 fafd 	bl	8003aca <HAL_GPIO_WritePin>

}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200003cc 	.word	0x200003cc
 80024dc:	200003ce 	.word	0x200003ce
 80024e0:	200003e8 	.word	0x200003e8
 80024e4:	40010c00 	.word	0x40010c00

080024e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_MspInit+0x5c>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <HAL_MspInit+0x5c>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6193      	str	r3, [r2, #24]
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_MspInit+0x5c>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_MspInit+0x5c>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <HAL_MspInit+0x5c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_MspInit+0x5c>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_MspInit+0x60>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_MspInit+0x60>)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000

08002558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_ADC_MspInit+0x6c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d121      	bne.n	80025bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_ADC_MspInit+0x70>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_ADC_MspInit+0x70>)
 800257e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002582:	6193      	str	r3, [r2, #24]
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_ADC_MspInit+0x70>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_ADC_MspInit+0x70>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <HAL_ADC_MspInit+0x70>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_ADC_MspInit+0x70>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN7
    */
    GPIO_InitStruct.Pin = VR_controller_Pin;
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ac:	2303      	movs	r3, #3
 80025ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VR_controller_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	4619      	mov	r1, r3
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <HAL_ADC_MspInit+0x74>)
 80025b8:	f001 f8dc 	bl	8003774 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025bc:	bf00      	nop
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40012800 	.word	0x40012800
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010800 	.word	0x40010800

080025d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_RTC_MspInit+0x4c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d118      	bne.n	8002614 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80025e2:	f001 faad 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_RTC_MspInit+0x50>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_RTC_MspInit+0x50>)
 80025ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RTC_MspInit+0x50>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RTC_MspInit+0x54>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	2029      	movs	r0, #41	; 0x29
 800260a:	f001 f87c 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800260e:	2029      	movs	r0, #41	; 0x29
 8002610:	f001 f895 	bl	800373e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40002800 	.word	0x40002800
 8002620:	40021000 	.word	0x40021000
 8002624:	4242043c 	.word	0x4242043c

08002628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a12      	ldr	r2, [pc, #72]	; (8002680 <HAL_TIM_Base_MspInit+0x58>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10c      	bne.n	8002654 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	4a11      	ldr	r2, [pc, #68]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 8002640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002644:	6193      	str	r3, [r2, #24]
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002652:	e010      	b.n	8002676 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_TIM_Base_MspInit+0x60>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10b      	bne.n	8002676 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40021000 	.word	0x40021000
 8002688:	40000400 	.word	0x40000400

0800268c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <HAL_TIM_MspPostInit+0x58>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d117      	bne.n	80026dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_TIM_MspPostInit+0x5c>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_TIM_MspPostInit+0x5c>)
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_TIM_MspPostInit+0x5c>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 80026c4:	2340      	movs	r3, #64	; 0x40
 80026c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	4619      	mov	r1, r3
 80026d6:	4805      	ldr	r0, [pc, #20]	; (80026ec <HAL_TIM_MspPostInit+0x60>)
 80026d8:	f001 f84c 	bl	8003774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026dc:	bf00      	nop
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40010800 	.word	0x40010800

080026f0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_FSMC_MspInit+0x78>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d129      	bne.n	8002760 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_FSMC_MspInit+0x78>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_FSMC_MspInit+0x7c>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_FSMC_MspInit+0x7c>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6153      	str	r3, [r2, #20]
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_FSMC_MspInit+0x7c>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800272a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800272e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	4619      	mov	r1, r3
 800273e:	480c      	ldr	r0, [pc, #48]	; (8002770 <HAL_FSMC_MspInit+0x80>)
 8002740:	f001 f818 	bl	8003774 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002744:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002748:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	4619      	mov	r1, r3
 8002758:	4806      	ldr	r0, [pc, #24]	; (8002774 <HAL_FSMC_MspInit+0x84>)
 800275a:	f001 f80b 	bl	8003774 <HAL_GPIO_Init>
 800275e:	e000      	b.n	8002762 <HAL_FSMC_MspInit+0x72>
    return;
 8002760:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200003f8 	.word	0x200003f8
 800276c:	40021000 	.word	0x40021000
 8002770:	40011800 	.word	0x40011800
 8002774:	40011400 	.word	0x40011400

08002778 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002780:	f7ff ffb6 	bl	80026f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <HardFault_Handler+0x4>

0800279e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <MemManage_Handler+0x4>

080027a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <BusFault_Handler+0x4>

080027aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ae:	e7fe      	b.n	80027ae <UsageFault_Handler+0x4>

080027b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d8:	f000 f992 	bl	8002b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(Clock_setting_key_Pin) != RESET)
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <EXTI0_IRQHandler+0x2c>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00b      	beq.n	8002808 <EXTI0_IRQHandler+0x28>
	  {

		time_setting += 1;
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <EXTI0_IRQHandler+0x30>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <EXTI0_IRQHandler+0x30>)
 80027fa:	701a      	strb	r2, [r3, #0]

	    __HAL_GPIO_EXTI_CLEAR_IT(Clock_setting_key_Pin);
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <EXTI0_IRQHandler+0x2c>)
 80027fe:	2201      	movs	r2, #1
 8002800:	615a      	str	r2, [r3, #20]
	    HAL_GPIO_EXTI_Callback(Clock_setting_key_Pin);
 8002802:	2001      	movs	r0, #1
 8002804:	f001 f992 	bl	8003b2c <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI0_IRQn 0 */
//  HAL_GPIO_EXTI_IRQHandler(Clock_setting_key_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40010400 	.word	0x40010400
 8002810:	200003f0 	.word	0x200003f0

08002814 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8002818:	4b17      	ldr	r3, [pc, #92]	; (8002878 <EXTI3_IRQHandler+0x64>)
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d023      	beq.n	800286c <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <EXTI3_IRQHandler+0x68>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10f      	bne.n	800284c <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <EXTI3_IRQHandler+0x6c>)
 800282e:	2210      	movs	r2, #16
 8002830:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 8002832:	4b14      	ldr	r3, [pc, #80]	; (8002884 <EXTI3_IRQHandler+0x70>)
 8002834:	2208      	movs	r2, #8
 8002836:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <EXTI3_IRQHandler+0x68>)
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <EXTI3_IRQHandler+0x70>)
 8002840:	2208      	movs	r2, #8
 8002842:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <EXTI3_IRQHandler+0x6c>)
 8002846:	2210      	movs	r2, #16
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	e009      	b.n	8002860 <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <EXTI3_IRQHandler+0x68>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <EXTI3_IRQHandler+0x70>)
 8002856:	2208      	movs	r2, #8
 8002858:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <EXTI3_IRQHandler+0x68>)
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <EXTI3_IRQHandler+0x64>)
 8002862:	2208      	movs	r2, #8
 8002864:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8002866:	2008      	movs	r0, #8
 8002868:	f001 f960 	bl	8003b2c <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(camer_pin_Pin);
 800286c:	2008      	movs	r0, #8
 800286e:	f001 f945 	bl	8003afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40010400 	.word	0x40010400
 800287c:	200003f4 	.word	0x200003f4
 8002880:	40011000 	.word	0x40011000
 8002884:	40011400 	.word	0x40011400

08002888 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <RTC_Alarm_IRQHandler+0x10>)
 800288e:	f002 fb21 	bl	8004ed4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200002c4 	.word	0x200002c4

0800289c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
	return 1;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <_kill>:

int _kill(int pid, int sig)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028b4:	f003 fd8c 	bl	80063d0 <__errno>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2216      	movs	r2, #22
 80028bc:	601a      	str	r2, [r3, #0]
	return -1;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_exit>:

void _exit (int status)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffe7 	bl	80028aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80028dc:	e7fe      	b.n	80028dc <_exit+0x12>

080028de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e00a      	b.n	8002906 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028f0:	f3af 8000 	nop.w
 80028f4:	4601      	mov	r1, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	60ba      	str	r2, [r7, #8]
 80028fc:	b2ca      	uxtb	r2, r1
 80028fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3301      	adds	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	dbf0      	blt.n	80028f0 <_read+0x12>
	}

return len;
 800290e:	687b      	ldr	r3, [r7, #4]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e009      	b.n	800293e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	60ba      	str	r2, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	429a      	cmp	r2, r3
 8002944:	dbf1      	blt.n	800292a <_write+0x12>
	}
	return len;
 8002946:	687b      	ldr	r3, [r7, #4]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_close>:

int _close(int file)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	return -1;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002976:	605a      	str	r2, [r3, #4]
	return 0;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <_isatty>:

int _isatty(int file)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	return 1;
 800298c:	2301      	movs	r3, #1
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <_sbrk+0x5c>)
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_sbrk+0x60>)
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <_sbrk+0x64>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <_sbrk+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <_sbrk+0x64>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d207      	bcs.n	80029f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e0:	f003 fcf6 	bl	80063d0 <__errno>
 80029e4:	4603      	mov	r3, r0
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ee:	e009      	b.n	8002a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <_sbrk+0x64>)
 8002a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20010000 	.word	0x20010000
 8002a10:	00000400 	.word	0x00000400
 8002a14:	200003fc 	.word	0x200003fc
 8002a18:	20000418 	.word	0x20000418

08002a1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a28:	f7ff fff8 	bl	8002a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a2c:	480b      	ldr	r0, [pc, #44]	; (8002a5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a2e:	490c      	ldr	r1, [pc, #48]	; (8002a60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a30:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a34:	e002      	b.n	8002a3c <LoopCopyDataInit>

08002a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3a:	3304      	adds	r3, #4

08002a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a40:	d3f9      	bcc.n	8002a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a44:	4c09      	ldr	r4, [pc, #36]	; (8002a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a48:	e001      	b.n	8002a4e <LoopFillZerobss>

08002a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a4c:	3204      	adds	r2, #4

08002a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a50:	d3fb      	bcc.n	8002a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a52:	f003 fcc3 	bl	80063dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a56:	f7fe fdd7 	bl	8001608 <main>
  bx lr
 8002a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002a64:	08009cbc 	.word	0x08009cbc
  ldr r2, =_sbss
 8002a68:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002a6c:	20000414 	.word	0x20000414

08002a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC1_2_IRQHandler>
	...

08002a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_Init+0x28>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <HAL_Init+0x28>)
 8002a7e:	f043 0310 	orr.w	r3, r3, #16
 8002a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f000 fe33 	bl	80036f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f000 f808 	bl	8002aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a90:	f7ff fd30 	bl	80024f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_InitTick+0x54>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_InitTick+0x58>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fe4b 	bl	800375a <HAL_SYSTICK_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00e      	b.n	8002aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b0f      	cmp	r3, #15
 8002ad2:	d80a      	bhi.n	8002aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002adc:	f000 fe13 	bl	8003706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae0:	4a06      	ldr	r2, [pc, #24]	; (8002afc <HAL_InitTick+0x5c>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000009c 	.word	0x2000009c
 8002af8:	200000a4 	.word	0x200000a4
 8002afc:	200000a0 	.word	0x200000a0

08002b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_IncTick+0x1c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_IncTick+0x20>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_IncTick+0x20>)
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	200000a4 	.word	0x200000a4
 8002b20:	20000400 	.word	0x20000400

08002b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <HAL_GetTick+0x10>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	20000400 	.word	0x20000400

08002b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_GetTick>
 8002b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b50:	d005      	beq.n	8002b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_Delay+0x44>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b5e:	bf00      	nop
 8002b60:	f7ff ffe0 	bl	8002b24 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d8f7      	bhi.n	8002b60 <HAL_Delay+0x28>
  {
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200000a4 	.word	0x200000a4

08002b80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0ce      	b.n	8002d40 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fcca 	bl	8002558 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fbd7 	bl	8003378 <ADC_ConversionStop_Disable>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 80a9 	bne.w	8002d2e <HAL_ADC_Init+0x1ae>
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 80a5 	bne.w	8002d2e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bec:	f023 0302 	bic.w	r3, r3, #2
 8002bf0:	f043 0202 	orr.w	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4951      	ldr	r1, [pc, #324]	; (8002d48 <HAL_ADC_Init+0x1c8>)
 8002c02:	428b      	cmp	r3, r1
 8002c04:	d10a      	bne.n	8002c1c <HAL_ADC_Init+0x9c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c0e:	d002      	beq.n	8002c16 <HAL_ADC_Init+0x96>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	e004      	b.n	8002c20 <HAL_ADC_Init+0xa0>
 8002c16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c1a:	e001      	b.n	8002c20 <HAL_ADC_Init+0xa0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7b1b      	ldrb	r3, [r3, #12]
 8002c26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c38:	d003      	beq.n	8002c42 <HAL_ADC_Init+0xc2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_ADC_Init+0xc8>
 8002c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c46:	e000      	b.n	8002c4a <HAL_ADC_Init+0xca>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7d1b      	ldrb	r3, [r3, #20]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d119      	bne.n	8002c8c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7b1b      	ldrb	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	035a      	lsls	r2, r3, #13
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e00b      	b.n	8002c8c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_ADC_Init+0x1cc>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cbc:	d003      	beq.n	8002cc6 <HAL_ADC_Init+0x146>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d104      	bne.n	8002cd0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	051b      	lsls	r3, r3, #20
 8002cce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_ADC_Init+0x1d0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d10b      	bne.n	8002d0c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d0a:	e018      	b.n	8002d3e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f023 0312 	bic.w	r3, r3, #18
 8002d14:	f043 0210 	orr.w	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d2c:	e007      	b.n	8002d3e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40013c00 	.word	0x40013c00
 8002d4c:	ffe1f7fd 	.word	0xffe1f7fd
 8002d50:	ff1f0efe 	.word	0xff1f0efe

08002d54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_Start+0x1a>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e098      	b.n	8002ea0 <HAL_ADC_Start+0x14c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 faa4 	bl	80032c4 <ADC_Enable>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8087 	bne.w	8002e96 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a41      	ldr	r2, [pc, #260]	; (8002ea8 <HAL_ADC_Start+0x154>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d105      	bne.n	8002db2 <HAL_ADC_Start+0x5e>
 8002da6:	4b41      	ldr	r3, [pc, #260]	; (8002eac <HAL_ADC_Start+0x158>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d115      	bne.n	8002dde <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d026      	beq.n	8002e1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ddc:	e01d      	b.n	8002e1a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2f      	ldr	r2, [pc, #188]	; (8002eac <HAL_ADC_Start+0x158>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_ADC_Start+0xaa>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2b      	ldr	r2, [pc, #172]	; (8002ea8 <HAL_ADC_Start+0x154>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10d      	bne.n	8002e1a <HAL_ADC_Start+0xc6>
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_ADC_Start+0x158>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	f023 0206 	bic.w	r2, r3, #6
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e32:	e002      	b.n	8002e3a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0202 	mvn.w	r2, #2
 8002e4a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e5a:	d113      	bne.n	8002e84 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e60:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_ADC_Start+0x154>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d105      	bne.n	8002e72 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_ADC_Start+0x158>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	e00c      	b.n	8002e9e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	e003      	b.n	8002e9e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40012800 	.word	0x40012800
 8002eac:	40012400 	.word	0x40012400

08002eb0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ec6:	f7ff fe2d 	bl	8002b24 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0d3      	b.n	800309a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d131      	bne.n	8002f64 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d12a      	bne.n	8002f64 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f0e:	e021      	b.n	8002f54 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f16:	d01d      	beq.n	8002f54 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_ADC_PollForConversion+0x7e>
 8002f1e:	f7ff fe01 	bl	8002b24 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d212      	bcs.n	8002f54 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10b      	bne.n	8002f54 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0a2      	b.n	800309a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0d6      	beq.n	8002f10 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f62:	e070      	b.n	8003046 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f64:	4b4f      	ldr	r3, [pc, #316]	; (80030a4 <HAL_ADC_PollForConversion+0x1f4>)
 8002f66:	681c      	ldr	r4, [r3, #0]
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f001 faa7 	bl	80044bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6919      	ldr	r1, [r3, #16]
 8002f7a:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <HAL_ADC_PollForConversion+0x1f8>)
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d118      	bne.n	8002fb4 <HAL_ADC_PollForConversion+0x104>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68d9      	ldr	r1, [r3, #12]
 8002f88:	4b48      	ldr	r3, [pc, #288]	; (80030ac <HAL_ADC_PollForConversion+0x1fc>)
 8002f8a:	400b      	ands	r3, r1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d111      	bne.n	8002fb4 <HAL_ADC_PollForConversion+0x104>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6919      	ldr	r1, [r3, #16]
 8002f96:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_ADC_PollForConversion+0x200>)
 8002f98:	400b      	ands	r3, r1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_ADC_PollForConversion+0x100>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68d9      	ldr	r1, [r3, #12]
 8002fa4:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_ADC_PollForConversion+0x204>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_PollForConversion+0x100>
 8002fac:	2314      	movs	r3, #20
 8002fae:	e020      	b.n	8002ff2 <HAL_ADC_PollForConversion+0x142>
 8002fb0:	2329      	movs	r3, #41	; 0x29
 8002fb2:	e01e      	b.n	8002ff2 <HAL_ADC_PollForConversion+0x142>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6919      	ldr	r1, [r3, #16]
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_ADC_PollForConversion+0x200>)
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_ADC_PollForConversion+0x120>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68d9      	ldr	r1, [r3, #12]
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <HAL_ADC_PollForConversion+0x204>)
 8002fca:	400b      	ands	r3, r1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <HAL_ADC_PollForConversion+0x13c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6919      	ldr	r1, [r3, #16]
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_ADC_PollForConversion+0x208>)
 8002fd8:	400b      	ands	r3, r1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <HAL_ADC_PollForConversion+0x140>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68d9      	ldr	r1, [r3, #12]
 8002fe4:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_ADC_PollForConversion+0x208>)
 8002fe6:	400b      	ands	r3, r1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_PollForConversion+0x140>
 8002fec:	2354      	movs	r3, #84	; 0x54
 8002fee:	e000      	b.n	8002ff2 <HAL_ADC_PollForConversion+0x142>
 8002ff0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ff8:	e021      	b.n	800303e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003000:	d01a      	beq.n	8003038 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_ADC_PollForConversion+0x168>
 8003008:	f7ff fd8c 	bl	8002b24 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d20f      	bcs.n	8003038 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	429a      	cmp	r2, r3
 800301e:	d90b      	bls.n	8003038 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e030      	b.n	800309a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3301      	adds	r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	429a      	cmp	r2, r3
 8003044:	d8d9      	bhi.n	8002ffa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f06f 0212 	mvn.w	r2, #18
 800304e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003066:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800306a:	d115      	bne.n	8003098 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003070:	2b00      	cmp	r3, #0
 8003072:	d111      	bne.n	8003098 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d105      	bne.n	8003098 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd90      	pop	{r4, r7, pc}
 80030a2:	bf00      	nop
 80030a4:	2000009c 	.word	0x2000009c
 80030a8:	24924924 	.word	0x24924924
 80030ac:	00924924 	.word	0x00924924
 80030b0:	12492492 	.word	0x12492492
 80030b4:	00492492 	.word	0x00492492
 80030b8:	00249249 	.word	0x00249249

080030bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x20>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0dc      	b.n	80032ae <HAL_ADC_ConfigChannel+0x1da>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b06      	cmp	r3, #6
 8003102:	d81c      	bhi.n	800313e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	3b05      	subs	r3, #5
 8003116:	221f      	movs	r2, #31
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	4019      	ands	r1, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	3b05      	subs	r3, #5
 8003130:	fa00 f203 	lsl.w	r2, r0, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	635a      	str	r2, [r3, #52]	; 0x34
 800313c:	e03c      	b.n	80031b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d81c      	bhi.n	8003180 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	3b23      	subs	r3, #35	; 0x23
 8003158:	221f      	movs	r2, #31
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	4019      	ands	r1, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	3b23      	subs	r3, #35	; 0x23
 8003172:	fa00 f203 	lsl.w	r2, r0, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
 800317e:	e01b      	b.n	80031b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	3b41      	subs	r3, #65	; 0x41
 8003192:	221f      	movs	r2, #31
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	4019      	ands	r1, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	3b41      	subs	r3, #65	; 0x41
 80031ac:	fa00 f203 	lsl.w	r2, r0, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d91c      	bls.n	80031fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68d9      	ldr	r1, [r3, #12]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	3b1e      	subs	r3, #30
 80031d2:	2207      	movs	r2, #7
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	4019      	ands	r1, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6898      	ldr	r0, [r3, #8]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	3b1e      	subs	r3, #30
 80031ec:	fa00 f203 	lsl.w	r2, r0, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	e019      	b.n	800322e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6919      	ldr	r1, [r3, #16]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	2207      	movs	r2, #7
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	4019      	ands	r1, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6898      	ldr	r0, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	fa00 f203 	lsl.w	r2, r0, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d003      	beq.n	800323e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800323a:	2b11      	cmp	r3, #17
 800323c:	d132      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d125      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d126      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003264:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b10      	cmp	r3, #16
 800326c:	d11a      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_ADC_ConfigChannel+0x1e8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	0c9a      	lsrs	r2, r3, #18
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003284:	e002      	b.n	800328c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3b01      	subs	r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f9      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x1b2>
 8003292:	e007      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40012400 	.word	0x40012400
 80032bc:	2000009c 	.word	0x2000009c
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d040      	beq.n	8003364 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032f2:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <ADC_Enable+0xac>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <ADC_Enable+0xb0>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	0c9b      	lsrs	r3, r3, #18
 80032fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003300:	e002      	b.n	8003308 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3b01      	subs	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f9      	bne.n	8003302 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800330e:	f7ff fc09 	bl	8002b24 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003314:	e01f      	b.n	8003356 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003316:	f7ff fc05 	bl	8002b24 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d918      	bls.n	8003356 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d011      	beq.n	8003356 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d1d8      	bne.n	8003316 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	2000009c 	.word	0x2000009c
 8003374:	431bde83 	.word	0x431bde83

08003378 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d12e      	bne.n	80033f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033a2:	f7ff fbbf 	bl	8002b24 <HAL_GetTick>
 80033a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033a8:	e01b      	b.n	80033e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033aa:	f7ff fbbb 	bl	8002b24 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d914      	bls.n	80033e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10d      	bne.n	80033e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e007      	b.n	80033f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d0dc      	beq.n	80033aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_ADCEx_Calibration_Start+0x1e>
 8003416:	2302      	movs	r3, #2
 8003418:	e097      	b.n	800354a <HAL_ADCEx_Calibration_Start+0x14e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ffa8 	bl	8003378 <ADC_ConversionStop_Disable>
 8003428:	4603      	mov	r3, r0
 800342a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff49 	bl	80032c4 <ADC_Enable>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 8081 	bne.w	8003540 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003446:	f023 0302 	bic.w	r3, r3, #2
 800344a:	f043 0202 	orr.w	r2, r3, #2
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003452:	4b40      	ldr	r3, [pc, #256]	; (8003554 <HAL_ADCEx_Calibration_Start+0x158>)
 8003454:	681c      	ldr	r4, [r3, #0]
 8003456:	2002      	movs	r0, #2
 8003458:	f001 f830 	bl	80044bc <HAL_RCCEx_GetPeriphCLKFreq>
 800345c:	4603      	mov	r3, r0
 800345e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003462:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003464:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003466:	e002      	b.n	800346e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b01      	subs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f9      	bne.n	8003468 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003484:	f7ff fb4e 	bl	8002b24 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800348a:	e01b      	b.n	80034c4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800348c:	f7ff fb4a 	bl	8002b24 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b0a      	cmp	r3, #10
 8003498:	d914      	bls.n	80034c4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	f023 0312 	bic.w	r3, r3, #18
 80034b0:	f043 0210 	orr.w	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e042      	b.n	800354a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1dc      	bne.n	800348c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0204 	orr.w	r2, r2, #4
 80034e0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034e2:	f7ff fb1f 	bl	8002b24 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034e8:	e01b      	b.n	8003522 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034ea:	f7ff fb1b 	bl	8002b24 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b0a      	cmp	r3, #10
 80034f6:	d914      	bls.n	8003522 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f023 0312 	bic.w	r3, r3, #18
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e013      	b.n	800354a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1dc      	bne.n	80034ea <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	f023 0303 	bic.w	r3, r3, #3
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003548:	7dfb      	ldrb	r3, [r7, #23]
}
 800354a:	4618      	mov	r0, r3
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	bf00      	nop
 8003554:	2000009c 	.word	0x2000009c

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4906      	ldr	r1, [pc, #24]	; (80035f0 <__NVIC_EnableIRQ+0x34>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	db0a      	blt.n	800361e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	490c      	ldr	r1, [pc, #48]	; (8003640 <__NVIC_SetPriority+0x4c>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	440b      	add	r3, r1
 8003618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800361c:	e00a      	b.n	8003634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4908      	ldr	r1, [pc, #32]	; (8003644 <__NVIC_SetPriority+0x50>)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3b04      	subs	r3, #4
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	440b      	add	r3, r1
 8003632:	761a      	strb	r2, [r3, #24]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e100 	.word	0xe000e100
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f1c3 0307 	rsb	r3, r3, #7
 8003662:	2b04      	cmp	r3, #4
 8003664:	bf28      	it	cs
 8003666:	2304      	movcs	r3, #4
 8003668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3304      	adds	r3, #4
 800366e:	2b06      	cmp	r3, #6
 8003670:	d902      	bls.n	8003678 <NVIC_EncodePriority+0x30>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3b03      	subs	r3, #3
 8003676:	e000      	b.n	800367a <NVIC_EncodePriority+0x32>
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43d9      	mvns	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	4313      	orrs	r3, r2
         );
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <SysTick_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ca:	210f      	movs	r1, #15
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d0:	f7ff ff90 	bl	80035f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <SysTick_Config+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SysTick_Config+0x40>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff2d 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003718:	f7ff ff42 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 800371c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7ff ff90 	bl	8003648 <NVIC_EncodePriority>
 8003728:	4602      	mov	r2, r0
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff5f 	bl	80035f4 <__NVIC_SetPriority>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff35 	bl	80035bc <__NVIC_EnableIRQ>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffa2 	bl	80036ac <SysTick_Config>
 8003768:	4603      	mov	r3, r0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003774:	b480      	push	{r7}
 8003776:	b08b      	sub	sp, #44	; 0x2c
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003786:	e179      	b.n	8003a7c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003788:	2201      	movs	r2, #1
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	f040 8168 	bne.w	8003a76 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4a96      	ldr	r2, [pc, #600]	; (8003a04 <HAL_GPIO_Init+0x290>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d05e      	beq.n	800386e <HAL_GPIO_Init+0xfa>
 80037b0:	4a94      	ldr	r2, [pc, #592]	; (8003a04 <HAL_GPIO_Init+0x290>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d875      	bhi.n	80038a2 <HAL_GPIO_Init+0x12e>
 80037b6:	4a94      	ldr	r2, [pc, #592]	; (8003a08 <HAL_GPIO_Init+0x294>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d058      	beq.n	800386e <HAL_GPIO_Init+0xfa>
 80037bc:	4a92      	ldr	r2, [pc, #584]	; (8003a08 <HAL_GPIO_Init+0x294>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d86f      	bhi.n	80038a2 <HAL_GPIO_Init+0x12e>
 80037c2:	4a92      	ldr	r2, [pc, #584]	; (8003a0c <HAL_GPIO_Init+0x298>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d052      	beq.n	800386e <HAL_GPIO_Init+0xfa>
 80037c8:	4a90      	ldr	r2, [pc, #576]	; (8003a0c <HAL_GPIO_Init+0x298>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d869      	bhi.n	80038a2 <HAL_GPIO_Init+0x12e>
 80037ce:	4a90      	ldr	r2, [pc, #576]	; (8003a10 <HAL_GPIO_Init+0x29c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d04c      	beq.n	800386e <HAL_GPIO_Init+0xfa>
 80037d4:	4a8e      	ldr	r2, [pc, #568]	; (8003a10 <HAL_GPIO_Init+0x29c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d863      	bhi.n	80038a2 <HAL_GPIO_Init+0x12e>
 80037da:	4a8e      	ldr	r2, [pc, #568]	; (8003a14 <HAL_GPIO_Init+0x2a0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d046      	beq.n	800386e <HAL_GPIO_Init+0xfa>
 80037e0:	4a8c      	ldr	r2, [pc, #560]	; (8003a14 <HAL_GPIO_Init+0x2a0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d85d      	bhi.n	80038a2 <HAL_GPIO_Init+0x12e>
 80037e6:	2b12      	cmp	r3, #18
 80037e8:	d82a      	bhi.n	8003840 <HAL_GPIO_Init+0xcc>
 80037ea:	2b12      	cmp	r3, #18
 80037ec:	d859      	bhi.n	80038a2 <HAL_GPIO_Init+0x12e>
 80037ee:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <HAL_GPIO_Init+0x80>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	0800386f 	.word	0x0800386f
 80037f8:	08003849 	.word	0x08003849
 80037fc:	0800385b 	.word	0x0800385b
 8003800:	0800389d 	.word	0x0800389d
 8003804:	080038a3 	.word	0x080038a3
 8003808:	080038a3 	.word	0x080038a3
 800380c:	080038a3 	.word	0x080038a3
 8003810:	080038a3 	.word	0x080038a3
 8003814:	080038a3 	.word	0x080038a3
 8003818:	080038a3 	.word	0x080038a3
 800381c:	080038a3 	.word	0x080038a3
 8003820:	080038a3 	.word	0x080038a3
 8003824:	080038a3 	.word	0x080038a3
 8003828:	080038a3 	.word	0x080038a3
 800382c:	080038a3 	.word	0x080038a3
 8003830:	080038a3 	.word	0x080038a3
 8003834:	080038a3 	.word	0x080038a3
 8003838:	08003851 	.word	0x08003851
 800383c:	08003865 	.word	0x08003865
 8003840:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_GPIO_Init+0x2a4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003846:	e02c      	b.n	80038a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	623b      	str	r3, [r7, #32]
          break;
 800384e:	e029      	b.n	80038a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	3304      	adds	r3, #4
 8003856:	623b      	str	r3, [r7, #32]
          break;
 8003858:	e024      	b.n	80038a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	3308      	adds	r3, #8
 8003860:	623b      	str	r3, [r7, #32]
          break;
 8003862:	e01f      	b.n	80038a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	330c      	adds	r3, #12
 800386a:	623b      	str	r3, [r7, #32]
          break;
 800386c:	e01a      	b.n	80038a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003876:	2304      	movs	r3, #4
 8003878:	623b      	str	r3, [r7, #32]
          break;
 800387a:	e013      	b.n	80038a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003884:	2308      	movs	r3, #8
 8003886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	611a      	str	r2, [r3, #16]
          break;
 800388e:	e009      	b.n	80038a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003890:	2308      	movs	r3, #8
 8003892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	615a      	str	r2, [r3, #20]
          break;
 800389a:	e003      	b.n	80038a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800389c:	2300      	movs	r3, #0
 800389e:	623b      	str	r3, [r7, #32]
          break;
 80038a0:	e000      	b.n	80038a4 <HAL_GPIO_Init+0x130>
          break;
 80038a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2bff      	cmp	r3, #255	; 0xff
 80038a8:	d801      	bhi.n	80038ae <HAL_GPIO_Init+0x13a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	e001      	b.n	80038b2 <HAL_GPIO_Init+0x13e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2bff      	cmp	r3, #255	; 0xff
 80038b8:	d802      	bhi.n	80038c0 <HAL_GPIO_Init+0x14c>
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	e002      	b.n	80038c6 <HAL_GPIO_Init+0x152>
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	3b08      	subs	r3, #8
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	210f      	movs	r1, #15
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	401a      	ands	r2, r3
 80038d8:	6a39      	ldr	r1, [r7, #32]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	431a      	orrs	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80c1 	beq.w	8003a76 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038f4:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <HAL_GPIO_Init+0x2a8>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4a48      	ldr	r2, [pc, #288]	; (8003a1c <HAL_GPIO_Init+0x2a8>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6193      	str	r3, [r2, #24]
 8003900:	4b46      	ldr	r3, [pc, #280]	; (8003a1c <HAL_GPIO_Init+0x2a8>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800390c:	4a44      	ldr	r2, [pc, #272]	; (8003a20 <HAL_GPIO_Init+0x2ac>)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003918:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	220f      	movs	r2, #15
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3c      	ldr	r2, [pc, #240]	; (8003a24 <HAL_GPIO_Init+0x2b0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01f      	beq.n	8003978 <HAL_GPIO_Init+0x204>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <HAL_GPIO_Init+0x2b4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d019      	beq.n	8003974 <HAL_GPIO_Init+0x200>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3a      	ldr	r2, [pc, #232]	; (8003a2c <HAL_GPIO_Init+0x2b8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_GPIO_Init+0x1fc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a39      	ldr	r2, [pc, #228]	; (8003a30 <HAL_GPIO_Init+0x2bc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00d      	beq.n	800396c <HAL_GPIO_Init+0x1f8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a38      	ldr	r2, [pc, #224]	; (8003a34 <HAL_GPIO_Init+0x2c0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <HAL_GPIO_Init+0x1f4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a37      	ldr	r2, [pc, #220]	; (8003a38 <HAL_GPIO_Init+0x2c4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_GPIO_Init+0x1f0>
 8003960:	2305      	movs	r3, #5
 8003962:	e00a      	b.n	800397a <HAL_GPIO_Init+0x206>
 8003964:	2306      	movs	r3, #6
 8003966:	e008      	b.n	800397a <HAL_GPIO_Init+0x206>
 8003968:	2304      	movs	r3, #4
 800396a:	e006      	b.n	800397a <HAL_GPIO_Init+0x206>
 800396c:	2303      	movs	r3, #3
 800396e:	e004      	b.n	800397a <HAL_GPIO_Init+0x206>
 8003970:	2302      	movs	r3, #2
 8003972:	e002      	b.n	800397a <HAL_GPIO_Init+0x206>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_GPIO_Init+0x206>
 8003978:	2300      	movs	r3, #0
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	f002 0203 	and.w	r2, r2, #3
 8003980:	0092      	lsls	r2, r2, #2
 8003982:	4093      	lsls	r3, r2
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800398a:	4925      	ldr	r1, [pc, #148]	; (8003a20 <HAL_GPIO_Init+0x2ac>)
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	4924      	ldr	r1, [pc, #144]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	4920      	ldr	r1, [pc, #128]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039bc:	4013      	ands	r3, r2
 80039be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	491a      	ldr	r1, [pc, #104]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60cb      	str	r3, [r1, #12]
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d025      	beq.n	8003a40 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4910      	ldr	r1, [pc, #64]	; (8003a3c <HAL_GPIO_Init+0x2c8>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	e025      	b.n	8003a4e <HAL_GPIO_Init+0x2da>
 8003a02:	bf00      	nop
 8003a04:	10320000 	.word	0x10320000
 8003a08:	10310000 	.word	0x10310000
 8003a0c:	10220000 	.word	0x10220000
 8003a10:	10210000 	.word	0x10210000
 8003a14:	10120000 	.word	0x10120000
 8003a18:	10110000 	.word	0x10110000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010800 	.word	0x40010800
 8003a28:	40010c00 	.word	0x40010c00
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40011400 	.word	0x40011400
 8003a34:	40011800 	.word	0x40011800
 8003a38:	40011c00 	.word	0x40011c00
 8003a3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a40:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <HAL_GPIO_Init+0x324>)
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	4913      	ldr	r1, [pc, #76]	; (8003a98 <HAL_GPIO_Init+0x324>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_GPIO_Init+0x324>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	490e      	ldr	r1, [pc, #56]	; (8003a98 <HAL_GPIO_Init+0x324>)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
 8003a66:	e006      	b.n	8003a76 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_GPIO_Init+0x324>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	4909      	ldr	r1, [pc, #36]	; (8003a98 <HAL_GPIO_Init+0x324>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	3301      	adds	r3, #1
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f47f ae7e 	bne.w	8003788 <HAL_GPIO_Init+0x14>
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	372c      	adds	r7, #44	; 0x2c
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	40010400 	.word	0x40010400

08003a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e001      	b.n	8003abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	807b      	strh	r3, [r7, #2]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ada:	787b      	ldrb	r3, [r7, #1]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ae0:	887a      	ldrh	r2, [r7, #2]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ae6:	e003      	b.n	8003af0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	041a      	lsls	r2, r3, #16
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	611a      	str	r2, [r3, #16]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b12:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f806 	bl	8003b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40010400 	.word	0x40010400

08003b2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	420e0020 	.word	0x420e0020

08003b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e272      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8087 	beq.w	8003c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b78:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d00c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b84:	4b8f      	ldr	r3, [pc, #572]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d112      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5e>
 8003b90:	4b8c      	ldr	r3, [pc, #560]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9e:	4b89      	ldr	r3, [pc, #548]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d06c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x12c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d168      	bne.n	8003c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e24c      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x76>
 8003bc0:	4b80      	ldr	r3, [pc, #512]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a7f      	ldr	r2, [pc, #508]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e02e      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x98>
 8003bd6:	4b7b      	ldr	r3, [pc, #492]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a7a      	ldr	r2, [pc, #488]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b78      	ldr	r3, [pc, #480]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a77      	ldr	r2, [pc, #476]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0xbc>
 8003bfa:	4b72      	ldr	r3, [pc, #456]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a71      	ldr	r2, [pc, #452]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003c14:	4b6b      	ldr	r3, [pc, #428]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a6a      	ldr	r2, [pc, #424]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b68      	ldr	r3, [pc, #416]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a67      	ldr	r2, [pc, #412]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fe ff76 	bl	8002b24 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fe ff72 	bl	8002b24 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e200      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xe4>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fe ff62 	bl	8002b24 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fe ff5e 	bl	8002b24 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1ec      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x10c>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c92:	4b4c      	ldr	r3, [pc, #304]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c9e:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d11c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x18c>
 8003caa:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x176>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1c0      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4939      	ldr	r1, [pc, #228]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	e03a      	b.n	8003d5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cec:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7fe ff17 	bl	8002b24 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fe ff13 	bl	8002b24 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e1a1      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4927      	ldr	r1, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <HAL_RCC_OscConfig+0x270>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fe fef6 	bl	8002b24 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7fe fef2 	bl	8002b24 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e180      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d03a      	beq.n	8003ddc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d019      	beq.n	8003da2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d74:	f7fe fed6 	bl	8002b24 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fe fed2 	bl	8002b24 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e160      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	f000 faba 	bl	8004314 <RCC_Delay>
 8003da0:	e01c      	b.n	8003ddc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_RCC_OscConfig+0x274>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da8:	f7fe febc 	bl	8002b24 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dae:	e00f      	b.n	8003dd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fe feb8 	bl	8002b24 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d908      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e146      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	42420000 	.word	0x42420000
 8003dcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	4b92      	ldr	r3, [pc, #584]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e9      	bne.n	8003db0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a6 	beq.w	8003f36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dee:	4b8b      	ldr	r3, [pc, #556]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	4b88      	ldr	r3, [pc, #544]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4a87      	ldr	r2, [pc, #540]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	61d3      	str	r3, [r2, #28]
 8003e06:	4b85      	ldr	r3, [pc, #532]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b82      	ldr	r3, [pc, #520]	; (8004020 <HAL_RCC_OscConfig+0x4c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d118      	bne.n	8003e54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e22:	4b7f      	ldr	r3, [pc, #508]	; (8004020 <HAL_RCC_OscConfig+0x4c8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a7e      	ldr	r2, [pc, #504]	; (8004020 <HAL_RCC_OscConfig+0x4c8>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe fe79 	bl	8002b24 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fe fe75 	bl	8002b24 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b64      	cmp	r3, #100	; 0x64
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e103      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	4b75      	ldr	r3, [pc, #468]	; (8004020 <HAL_RCC_OscConfig+0x4c8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x312>
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4a6e      	ldr	r2, [pc, #440]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6213      	str	r3, [r2, #32]
 8003e68:	e02d      	b.n	8003ec6 <HAL_RCC_OscConfig+0x36e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x334>
 8003e72:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	4a69      	ldr	r2, [pc, #420]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6213      	str	r3, [r2, #32]
 8003e7e:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4a66      	ldr	r2, [pc, #408]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6213      	str	r3, [r2, #32]
 8003e8a:	e01c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x36e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x356>
 8003e94:	4b61      	ldr	r3, [pc, #388]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4a60      	ldr	r2, [pc, #384]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6213      	str	r3, [r2, #32]
 8003ea0:	4b5e      	ldr	r3, [pc, #376]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a5d      	ldr	r2, [pc, #372]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6213      	str	r3, [r2, #32]
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x36e>
 8003eae:	4b5b      	ldr	r3, [pc, #364]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a5a      	ldr	r2, [pc, #360]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6213      	str	r3, [r2, #32]
 8003eba:	4b58      	ldr	r3, [pc, #352]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a57      	ldr	r2, [pc, #348]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fe fe29 	bl	8002b24 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fe fe25 	bl	8002b24 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0b1      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ee      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x37e>
 8003ef8:	e014      	b.n	8003f24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efa:	f7fe fe13 	bl	8002b24 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fe fe0f 	bl	8002b24 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e09b      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f18:	4b40      	ldr	r3, [pc, #256]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b3c      	ldr	r3, [pc, #240]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4a3b      	ldr	r2, [pc, #236]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8087 	beq.w	800404e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f40:	4b36      	ldr	r3, [pc, #216]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d061      	beq.n	8004010 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d146      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f54:	4b33      	ldr	r3, [pc, #204]	; (8004024 <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fde3 	bl	8002b24 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fe fddf 	bl	8002b24 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e06d      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f74:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f88:	d108      	bne.n	8003f9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	4921      	ldr	r1, [pc, #132]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9c:	4b1f      	ldr	r3, [pc, #124]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a19      	ldr	r1, [r3, #32]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	430b      	orrs	r3, r1
 8003fae:	491b      	ldr	r1, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fe fdb3 	bl	8002b24 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fe fdaf 	bl	8002b24 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e03d      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x46a>
 8003fe0:	e035      	b.n	800404e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <HAL_RCC_OscConfig+0x4cc>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fd9c 	bl	8002b24 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe fd98 	bl	8002b24 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e026      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_OscConfig+0x4c4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x498>
 800400e:	e01e      	b.n	800404e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e019      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
 800401c:	40021000 	.word	0x40021000
 8004020:	40007000 	.word	0x40007000
 8004024:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x500>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	429a      	cmp	r2, r3
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000

0800405c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0d0      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d910      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b67      	ldr	r3, [pc, #412]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	4965      	ldr	r1, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d040      	beq.n	800417c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d115      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e073      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06b      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b39      	ldr	r3, [pc, #228]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4936      	ldr	r1, [pc, #216]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800414c:	f7fe fcea 	bl	8002b24 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fe fce6 	bl	8002b24 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e053      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b27      	ldr	r3, [pc, #156]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d210      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 0207 	bic.w	r2, r3, #7
 8004192:	4922      	ldr	r1, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1cc>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1d0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fc48 	bl	8002aa0 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40022000 	.word	0x40022000
 8004220:	40021000 	.word	0x40021000
 8004224:	08009898 	.word	0x08009898
 8004228:	2000009c 	.word	0x2000009c
 800422c:	200000a0 	.word	0x200000a0

08004230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800424a:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b04      	cmp	r3, #4
 8004258:	d002      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x30>
 800425a:	2b08      	cmp	r3, #8
 800425c:	d003      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0x36>
 800425e:	e027      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004262:	613b      	str	r3, [r7, #16]
      break;
 8004264:	e027      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	0c9b      	lsrs	r3, r3, #18
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004270:	5cd3      	ldrb	r3, [r2, r3]
 8004272:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	0c5b      	lsrs	r3, r3, #17
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800428a:	5cd3      	ldrb	r3, [r2, r3]
 800428c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004292:	fb03 f202 	mul.w	r2, r3, r2
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e004      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042a4:	fb02 f303 	mul.w	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	613b      	str	r3, [r7, #16]
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80042b2:	613b      	str	r3, [r7, #16]
      break;
 80042b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b6:	693b      	ldr	r3, [r7, #16]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000
 80042c8:	007a1200 	.word	0x007a1200
 80042cc:	080098b0 	.word	0x080098b0
 80042d0:	080098c0 	.word	0x080098c0
 80042d4:	003d0900 	.word	0x003d0900

080042d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b02      	ldr	r3, [pc, #8]	; (80042e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	2000009c 	.word	0x2000009c

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f0:	f7ff fff2 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetPCLK2Freq+0x20>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	0adb      	lsrs	r3, r3, #11
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000
 8004310:	080098a8 	.word	0x080098a8

08004314 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <RCC_Delay+0x34>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0a      	ldr	r2, [pc, #40]	; (800434c <RCC_Delay+0x38>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0a5b      	lsrs	r3, r3, #9
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004330:	bf00      	nop
  }
  while (Delay --);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1e5a      	subs	r2, r3, #1
 8004336:	60fa      	str	r2, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f9      	bne.n	8004330 <RCC_Delay+0x1c>
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	2000009c 	.word	0x2000009c
 800434c:	10624dd3 	.word	0x10624dd3

08004350 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d07d      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800436c:	2300      	movs	r3, #0
 800436e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004370:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10d      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	4a4b      	ldr	r2, [pc, #300]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	61d3      	str	r3, [r2, #28]
 8004388:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004394:	2301      	movs	r3, #1
 8004396:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004398:	4b46      	ldr	r3, [pc, #280]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d118      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043a4:	4b43      	ldr	r3, [pc, #268]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a42      	ldr	r2, [pc, #264]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b0:	f7fe fbb8 	bl	8002b24 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	e008      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fe fbb4 	bl	8002b24 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	; 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e06d      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ca:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d02e      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d027      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043f4:	4b2e      	ldr	r3, [pc, #184]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043fe:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004404:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800440a:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d014      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441a:	f7fe fb83 	bl	8002b24 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fe fb7f 	bl	8002b24 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e036      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004444:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4917      	ldr	r1, [pc, #92]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004452:	4313      	orrs	r3, r2
 8004454:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004466:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	490b      	ldr	r1, [pc, #44]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004492:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	4904      	ldr	r1, [pc, #16]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
 80044b8:	42420440 	.word	0x42420440

080044bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3b01      	subs	r3, #1
 80044dc:	2b0f      	cmp	r3, #15
 80044de:	f200 80af 	bhi.w	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	080045bf 	.word	0x080045bf
 80044ec:	08004625 	.word	0x08004625
 80044f0:	08004641 	.word	0x08004641
 80044f4:	080045af 	.word	0x080045af
 80044f8:	08004641 	.word	0x08004641
 80044fc:	08004641 	.word	0x08004641
 8004500:	08004641 	.word	0x08004641
 8004504:	080045b7 	.word	0x080045b7
 8004508:	08004641 	.word	0x08004641
 800450c:	08004641 	.word	0x08004641
 8004510:	08004641 	.word	0x08004641
 8004514:	08004641 	.word	0x08004641
 8004518:	08004641 	.word	0x08004641
 800451c:	08004641 	.word	0x08004641
 8004520:	08004641 	.word	0x08004641
 8004524:	08004529 	.word	0x08004529
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004528:	4b4a      	ldr	r3, [pc, #296]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800452e:	4b49      	ldr	r3, [pc, #292]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8084 	beq.w	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	0c9b      	lsrs	r3, r3, #18
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	4a44      	ldr	r2, [pc, #272]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8004546:	5cd3      	ldrb	r3, [r2, r3]
 8004548:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004554:	4b3f      	ldr	r3, [pc, #252]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	0c5b      	lsrs	r3, r3, #17
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	4a3f      	ldr	r2, [pc, #252]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004560:	5cd3      	ldrb	r3, [r2, r3]
 8004562:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800456e:	4a3c      	ldr	r2, [pc, #240]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fbb2 f2f3 	udiv	r2, r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	e004      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4a38      	ldr	r2, [pc, #224]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800458a:	4b32      	ldr	r3, [pc, #200]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004596:	d102      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800459c:	e052      	b.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4a31      	ldr	r2, [pc, #196]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	61bb      	str	r3, [r7, #24]
      break;
 80045ac:	e04a      	b.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80045ae:	f7ff fe3f 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80045b2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80045b4:	e049      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80045b6:	f7ff fe3b 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80045ba:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80045bc:	e045      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80045be:	4b25      	ldr	r3, [pc, #148]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d108      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	e01f      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d109      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80045ee:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80045fa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	e00f      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460c:	d11c      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d016      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800461a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800461e:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004620:	e012      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8004622:	e011      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004624:	f7ff fe62 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	0b9b      	lsrs	r3, r3, #14
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	3301      	adds	r3, #1
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	61bb      	str	r3, [r7, #24]
      break;
 800463e:	e004      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8004640:	bf00      	nop
 8004642:	e002      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004644:	bf00      	nop
 8004646:	e000      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004648:	bf00      	nop
    }
  }
  return (frequency);
 800464a:	69bb      	ldr	r3, [r7, #24]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	080098c4 	.word	0x080098c4
 800465c:	080098d4 	.word	0x080098d4
 8004660:	007a1200 	.word	0x007a1200
 8004664:	003d0900 	.word	0x003d0900
 8004668:	aaaaaaab 	.word	0xaaaaaaab

0800466c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e07a      	b.n	8004778 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7c5b      	ldrb	r3, [r3, #17]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd ff9c 	bl	80025d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fc42 	bl	8004f28 <HAL_RTC_WaitForSynchro>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d004      	beq.n	80046b4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2204      	movs	r2, #4
 80046ae:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e061      	b.n	8004778 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fcfb 	bl	80050b0 <RTC_EnterInitMode>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2204      	movs	r2, #4
 80046c4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e056      	b.n	8004778 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0207 	bic.w	r2, r2, #7
 80046d8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80046e2:	4b27      	ldr	r3, [pc, #156]	; (8004780 <HAL_RTC_Init+0x114>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	4a26      	ldr	r2, [pc, #152]	; (8004780 <HAL_RTC_Init+0x114>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <HAL_RTC_Init+0x114>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	4921      	ldr	r1, [pc, #132]	; (8004780 <HAL_RTC_Init+0x114>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004708:	d003      	beq.n	8004712 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e00e      	b.n	8004730 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004712:	2001      	movs	r0, #1
 8004714:	f7ff fed2 	bl	80044bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004718:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2204      	movs	r2, #4
 8004724:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e026      	b.n	8004778 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3b01      	subs	r3, #1
 800472e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	0c1a      	lsrs	r2, r3, #16
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f002 020f 	and.w	r2, r2, #15
 800473c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	b292      	uxth	r2, r2
 8004746:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fcd9 	bl	8005100 <RTC_ExitInitMode>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2204      	movs	r2, #4
 8004758:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e00c      	b.n	8004778 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004776:	2300      	movs	r3, #0
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40006c00 	.word	0x40006c00

08004784 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_RTC_SetTime+0x20>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e080      	b.n	80048aa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	7c1b      	ldrb	r3, [r3, #16]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_RTC_SetTime+0x30>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e07a      	b.n	80048aa <HAL_RTC_SetTime+0x126>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2202      	movs	r2, #2
 80047be:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d113      	bne.n	80047ee <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80047d0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	4619      	mov	r1, r3
 80047da:	460b      	mov	r3, r1
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a5b      	subs	r3, r3, r1
 80047e0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047e2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047e8:	4413      	add	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e01e      	b.n	800482c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fcc9 	bl	800518a <RTC_Bcd2ToByte>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004800:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fcbe 	bl	800518a <RTC_Bcd2ToByte>
 800480e:	4603      	mov	r3, r0
 8004810:	461a      	mov	r2, r3
 8004812:	4613      	mov	r3, r2
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800481a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	789b      	ldrb	r3, [r3, #2]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fcb2 	bl	800518a <RTC_Bcd2ToByte>
 8004826:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004828:	4423      	add	r3, r4
 800482a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800482c:	6979      	ldr	r1, [r7, #20]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fbd7 	bl	8004fe2 <RTC_WriteTimeCounter>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2204      	movs	r2, #4
 800483e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e02f      	b.n	80048aa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0205 	bic.w	r2, r2, #5
 8004858:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fbe8 	bl	8005030 <RTC_ReadAlarmCounter>
 8004860:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004868:	d018      	beq.n	800489c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	429a      	cmp	r2, r3
 8004870:	d214      	bcs.n	800489c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004878:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800487c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800487e:	6939      	ldr	r1, [r7, #16]
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fbee 	bl	8005062 <RTC_WriteAlarmCounter>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2204      	movs	r2, #4
 8004890:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e006      	b.n	80048aa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd90      	pop	{r4, r7, pc}
	...

080048b4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_RTC_GetTime+0x28>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0b5      	b.n	8004a4c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e0ac      	b.n	8004a4c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fb45 	bl	8004f82 <RTC_ReadTimeCounter>
 80048f8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	4a55      	ldr	r2, [pc, #340]	; (8004a54 <HAL_RTC_GetTime+0x1a0>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0adb      	lsrs	r3, r3, #11
 8004904:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4b52      	ldr	r3, [pc, #328]	; (8004a54 <HAL_RTC_GetTime+0x1a0>)
 800490a:	fba3 1302 	umull	r1, r3, r3, r2
 800490e:	0adb      	lsrs	r3, r3, #11
 8004910:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	4a4f      	ldr	r2, [pc, #316]	; (8004a58 <HAL_RTC_GetTime+0x1a4>)
 800491c:	fba2 2303 	umull	r2, r3, r2, r3
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	b2da      	uxtb	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	4a4a      	ldr	r2, [pc, #296]	; (8004a54 <HAL_RTC_GetTime+0x1a0>)
 800492c:	fba2 1203 	umull	r1, r2, r2, r3
 8004930:	0ad2      	lsrs	r2, r2, #11
 8004932:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004936:	fb01 f202 	mul.w	r2, r1, r2
 800493a:	1a9a      	subs	r2, r3, r2
 800493c:	4b46      	ldr	r3, [pc, #280]	; (8004a58 <HAL_RTC_GetTime+0x1a4>)
 800493e:	fba3 1302 	umull	r1, r3, r3, r2
 8004942:	0959      	lsrs	r1, r3, #5
 8004944:	460b      	mov	r3, r1
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a5b      	subs	r3, r3, r1
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	1ad1      	subs	r1, r2, r3
 800494e:	b2ca      	uxtb	r2, r1
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b17      	cmp	r3, #23
 8004958:	d955      	bls.n	8004a06 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4a3f      	ldr	r2, [pc, #252]	; (8004a5c <HAL_RTC_GetTime+0x1a8>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004966:	6939      	ldr	r1, [r7, #16]
 8004968:	4b3c      	ldr	r3, [pc, #240]	; (8004a5c <HAL_RTC_GetTime+0x1a8>)
 800496a:	fba3 2301 	umull	r2, r3, r3, r1
 800496e:	091a      	lsrs	r2, r3, #4
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	1aca      	subs	r2, r1, r3
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fb55 	bl	8005030 <RTC_ReadAlarmCounter>
 8004986:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800498e:	d008      	beq.n	80049a2 <HAL_RTC_GetTime+0xee>
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	429a      	cmp	r2, r3
 8004996:	d904      	bls.n	80049a2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	e002      	b.n	80049a8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049a6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <HAL_RTC_GetTime+0x1ac>)
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80049b6:	69b9      	ldr	r1, [r7, #24]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fb12 	bl	8004fe2 <RTC_WriteTimeCounter>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e041      	b.n	8004a4c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ce:	d00c      	beq.n	80049ea <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4413      	add	r3, r2
 80049d6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049d8:	69f9      	ldr	r1, [r7, #28]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fb41 	bl	8005062 <RTC_WriteAlarmCounter>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e030      	b.n	8004a4c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049ea:	69f9      	ldr	r1, [r7, #28]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fb38 	bl	8005062 <RTC_WriteAlarmCounter>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e027      	b.n	8004a4c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80049fc:	6979      	ldr	r1, [r7, #20]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fbe0 	bl	80051c4 <RTC_DateUpdate>
 8004a04:	e003      	b.n	8004a0e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01a      	beq.n	8004a4a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fb99 	bl	8005150 <RTC_ByteToBcd2>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	461a      	mov	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fb90 	bl	8005150 <RTC_ByteToBcd2>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461a      	mov	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	789b      	ldrb	r3, [r3, #2]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fb87 	bl	8005150 <RTC_ByteToBcd2>
 8004a42:	4603      	mov	r3, r0
 8004a44:	461a      	mov	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	91a2b3c5 	.word	0x91a2b3c5
 8004a58:	88888889 	.word	0x88888889
 8004a5c:	aaaaaaab 	.word	0xaaaaaaab
 8004a60:	00015180 	.word	0x00015180

08004a64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_RTC_SetDate+0x24>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e097      	b.n	8004bbc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	7c1b      	ldrb	r3, [r3, #16]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_RTC_SetDate+0x34>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e091      	b.n	8004bbc <HAL_RTC_SetDate+0x158>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	78da      	ldrb	r2, [r3, #3]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	785a      	ldrb	r2, [r3, #1]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	789a      	ldrb	r2, [r3, #2]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	739a      	strb	r2, [r3, #14]
 8004ac2:	e01a      	b.n	8004afa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fb5e 	bl	800518a <RTC_Bcd2ToByte>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fb55 	bl	800518a <RTC_Bcd2ToByte>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	789b      	ldrb	r3, [r3, #2]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fb4c 	bl	800518a <RTC_Bcd2ToByte>
 8004af2:	4603      	mov	r3, r0
 8004af4:	461a      	mov	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	7bdb      	ldrb	r3, [r3, #15]
 8004afe:	4618      	mov	r0, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	7b59      	ldrb	r1, [r3, #13]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	7b9b      	ldrb	r3, [r3, #14]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f000 fc37 	bl	800537c <RTC_WeekDayNum>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461a      	mov	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	7b1a      	ldrb	r2, [r3, #12]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fa2f 	bl	8004f82 <RTC_ReadTimeCounter>
 8004b24:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <HAL_RTC_SetDate+0x160>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	0adb      	lsrs	r3, r3, #11
 8004b30:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b18      	cmp	r3, #24
 8004b36:	d93a      	bls.n	8004bae <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4a23      	ldr	r2, [pc, #140]	; (8004bc8 <HAL_RTC_SetDate+0x164>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <HAL_RTC_SetDate+0x168>)
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b4e:	69f9      	ldr	r1, [r7, #28]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa46 	bl	8004fe2 <RTC_WriteTimeCounter>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e027      	b.n	8004bbc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fa5f 	bl	8005030 <RTC_ReadAlarmCounter>
 8004b72:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b7a:	d018      	beq.n	8004bae <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d214      	bcs.n	8004bae <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004b8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b8e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fa65 	bl	8005062 <RTC_WriteAlarmCounter>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e006      	b.n	8004bbc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	91a2b3c5 	.word	0x91a2b3c5
 8004bc8:	aaaaaaab 	.word	0xaaaaaaab
 8004bcc:	00015180 	.word	0x00015180

08004bd0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	2100      	movs	r1, #0
 8004be2:	460a      	mov	r2, r1
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	460a      	mov	r2, r1
 8004be8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_RTC_GetDate+0x26>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e03a      	b.n	8004c70 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	2200      	movs	r2, #0
 8004c00:	4619      	mov	r1, r3
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7ff fe56 	bl	80048b4 <HAL_RTC_GetTime>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e02e      	b.n	8004c70 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	7b1a      	ldrb	r2, [r3, #12]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	7bda      	ldrb	r2, [r3, #15]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	7b5a      	ldrb	r2, [r3, #13]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	7b9a      	ldrb	r2, [r3, #14]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01a      	beq.n	8004c6e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	78db      	ldrb	r3, [r3, #3]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fa87 	bl	8005150 <RTC_ByteToBcd2>
 8004c42:	4603      	mov	r3, r0
 8004c44:	461a      	mov	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fa7e 	bl	8005150 <RTC_ByteToBcd2>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	789b      	ldrb	r3, [r3, #2]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fa75 	bl	8005150 <RTC_ByteToBcd2>
 8004c66:	4603      	mov	r3, r0
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b089      	sub	sp, #36	; 0x24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	460a      	mov	r2, r1
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	460a      	mov	r2, r1
 8004c94:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_RTC_SetAlarm_IT+0x2a>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e099      	b.n	8004dda <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	7c1b      	ldrb	r3, [r3, #16]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_RTC_SetAlarm_IT+0x3a>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e093      	b.n	8004dda <HAL_RTC_SetAlarm_IT+0x162>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004cbe:	f107 0314 	add.w	r3, r7, #20
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff fdf4 	bl	80048b4 <HAL_RTC_GetTime>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e081      	b.n	8004dda <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004cd6:	7d3b      	ldrb	r3, [r7, #20]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004cde:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004ce2:	7d7b      	ldrb	r3, [r7, #21]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a5b      	subs	r3, r3, r1
 8004cec:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004cee:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004cf0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004cf2:	4413      	add	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d113      	bne.n	8004d24 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004d06:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	460b      	mov	r3, r1
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a5b      	subs	r3, r3, r1
 8004d16:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004d18:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004d1e:	4413      	add	r3, r2
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e01e      	b.n	8004d62 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fa2e 	bl	800518a <RTC_Bcd2ToByte>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004d36:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fa23 	bl	800518a <RTC_Bcd2ToByte>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	4613      	mov	r3, r2
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004d50:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	789b      	ldrb	r3, [r3, #2]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fa17 	bl	800518a <RTC_Bcd2ToByte>
 8004d5c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004d5e:	4423      	add	r3, r4
 8004d60:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d205      	bcs.n	8004d76 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004d70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004d74:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004d76:	69f9      	ldr	r1, [r7, #28]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f972 	bl	8005062 <RTC_WriteAlarmCounter>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2204      	movs	r2, #4
 8004d88:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e022      	b.n	8004dda <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0202 	bic.w	r2, r2, #2
 8004da2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0202 	orr.w	r2, r2, #2
 8004db2:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dbe:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004dc0:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a07      	ldr	r2, [pc, #28]	; (8004de4 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dca:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3724      	adds	r7, #36	; 0x24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd90      	pop	{r4, r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40010400 	.word	0x40010400

08004de8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_RTC_GetAlarm+0x1e>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e05a      	b.n	8004ec0 <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f910 	bl	8005030 <RTC_ReadAlarmCounter>
 8004e10:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4a2c      	ldr	r2, [pc, #176]	; (8004ec8 <HAL_RTC_GetAlarm+0xe0>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	0ad9      	lsrs	r1, r3, #11
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_RTC_GetAlarm+0xe4>)
 8004e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e22:	091a      	lsrs	r2, r3, #4
 8004e24:	4613      	mov	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	1aca      	subs	r2, r1, r3
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <HAL_RTC_GetAlarm+0xe0>)
 8004e38:	fba3 1302 	umull	r1, r3, r3, r2
 8004e3c:	0adb      	lsrs	r3, r3, #11
 8004e3e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_RTC_GetAlarm+0xe8>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_RTC_GetAlarm+0xe0>)
 8004e5a:	fba2 1203 	umull	r1, r2, r2, r3
 8004e5e:	0ad2      	lsrs	r2, r2, #11
 8004e60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004e64:	fb01 f202 	mul.w	r2, r1, r2
 8004e68:	1a9a      	subs	r2, r3, r2
 8004e6a:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <HAL_RTC_GetAlarm+0xe8>)
 8004e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e70:	0959      	lsrs	r1, r3, #5
 8004e72:	460b      	mov	r3, r1
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	1a5b      	subs	r3, r3, r1
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	1ad1      	subs	r1, r2, r3
 8004e7c:	b2ca      	uxtb	r2, r1
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01a      	beq.n	8004ebe <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f95f 	bl	8005150 <RTC_ByteToBcd2>
 8004e92:	4603      	mov	r3, r0
 8004e94:	461a      	mov	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f956 	bl	8005150 <RTC_ByteToBcd2>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	789b      	ldrb	r3, [r3, #2]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f94d 	bl	8005150 <RTC_ByteToBcd2>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	91a2b3c5 	.word	0x91a2b3c5
 8004ecc:	aaaaaaab 	.word	0xaaaaaaab
 8004ed0:	88888889 	.word	0x88888889

08004ed4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d011      	beq.n	8004f0e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fd fad7 	bl	80024ac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0202 	bic.w	r2, r2, #2
 8004f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004f10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f14:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	745a      	strb	r2, [r3, #17]
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40010400 	.word	0x40010400

08004f28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e01d      	b.n	8004f7a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0208 	bic.w	r2, r2, #8
 8004f4c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f4e:	f7fd fde9 	bl	8002b24 <HAL_GetTick>
 8004f52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f54:	e009      	b.n	8004f6a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f56:	f7fd fde5 	bl	8002b24 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f64:	d901      	bls.n	8004f6a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e007      	b.n	8004f7a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ee      	beq.n	8004f56 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	827b      	strh	r3, [r7, #18]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	823b      	strh	r3, [r7, #16]
 8004f92:	2300      	movs	r3, #0
 8004f94:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004fb2:	8a7a      	ldrh	r2, [r7, #18]
 8004fb4:	8a3b      	ldrh	r3, [r7, #16]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d008      	beq.n	8004fcc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004fba:	8a3b      	ldrh	r3, [r7, #16]
 8004fbc:	041a      	lsls	r2, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e004      	b.n	8004fd6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004fcc:	8a7b      	ldrh	r3, [r7, #18]
 8004fce:	041a      	lsls	r2, r3, #16
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004fd6:	697b      	ldr	r3, [r7, #20]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f85d 	bl	80050b0 <RTC_EnterInitMode>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e011      	b.n	8005026 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	0c12      	lsrs	r2, r2, #16
 800500a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	b292      	uxth	r2, r2
 8005014:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f872 	bl	8005100 <RTC_ExitInitMode>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005026:	7bfb      	ldrb	r3, [r7, #15]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	81fb      	strh	r3, [r7, #14]
 800503c:	2300      	movs	r3, #0
 800503e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005050:	89fb      	ldrh	r3, [r7, #14]
 8005052:	041a      	lsls	r2, r3, #16
 8005054:	89bb      	ldrh	r3, [r7, #12]
 8005056:	4313      	orrs	r3, r2
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f81d 	bl	80050b0 <RTC_EnterInitMode>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
 8005080:	e011      	b.n	80050a6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	0c12      	lsrs	r2, r2, #16
 800508a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	b292      	uxth	r2, r2
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f832 	bl	8005100 <RTC_ExitInitMode>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80050bc:	f7fd fd32 	bl	8002b24 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050c2:	e009      	b.n	80050d8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80050c4:	f7fd fd2e 	bl	8002b24 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d2:	d901      	bls.n	80050d8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e00f      	b.n	80050f8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ee      	beq.n	80050c4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0210 	orr.w	r2, r2, #16
 80050f4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0210 	bic.w	r2, r2, #16
 800511a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800511c:	f7fd fd02 	bl	8002b24 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005122:	e009      	b.n	8005138 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005124:	f7fd fcfe 	bl	8002b24 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005132:	d901      	bls.n	8005138 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e007      	b.n	8005148 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ee      	beq.n	8005124 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800515e:	e005      	b.n	800516c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	3b0a      	subs	r3, #10
 800516a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	2b09      	cmp	r3, #9
 8005170:	d8f6      	bhi.n	8005160 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	b2da      	uxtb	r2, r3
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	4313      	orrs	r3, r2
 800517e:	b2db      	uxtb	r3, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr

0800518a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800518a:	b480      	push	{r7}
 800518c:	b085      	sub	sp, #20
 800518e:	af00      	add	r7, sp, #0
 8005190:	4603      	mov	r3, r0
 8005192:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	b2db      	uxtb	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4413      	add	r3, r2
 80051b8:	b2db      	uxtb	r3, r3
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	7bdb      	ldrb	r3, [r3, #15]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	7b5b      	ldrb	r3, [r3, #13]
 80051e8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	7b9b      	ldrb	r3, [r3, #14]
 80051ee:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	e06f      	b.n	80052d6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d011      	beq.n	8005220 <RTC_DateUpdate+0x5c>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d00e      	beq.n	8005220 <RTC_DateUpdate+0x5c>
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b05      	cmp	r3, #5
 8005206:	d00b      	beq.n	8005220 <RTC_DateUpdate+0x5c>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b07      	cmp	r3, #7
 800520c:	d008      	beq.n	8005220 <RTC_DateUpdate+0x5c>
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d005      	beq.n	8005220 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b0a      	cmp	r3, #10
 8005218:	d002      	beq.n	8005220 <RTC_DateUpdate+0x5c>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d117      	bne.n	8005250 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b1e      	cmp	r3, #30
 8005224:	d803      	bhi.n	800522e <RTC_DateUpdate+0x6a>
      {
        day++;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3301      	adds	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800522c:	e050      	b.n	80052d0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b0c      	cmp	r3, #12
 8005232:	d005      	beq.n	8005240 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3301      	adds	r3, #1
 8005238:	613b      	str	r3, [r7, #16]
          day = 1U;
 800523a:	2301      	movs	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800523e:	e047      	b.n	80052d0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005240:	2301      	movs	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005244:	2301      	movs	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
          year++;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3301      	adds	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800524e:	e03f      	b.n	80052d0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b04      	cmp	r3, #4
 8005254:	d008      	beq.n	8005268 <RTC_DateUpdate+0xa4>
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b06      	cmp	r3, #6
 800525a:	d005      	beq.n	8005268 <RTC_DateUpdate+0xa4>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b09      	cmp	r3, #9
 8005260:	d002      	beq.n	8005268 <RTC_DateUpdate+0xa4>
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b0b      	cmp	r3, #11
 8005266:	d10c      	bne.n	8005282 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b1d      	cmp	r3, #29
 800526c:	d803      	bhi.n	8005276 <RTC_DateUpdate+0xb2>
      {
        day++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005274:	e02c      	b.n	80052d0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3301      	adds	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800527c:	2301      	movs	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005280:	e026      	b.n	80052d0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d123      	bne.n	80052d0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b1b      	cmp	r3, #27
 800528c:	d803      	bhi.n	8005296 <RTC_DateUpdate+0xd2>
      {
        day++;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3301      	adds	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e01c      	b.n	80052d0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b1c      	cmp	r3, #28
 800529a:	d111      	bne.n	80052c0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f839 	bl	8005318 <RTC_IsLeapYear>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <RTC_DateUpdate+0xf0>
        {
          day++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e00d      	b.n	80052d0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3301      	adds	r3, #1
 80052b8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80052ba:	2301      	movs	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e007      	b.n	80052d0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b1d      	cmp	r3, #29
 80052c4:	d104      	bne.n	80052d0 <RTC_DateUpdate+0x10c>
      {
        month++;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3301      	adds	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
        day = 1U;
 80052cc:	2301      	movs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	3301      	adds	r3, #1
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d38b      	bcc.n	80051f6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	6978      	ldr	r0, [r7, #20]
 8005302:	f000 f83b 	bl	800537c <RTC_WeekDayNum>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	731a      	strb	r2, [r3, #12]
}
 800530e:	bf00      	nop
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	e01d      	b.n	800536e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	4a10      	ldr	r2, [pc, #64]	; (8005378 <RTC_IsLeapYear+0x60>)
 8005336:	fba2 1203 	umull	r1, r2, r2, r3
 800533a:	0952      	lsrs	r2, r2, #5
 800533c:	2164      	movs	r1, #100	; 0x64
 800533e:	fb01 f202 	mul.w	r2, r1, r2
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800534a:	2301      	movs	r3, #1
 800534c:	e00f      	b.n	800536e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	4a09      	ldr	r2, [pc, #36]	; (8005378 <RTC_IsLeapYear+0x60>)
 8005352:	fba2 1203 	umull	r1, r2, r2, r3
 8005356:	09d2      	lsrs	r2, r2, #7
 8005358:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800535c:	fb01 f202 	mul.w	r2, r1, r2
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800536c:	2300      	movs	r3, #0
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	51eb851f 	.word	0x51eb851f

0800537c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
 8005388:	4613      	mov	r3, r2
 800538a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800539a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d82d      	bhi.n	80053fe <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	4613      	mov	r3, r2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	4a2c      	ldr	r2, [pc, #176]	; (8005460 <RTC_WeekDayNum+0xe4>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	085a      	lsrs	r2, r3, #1
 80053b6:	78bb      	ldrb	r3, [r7, #2]
 80053b8:	441a      	add	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	441a      	add	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	4926      	ldr	r1, [pc, #152]	; (8005464 <RTC_WeekDayNum+0xe8>)
 80053cc:	fba1 1303 	umull	r1, r3, r1, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	1ad2      	subs	r2, r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	4922      	ldr	r1, [pc, #136]	; (8005464 <RTC_WeekDayNum+0xe8>)
 80053da:	fba1 1303 	umull	r1, r3, r1, r3
 80053de:	09db      	lsrs	r3, r3, #7
 80053e0:	4413      	add	r3, r2
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	4b20      	ldr	r3, [pc, #128]	; (8005468 <RTC_WeekDayNum+0xec>)
 80053e6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ea:	1ad1      	subs	r1, r2, r3
 80053ec:	0849      	lsrs	r1, r1, #1
 80053ee:	440b      	add	r3, r1
 80053f0:	0899      	lsrs	r1, r3, #2
 80053f2:	460b      	mov	r3, r1
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	1a5b      	subs	r3, r3, r1
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e029      	b.n	8005452 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	4a15      	ldr	r2, [pc, #84]	; (8005460 <RTC_WeekDayNum+0xe4>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	085a      	lsrs	r2, r3, #1
 8005412:	78bb      	ldrb	r3, [r7, #2]
 8005414:	441a      	add	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	441a      	add	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	089b      	lsrs	r3, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4910      	ldr	r1, [pc, #64]	; (8005464 <RTC_WeekDayNum+0xe8>)
 8005424:	fba1 1303 	umull	r1, r3, r1, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	490d      	ldr	r1, [pc, #52]	; (8005464 <RTC_WeekDayNum+0xe8>)
 8005430:	fba1 1303 	umull	r1, r3, r1, r3
 8005434:	09db      	lsrs	r3, r3, #7
 8005436:	4413      	add	r3, r2
 8005438:	1c9a      	adds	r2, r3, #2
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <RTC_WeekDayNum+0xec>)
 800543c:	fba3 1302 	umull	r1, r3, r3, r2
 8005440:	1ad1      	subs	r1, r2, r3
 8005442:	0849      	lsrs	r1, r1, #1
 8005444:	440b      	add	r3, r1
 8005446:	0899      	lsrs	r1, r3, #2
 8005448:	460b      	mov	r3, r1
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	1a5b      	subs	r3, r3, r1
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	b2db      	uxtb	r3, r3
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr
 8005460:	38e38e39 	.word	0x38e38e39
 8005464:	51eb851f 	.word	0x51eb851f
 8005468:	24924925 	.word	0x24924925

0800546c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <HAL_SRAM_Init+0x1c>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005486:	d101      	bne.n	800548c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e038      	b.n	80054fe <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7fd f969 	bl	8002778 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3308      	adds	r3, #8
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f000 feb7 	bl	8006224 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	461a      	mov	r2, r3
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	f000 ff19 	bl	80062f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6858      	ldr	r0, [r3, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	f000 ff44 	bl	8006360 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	6892      	ldr	r2, [r2, #8]
 80054e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	6892      	ldr	r2, [r2, #8]
 80054ec:	f041 0101 	orr.w	r1, r1, #1
 80054f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e041      	b.n	800559c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fd f87b 	bl	8002628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f000 fb21 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e03c      	b.n	8005636 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1d      	ldr	r2, [pc, #116]	; (8005640 <HAL_TIM_Base_Start+0x9c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d018      	beq.n	8005600 <HAL_TIM_Base_Start+0x5c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <HAL_TIM_Base_Start+0xa0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <HAL_TIM_Base_Start+0x5c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e0:	d00e      	beq.n	8005600 <HAL_TIM_Base_Start+0x5c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a18      	ldr	r2, [pc, #96]	; (8005648 <HAL_TIM_Base_Start+0xa4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d009      	beq.n	8005600 <HAL_TIM_Base_Start+0x5c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a16      	ldr	r2, [pc, #88]	; (800564c <HAL_TIM_Base_Start+0xa8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <HAL_TIM_Base_Start+0x5c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a15      	ldr	r2, [pc, #84]	; (8005650 <HAL_TIM_Base_Start+0xac>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d111      	bne.n	8005624 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b06      	cmp	r3, #6
 8005610:	d010      	beq.n	8005634 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005622:	e007      	b.n	8005634 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40013400 	.word	0x40013400
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00

08005654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e041      	b.n	80056ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f839 	bl	80056f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fa7a 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_TIM_PWM_Start+0x24>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e022      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d109      	bne.n	8005742 <HAL_TIM_PWM_Start+0x3e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e015      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d109      	bne.n	800575c <HAL_TIM_PWM_Start+0x58>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e008      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e072      	b.n	800585c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0x82>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005784:	e013      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0x92>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005794:	e00b      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xa2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a4:	e003      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2201      	movs	r2, #1
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fca4 	bl	8006104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a28      	ldr	r2, [pc, #160]	; (8005864 <HAL_TIM_PWM_Start+0x160>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_TIM_PWM_Start+0xcc>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a27      	ldr	r2, [pc, #156]	; (8005868 <HAL_TIM_PWM_Start+0x164>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_PWM_Start+0xd0>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <HAL_TIM_PWM_Start+0xd2>
 80057d4:	2300      	movs	r3, #0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1d      	ldr	r2, [pc, #116]	; (8005864 <HAL_TIM_PWM_Start+0x160>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d018      	beq.n	8005826 <HAL_TIM_PWM_Start+0x122>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <HAL_TIM_PWM_Start+0x164>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <HAL_TIM_PWM_Start+0x122>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005806:	d00e      	beq.n	8005826 <HAL_TIM_PWM_Start+0x122>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a17      	ldr	r2, [pc, #92]	; (800586c <HAL_TIM_PWM_Start+0x168>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d009      	beq.n	8005826 <HAL_TIM_PWM_Start+0x122>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a16      	ldr	r2, [pc, #88]	; (8005870 <HAL_TIM_PWM_Start+0x16c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIM_PWM_Start+0x122>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a14      	ldr	r2, [pc, #80]	; (8005874 <HAL_TIM_PWM_Start+0x170>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d111      	bne.n	800584a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b06      	cmp	r3, #6
 8005836:	d010      	beq.n	800585a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	e007      	b.n	800585a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40013400 	.word	0x40013400
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00

08005878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005892:	2302      	movs	r3, #2
 8005894:	e0ae      	b.n	80059f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	f200 809f 	bhi.w	80059e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	080059e5 	.word	0x080059e5
 80058b4:	080059e5 	.word	0x080059e5
 80058b8:	080059e5 	.word	0x080059e5
 80058bc:	08005921 	.word	0x08005921
 80058c0:	080059e5 	.word	0x080059e5
 80058c4:	080059e5 	.word	0x080059e5
 80058c8:	080059e5 	.word	0x080059e5
 80058cc:	08005963 	.word	0x08005963
 80058d0:	080059e5 	.word	0x080059e5
 80058d4:	080059e5 	.word	0x080059e5
 80058d8:	080059e5 	.word	0x080059e5
 80058dc:	080059a3 	.word	0x080059a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f9ca 	bl	8005c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0204 	bic.w	r2, r2, #4
 800590a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6999      	ldr	r1, [r3, #24]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	619a      	str	r2, [r3, #24]
      break;
 800591e:	e064      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fa1a 	bl	8005d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	619a      	str	r2, [r3, #24]
      break;
 8005960:	e043      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fa6d 	bl	8005e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0208 	orr.w	r2, r2, #8
 800597c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0204 	bic.w	r2, r2, #4
 800598c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69d9      	ldr	r1, [r3, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	61da      	str	r2, [r3, #28]
      break;
 80059a0:	e023      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fac1 	bl	8005f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69d9      	ldr	r1, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	021a      	lsls	r2, r3, #8
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	61da      	str	r2, [r3, #28]
      break;
 80059e2:	e002      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	75fb      	strb	r3, [r7, #23]
      break;
 80059e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_ConfigClockSource+0x1c>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e0b4      	b.n	8005b82 <HAL_TIM_ConfigClockSource+0x186>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a50:	d03e      	beq.n	8005ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a56:	f200 8087 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	f000 8086 	beq.w	8005b6e <HAL_TIM_ConfigClockSource+0x172>
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a66:	d87f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b70      	cmp	r3, #112	; 0x70
 8005a6a:	d01a      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d87b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b60      	cmp	r3, #96	; 0x60
 8005a72:	d050      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x11a>
 8005a74:	2b60      	cmp	r3, #96	; 0x60
 8005a76:	d877      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b50      	cmp	r3, #80	; 0x50
 8005a7a:	d03c      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a7c:	2b50      	cmp	r3, #80	; 0x50
 8005a7e:	d873      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d058      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x13a>
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d86f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d064      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d86b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d060      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d867      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d05c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d05a      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa0:	e062      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6899      	ldr	r1, [r3, #8]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f000 fb08 	bl	80060c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	609a      	str	r2, [r3, #8]
      break;
 8005ace:	e04f      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6899      	ldr	r1, [r3, #8]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f000 faf1 	bl	80060c6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af2:	609a      	str	r2, [r3, #8]
      break;
 8005af4:	e03c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fa68 	bl	8005fd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2150      	movs	r1, #80	; 0x50
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fabf 	bl	8006092 <TIM_ITRx_SetConfig>
      break;
 8005b14:	e02c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fa86 	bl	8006034 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2160      	movs	r1, #96	; 0x60
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 faaf 	bl	8006092 <TIM_ITRx_SetConfig>
      break;
 8005b34:	e01c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f000 fa48 	bl	8005fd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2140      	movs	r1, #64	; 0x40
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fa9f 	bl	8006092 <TIM_ITRx_SetConfig>
      break;
 8005b54:	e00c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 fa96 	bl	8006092 <TIM_ITRx_SetConfig>
      break;
 8005b66:	e003      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	e000      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a33      	ldr	r2, [pc, #204]	; (8005c6c <TIM_Base_SetConfig+0xe0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a32      	ldr	r2, [pc, #200]	; (8005c70 <TIM_Base_SetConfig+0xe4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00f      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d00b      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <TIM_Base_SetConfig+0xe8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d007      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a2e      	ldr	r2, [pc, #184]	; (8005c78 <TIM_Base_SetConfig+0xec>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a2d      	ldr	r2, [pc, #180]	; (8005c7c <TIM_Base_SetConfig+0xf0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d108      	bne.n	8005bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <TIM_Base_SetConfig+0xe0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <TIM_Base_SetConfig+0x82>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <TIM_Base_SetConfig+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <TIM_Base_SetConfig+0x82>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d00b      	beq.n	8005c0e <TIM_Base_SetConfig+0x82>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <TIM_Base_SetConfig+0xe8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_Base_SetConfig+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <TIM_Base_SetConfig+0xec>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_Base_SetConfig+0x82>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <TIM_Base_SetConfig+0xf0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d108      	bne.n	8005c20 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <TIM_Base_SetConfig+0xe0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0xc8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <TIM_Base_SetConfig+0xe4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d103      	bne.n	8005c5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	615a      	str	r2, [r3, #20]
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40013400 	.word	0x40013400
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	40000c00 	.word	0x40000c00

08005c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f023 0201 	bic.w	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0303 	bic.w	r3, r3, #3
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 0302 	bic.w	r3, r3, #2
 8005cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a20      	ldr	r2, [pc, #128]	; (8005d58 <TIM_OC1_SetConfig+0xd8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC1_SetConfig+0x64>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a1f      	ldr	r2, [pc, #124]	; (8005d5c <TIM_OC1_SetConfig+0xdc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d10c      	bne.n	8005cfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0308 	bic.w	r3, r3, #8
 8005cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 0304 	bic.w	r3, r3, #4
 8005cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <TIM_OC1_SetConfig+0xd8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_OC1_SetConfig+0x8e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <TIM_OC1_SetConfig+0xdc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d111      	bne.n	8005d32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	621a      	str	r2, [r3, #32]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40012c00 	.word	0x40012c00
 8005d5c:	40013400 	.word	0x40013400

08005d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f023 0210 	bic.w	r2, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0320 	bic.w	r3, r3, #32
 8005daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <TIM_OC2_SetConfig+0xe0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC2_SetConfig+0x68>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <TIM_OC2_SetConfig+0xe4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10d      	bne.n	8005de4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC2_SetConfig+0xe0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC2_SetConfig+0x94>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <TIM_OC2_SetConfig+0xe4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d113      	bne.n	8005e1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	621a      	str	r2, [r3, #32]
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400

08005e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a21      	ldr	r2, [pc, #132]	; (8005f28 <TIM_OC3_SetConfig+0xe0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_OC3_SetConfig+0x66>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <TIM_OC3_SetConfig+0xe4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10d      	bne.n	8005eca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <TIM_OC3_SetConfig+0xe0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_OC3_SetConfig+0x92>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <TIM_OC3_SetConfig+0xe4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d113      	bne.n	8005f02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	621a      	str	r2, [r3, #32]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40013400 	.word	0x40013400

08005f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a11      	ldr	r2, [pc, #68]	; (8005fd0 <TIM_OC4_SetConfig+0xa0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_OC4_SetConfig+0x68>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a10      	ldr	r2, [pc, #64]	; (8005fd4 <TIM_OC4_SetConfig+0xa4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d109      	bne.n	8005fac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	019b      	lsls	r3, r3, #6
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40013400 	.word	0x40013400

08005fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f023 0201 	bic.w	r2, r3, #1
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 030a 	bic.w	r3, r3, #10
 8006014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr

08006034 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f023 0210 	bic.w	r2, r3, #16
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800605e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	031b      	lsls	r3, r3, #12
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006070:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f043 0307 	orr.w	r3, r3, #7
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	609a      	str	r2, [r3, #8]
}
 80060bc:	bf00      	nop
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b087      	sub	sp, #28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	021a      	lsls	r2, r3, #8
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	609a      	str	r2, [r3, #8]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2201      	movs	r2, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1a      	ldr	r2, [r3, #32]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	43db      	mvns	r3, r3
 8006126:	401a      	ands	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006160:	2302      	movs	r3, #2
 8006162:	e050      	b.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a19      	ldr	r2, [pc, #100]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ba:	d00e      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a15      	ldr	r2, [pc, #84]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a14      	ldr	r2, [pc, #80]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a12      	ldr	r2, [pc, #72]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d10c      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40013400 	.word	0x40013400
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800
 8006220:	40000c00 	.word	0x40000c00

08006224 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	f023 0101 	bic.w	r1, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d102      	bne.n	8006254 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800624e:	2340      	movs	r3, #64	; 0x40
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e001      	b.n	8006258 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006264:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800626a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006270:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006276:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800627c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006282:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006288:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800628e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006294:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <FSMC_NORSRAM_Init+0xd0>)
 80062b4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062bc:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80062c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	ea02 0103 	and.w	r1, r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4319      	orrs	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	0008fb7f 	.word	0x0008fb7f

080062f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	431a      	orrs	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	431a      	orrs	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	431a      	orrs	r2, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	3b01      	subs	r3, #1
 8006334:	051b      	lsls	r3, r3, #20
 8006336:	431a      	orrs	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	3b02      	subs	r3, #2
 800633e:	061b      	lsls	r3, r3, #24
 8006340:	431a      	orrs	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	4313      	orrs	r3, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	3201      	adds	r2, #1
 800634c:	4319      	orrs	r1, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006374:	d11d      	bne.n	80063b2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006380:	4013      	ands	r3, r2
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	6811      	ldr	r1, [r2, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	6852      	ldr	r2, [r2, #4]
 800638a:	0112      	lsls	r2, r2, #4
 800638c:	4311      	orrs	r1, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	6892      	ldr	r2, [r2, #8]
 8006392:	0212      	lsls	r2, r2, #8
 8006394:	4311      	orrs	r1, r2
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	6992      	ldr	r2, [r2, #24]
 800639a:	4311      	orrs	r1, r2
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	68d2      	ldr	r2, [r2, #12]
 80063a0:	0412      	lsls	r2, r2, #16
 80063a2:	430a      	orrs	r2, r1
 80063a4:	ea43 0102 	orr.w	r1, r3, r2
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80063b0:	e005      	b.n	80063be <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80063ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	cff00000 	.word	0xcff00000

080063d0 <__errno>:
 80063d0:	4b01      	ldr	r3, [pc, #4]	; (80063d8 <__errno+0x8>)
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	200000a8 	.word	0x200000a8

080063dc <__libc_init_array>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	2600      	movs	r6, #0
 80063e0:	4d0c      	ldr	r5, [pc, #48]	; (8006414 <__libc_init_array+0x38>)
 80063e2:	4c0d      	ldr	r4, [pc, #52]	; (8006418 <__libc_init_array+0x3c>)
 80063e4:	1b64      	subs	r4, r4, r5
 80063e6:	10a4      	asrs	r4, r4, #2
 80063e8:	42a6      	cmp	r6, r4
 80063ea:	d109      	bne.n	8006400 <__libc_init_array+0x24>
 80063ec:	f002 fefc 	bl	80091e8 <_init>
 80063f0:	2600      	movs	r6, #0
 80063f2:	4d0a      	ldr	r5, [pc, #40]	; (800641c <__libc_init_array+0x40>)
 80063f4:	4c0a      	ldr	r4, [pc, #40]	; (8006420 <__libc_init_array+0x44>)
 80063f6:	1b64      	subs	r4, r4, r5
 80063f8:	10a4      	asrs	r4, r4, #2
 80063fa:	42a6      	cmp	r6, r4
 80063fc:	d105      	bne.n	800640a <__libc_init_array+0x2e>
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	f855 3b04 	ldr.w	r3, [r5], #4
 8006404:	4798      	blx	r3
 8006406:	3601      	adds	r6, #1
 8006408:	e7ee      	b.n	80063e8 <__libc_init_array+0xc>
 800640a:	f855 3b04 	ldr.w	r3, [r5], #4
 800640e:	4798      	blx	r3
 8006410:	3601      	adds	r6, #1
 8006412:	e7f2      	b.n	80063fa <__libc_init_array+0x1e>
 8006414:	08009cb4 	.word	0x08009cb4
 8006418:	08009cb4 	.word	0x08009cb4
 800641c:	08009cb4 	.word	0x08009cb4
 8006420:	08009cb8 	.word	0x08009cb8

08006424 <memset>:
 8006424:	4603      	mov	r3, r0
 8006426:	4402      	add	r2, r0
 8006428:	4293      	cmp	r3, r2
 800642a:	d100      	bne.n	800642e <memset+0xa>
 800642c:	4770      	bx	lr
 800642e:	f803 1b01 	strb.w	r1, [r3], #1
 8006432:	e7f9      	b.n	8006428 <memset+0x4>

08006434 <__cvt>:
 8006434:	2b00      	cmp	r3, #0
 8006436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800643a:	461f      	mov	r7, r3
 800643c:	bfbb      	ittet	lt
 800643e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006442:	461f      	movlt	r7, r3
 8006444:	2300      	movge	r3, #0
 8006446:	232d      	movlt	r3, #45	; 0x2d
 8006448:	b088      	sub	sp, #32
 800644a:	4614      	mov	r4, r2
 800644c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800644e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006450:	7013      	strb	r3, [r2, #0]
 8006452:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006454:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006458:	f023 0820 	bic.w	r8, r3, #32
 800645c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006460:	d005      	beq.n	800646e <__cvt+0x3a>
 8006462:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006466:	d100      	bne.n	800646a <__cvt+0x36>
 8006468:	3501      	adds	r5, #1
 800646a:	2302      	movs	r3, #2
 800646c:	e000      	b.n	8006470 <__cvt+0x3c>
 800646e:	2303      	movs	r3, #3
 8006470:	aa07      	add	r2, sp, #28
 8006472:	9204      	str	r2, [sp, #16]
 8006474:	aa06      	add	r2, sp, #24
 8006476:	e9cd a202 	strd	sl, r2, [sp, #8]
 800647a:	e9cd 3500 	strd	r3, r5, [sp]
 800647e:	4622      	mov	r2, r4
 8006480:	463b      	mov	r3, r7
 8006482:	f000 fce5 	bl	8006e50 <_dtoa_r>
 8006486:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800648a:	4606      	mov	r6, r0
 800648c:	d102      	bne.n	8006494 <__cvt+0x60>
 800648e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006490:	07db      	lsls	r3, r3, #31
 8006492:	d522      	bpl.n	80064da <__cvt+0xa6>
 8006494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006498:	eb06 0905 	add.w	r9, r6, r5
 800649c:	d110      	bne.n	80064c0 <__cvt+0x8c>
 800649e:	7833      	ldrb	r3, [r6, #0]
 80064a0:	2b30      	cmp	r3, #48	; 0x30
 80064a2:	d10a      	bne.n	80064ba <__cvt+0x86>
 80064a4:	2200      	movs	r2, #0
 80064a6:	2300      	movs	r3, #0
 80064a8:	4620      	mov	r0, r4
 80064aa:	4639      	mov	r1, r7
 80064ac:	f7fa fae8 	bl	8000a80 <__aeabi_dcmpeq>
 80064b0:	b918      	cbnz	r0, 80064ba <__cvt+0x86>
 80064b2:	f1c5 0501 	rsb	r5, r5, #1
 80064b6:	f8ca 5000 	str.w	r5, [sl]
 80064ba:	f8da 3000 	ldr.w	r3, [sl]
 80064be:	4499      	add	r9, r3
 80064c0:	2200      	movs	r2, #0
 80064c2:	2300      	movs	r3, #0
 80064c4:	4620      	mov	r0, r4
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7fa fada 	bl	8000a80 <__aeabi_dcmpeq>
 80064cc:	b108      	cbz	r0, 80064d2 <__cvt+0x9e>
 80064ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80064d2:	2230      	movs	r2, #48	; 0x30
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	454b      	cmp	r3, r9
 80064d8:	d307      	bcc.n	80064ea <__cvt+0xb6>
 80064da:	4630      	mov	r0, r6
 80064dc:	9b07      	ldr	r3, [sp, #28]
 80064de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80064e0:	1b9b      	subs	r3, r3, r6
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	b008      	add	sp, #32
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	9107      	str	r1, [sp, #28]
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e7f0      	b.n	80064d4 <__cvt+0xa0>

080064f2 <__exponent>:
 80064f2:	4603      	mov	r3, r0
 80064f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f6:	2900      	cmp	r1, #0
 80064f8:	f803 2b02 	strb.w	r2, [r3], #2
 80064fc:	bfb6      	itet	lt
 80064fe:	222d      	movlt	r2, #45	; 0x2d
 8006500:	222b      	movge	r2, #43	; 0x2b
 8006502:	4249      	neglt	r1, r1
 8006504:	2909      	cmp	r1, #9
 8006506:	7042      	strb	r2, [r0, #1]
 8006508:	dd2b      	ble.n	8006562 <__exponent+0x70>
 800650a:	f10d 0407 	add.w	r4, sp, #7
 800650e:	46a4      	mov	ip, r4
 8006510:	270a      	movs	r7, #10
 8006512:	fb91 f6f7 	sdiv	r6, r1, r7
 8006516:	460a      	mov	r2, r1
 8006518:	46a6      	mov	lr, r4
 800651a:	fb07 1516 	mls	r5, r7, r6, r1
 800651e:	2a63      	cmp	r2, #99	; 0x63
 8006520:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006524:	4631      	mov	r1, r6
 8006526:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800652a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800652e:	dcf0      	bgt.n	8006512 <__exponent+0x20>
 8006530:	3130      	adds	r1, #48	; 0x30
 8006532:	f1ae 0502 	sub.w	r5, lr, #2
 8006536:	f804 1c01 	strb.w	r1, [r4, #-1]
 800653a:	4629      	mov	r1, r5
 800653c:	1c44      	adds	r4, r0, #1
 800653e:	4561      	cmp	r1, ip
 8006540:	d30a      	bcc.n	8006558 <__exponent+0x66>
 8006542:	f10d 0209 	add.w	r2, sp, #9
 8006546:	eba2 020e 	sub.w	r2, r2, lr
 800654a:	4565      	cmp	r5, ip
 800654c:	bf88      	it	hi
 800654e:	2200      	movhi	r2, #0
 8006550:	4413      	add	r3, r2
 8006552:	1a18      	subs	r0, r3, r0
 8006554:	b003      	add	sp, #12
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006558:	f811 2b01 	ldrb.w	r2, [r1], #1
 800655c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006560:	e7ed      	b.n	800653e <__exponent+0x4c>
 8006562:	2330      	movs	r3, #48	; 0x30
 8006564:	3130      	adds	r1, #48	; 0x30
 8006566:	7083      	strb	r3, [r0, #2]
 8006568:	70c1      	strb	r1, [r0, #3]
 800656a:	1d03      	adds	r3, r0, #4
 800656c:	e7f1      	b.n	8006552 <__exponent+0x60>
	...

08006570 <_printf_float>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	b091      	sub	sp, #68	; 0x44
 8006576:	460c      	mov	r4, r1
 8006578:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800657c:	4616      	mov	r6, r2
 800657e:	461f      	mov	r7, r3
 8006580:	4605      	mov	r5, r0
 8006582:	f001 fa53 	bl	8007a2c <_localeconv_r>
 8006586:	6803      	ldr	r3, [r0, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	9309      	str	r3, [sp, #36]	; 0x24
 800658c:	f7f9 fe4c 	bl	8000228 <strlen>
 8006590:	2300      	movs	r3, #0
 8006592:	930e      	str	r3, [sp, #56]	; 0x38
 8006594:	f8d8 3000 	ldr.w	r3, [r8]
 8006598:	900a      	str	r0, [sp, #40]	; 0x28
 800659a:	3307      	adds	r3, #7
 800659c:	f023 0307 	bic.w	r3, r3, #7
 80065a0:	f103 0208 	add.w	r2, r3, #8
 80065a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80065a8:	f8d4 b000 	ldr.w	fp, [r4]
 80065ac:	f8c8 2000 	str.w	r2, [r8]
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065b8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80065bc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80065c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065c6:	4640      	mov	r0, r8
 80065c8:	4b9c      	ldr	r3, [pc, #624]	; (800683c <_printf_float+0x2cc>)
 80065ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065cc:	f7fa fa8a 	bl	8000ae4 <__aeabi_dcmpun>
 80065d0:	bb70      	cbnz	r0, 8006630 <_printf_float+0xc0>
 80065d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065d6:	4640      	mov	r0, r8
 80065d8:	4b98      	ldr	r3, [pc, #608]	; (800683c <_printf_float+0x2cc>)
 80065da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065dc:	f7fa fa64 	bl	8000aa8 <__aeabi_dcmple>
 80065e0:	bb30      	cbnz	r0, 8006630 <_printf_float+0xc0>
 80065e2:	2200      	movs	r2, #0
 80065e4:	2300      	movs	r3, #0
 80065e6:	4640      	mov	r0, r8
 80065e8:	4651      	mov	r1, sl
 80065ea:	f7fa fa53 	bl	8000a94 <__aeabi_dcmplt>
 80065ee:	b110      	cbz	r0, 80065f6 <_printf_float+0x86>
 80065f0:	232d      	movs	r3, #45	; 0x2d
 80065f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f6:	4b92      	ldr	r3, [pc, #584]	; (8006840 <_printf_float+0x2d0>)
 80065f8:	4892      	ldr	r0, [pc, #584]	; (8006844 <_printf_float+0x2d4>)
 80065fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80065fe:	bf94      	ite	ls
 8006600:	4698      	movls	r8, r3
 8006602:	4680      	movhi	r8, r0
 8006604:	2303      	movs	r3, #3
 8006606:	f04f 0a00 	mov.w	sl, #0
 800660a:	6123      	str	r3, [r4, #16]
 800660c:	f02b 0304 	bic.w	r3, fp, #4
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	4633      	mov	r3, r6
 8006614:	4621      	mov	r1, r4
 8006616:	4628      	mov	r0, r5
 8006618:	9700      	str	r7, [sp, #0]
 800661a:	aa0f      	add	r2, sp, #60	; 0x3c
 800661c:	f000 f9d4 	bl	80069c8 <_printf_common>
 8006620:	3001      	adds	r0, #1
 8006622:	f040 8090 	bne.w	8006746 <_printf_float+0x1d6>
 8006626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662a:	b011      	add	sp, #68	; 0x44
 800662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006630:	4642      	mov	r2, r8
 8006632:	4653      	mov	r3, sl
 8006634:	4640      	mov	r0, r8
 8006636:	4651      	mov	r1, sl
 8006638:	f7fa fa54 	bl	8000ae4 <__aeabi_dcmpun>
 800663c:	b148      	cbz	r0, 8006652 <_printf_float+0xe2>
 800663e:	f1ba 0f00 	cmp.w	sl, #0
 8006642:	bfb8      	it	lt
 8006644:	232d      	movlt	r3, #45	; 0x2d
 8006646:	4880      	ldr	r0, [pc, #512]	; (8006848 <_printf_float+0x2d8>)
 8006648:	bfb8      	it	lt
 800664a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800664e:	4b7f      	ldr	r3, [pc, #508]	; (800684c <_printf_float+0x2dc>)
 8006650:	e7d3      	b.n	80065fa <_printf_float+0x8a>
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	d142      	bne.n	80066e2 <_printf_float+0x172>
 800665c:	2306      	movs	r3, #6
 800665e:	6063      	str	r3, [r4, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	9206      	str	r2, [sp, #24]
 8006664:	aa0e      	add	r2, sp, #56	; 0x38
 8006666:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800666a:	aa0d      	add	r2, sp, #52	; 0x34
 800666c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006670:	9203      	str	r2, [sp, #12]
 8006672:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006676:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	4642      	mov	r2, r8
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	4628      	mov	r0, r5
 8006684:	4653      	mov	r3, sl
 8006686:	910b      	str	r1, [sp, #44]	; 0x2c
 8006688:	f7ff fed4 	bl	8006434 <__cvt>
 800668c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800668e:	4680      	mov	r8, r0
 8006690:	2947      	cmp	r1, #71	; 0x47
 8006692:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006694:	d108      	bne.n	80066a8 <_printf_float+0x138>
 8006696:	1cc8      	adds	r0, r1, #3
 8006698:	db02      	blt.n	80066a0 <_printf_float+0x130>
 800669a:	6863      	ldr	r3, [r4, #4]
 800669c:	4299      	cmp	r1, r3
 800669e:	dd40      	ble.n	8006722 <_printf_float+0x1b2>
 80066a0:	f1a9 0902 	sub.w	r9, r9, #2
 80066a4:	fa5f f989 	uxtb.w	r9, r9
 80066a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066ac:	d81f      	bhi.n	80066ee <_printf_float+0x17e>
 80066ae:	464a      	mov	r2, r9
 80066b0:	3901      	subs	r1, #1
 80066b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066b6:	910d      	str	r1, [sp, #52]	; 0x34
 80066b8:	f7ff ff1b 	bl	80064f2 <__exponent>
 80066bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066be:	4682      	mov	sl, r0
 80066c0:	1813      	adds	r3, r2, r0
 80066c2:	2a01      	cmp	r2, #1
 80066c4:	6123      	str	r3, [r4, #16]
 80066c6:	dc02      	bgt.n	80066ce <_printf_float+0x15e>
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	07d2      	lsls	r2, r2, #31
 80066cc:	d501      	bpl.n	80066d2 <_printf_float+0x162>
 80066ce:	3301      	adds	r3, #1
 80066d0:	6123      	str	r3, [r4, #16]
 80066d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d09b      	beq.n	8006612 <_printf_float+0xa2>
 80066da:	232d      	movs	r3, #45	; 0x2d
 80066dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e0:	e797      	b.n	8006612 <_printf_float+0xa2>
 80066e2:	2947      	cmp	r1, #71	; 0x47
 80066e4:	d1bc      	bne.n	8006660 <_printf_float+0xf0>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1ba      	bne.n	8006660 <_printf_float+0xf0>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e7b7      	b.n	800665e <_printf_float+0xee>
 80066ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80066f2:	d118      	bne.n	8006726 <_printf_float+0x1b6>
 80066f4:	2900      	cmp	r1, #0
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	dd0b      	ble.n	8006712 <_printf_float+0x1a2>
 80066fa:	6121      	str	r1, [r4, #16]
 80066fc:	b913      	cbnz	r3, 8006704 <_printf_float+0x194>
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	07d0      	lsls	r0, r2, #31
 8006702:	d502      	bpl.n	800670a <_printf_float+0x19a>
 8006704:	3301      	adds	r3, #1
 8006706:	440b      	add	r3, r1
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	f04f 0a00 	mov.w	sl, #0
 800670e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006710:	e7df      	b.n	80066d2 <_printf_float+0x162>
 8006712:	b913      	cbnz	r3, 800671a <_printf_float+0x1aa>
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	07d2      	lsls	r2, r2, #31
 8006718:	d501      	bpl.n	800671e <_printf_float+0x1ae>
 800671a:	3302      	adds	r3, #2
 800671c:	e7f4      	b.n	8006708 <_printf_float+0x198>
 800671e:	2301      	movs	r3, #1
 8006720:	e7f2      	b.n	8006708 <_printf_float+0x198>
 8006722:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006728:	4299      	cmp	r1, r3
 800672a:	db05      	blt.n	8006738 <_printf_float+0x1c8>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	6121      	str	r1, [r4, #16]
 8006730:	07d8      	lsls	r0, r3, #31
 8006732:	d5ea      	bpl.n	800670a <_printf_float+0x19a>
 8006734:	1c4b      	adds	r3, r1, #1
 8006736:	e7e7      	b.n	8006708 <_printf_float+0x198>
 8006738:	2900      	cmp	r1, #0
 800673a:	bfcc      	ite	gt
 800673c:	2201      	movgt	r2, #1
 800673e:	f1c1 0202 	rsble	r2, r1, #2
 8006742:	4413      	add	r3, r2
 8006744:	e7e0      	b.n	8006708 <_printf_float+0x198>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	055a      	lsls	r2, r3, #21
 800674a:	d407      	bmi.n	800675c <_printf_float+0x1ec>
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	4642      	mov	r2, r8
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	d12b      	bne.n	80067b2 <_printf_float+0x242>
 800675a:	e764      	b.n	8006626 <_printf_float+0xb6>
 800675c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006760:	f240 80dd 	bls.w	800691e <_printf_float+0x3ae>
 8006764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006768:	2200      	movs	r2, #0
 800676a:	2300      	movs	r3, #0
 800676c:	f7fa f988 	bl	8000a80 <__aeabi_dcmpeq>
 8006770:	2800      	cmp	r0, #0
 8006772:	d033      	beq.n	80067dc <_printf_float+0x26c>
 8006774:	2301      	movs	r3, #1
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	4a35      	ldr	r2, [pc, #212]	; (8006850 <_printf_float+0x2e0>)
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f af51 	beq.w	8006626 <_printf_float+0xb6>
 8006784:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006788:	429a      	cmp	r2, r3
 800678a:	db02      	blt.n	8006792 <_printf_float+0x222>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	07d8      	lsls	r0, r3, #31
 8006790:	d50f      	bpl.n	80067b2 <_printf_float+0x242>
 8006792:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	f43f af42 	beq.w	8006626 <_printf_float+0xb6>
 80067a2:	f04f 0800 	mov.w	r8, #0
 80067a6:	f104 091a 	add.w	r9, r4, #26
 80067aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ac:	3b01      	subs	r3, #1
 80067ae:	4543      	cmp	r3, r8
 80067b0:	dc09      	bgt.n	80067c6 <_printf_float+0x256>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	079b      	lsls	r3, r3, #30
 80067b6:	f100 8102 	bmi.w	80069be <_printf_float+0x44e>
 80067ba:	68e0      	ldr	r0, [r4, #12]
 80067bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067be:	4298      	cmp	r0, r3
 80067c0:	bfb8      	it	lt
 80067c2:	4618      	movlt	r0, r3
 80067c4:	e731      	b.n	800662a <_printf_float+0xba>
 80067c6:	2301      	movs	r3, #1
 80067c8:	464a      	mov	r2, r9
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	f43f af28 	beq.w	8006626 <_printf_float+0xb6>
 80067d6:	f108 0801 	add.w	r8, r8, #1
 80067da:	e7e6      	b.n	80067aa <_printf_float+0x23a>
 80067dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dc38      	bgt.n	8006854 <_printf_float+0x2e4>
 80067e2:	2301      	movs	r3, #1
 80067e4:	4631      	mov	r1, r6
 80067e6:	4628      	mov	r0, r5
 80067e8:	4a19      	ldr	r2, [pc, #100]	; (8006850 <_printf_float+0x2e0>)
 80067ea:	47b8      	blx	r7
 80067ec:	3001      	adds	r0, #1
 80067ee:	f43f af1a 	beq.w	8006626 <_printf_float+0xb6>
 80067f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067f6:	4313      	orrs	r3, r2
 80067f8:	d102      	bne.n	8006800 <_printf_float+0x290>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	07d9      	lsls	r1, r3, #31
 80067fe:	d5d8      	bpl.n	80067b2 <_printf_float+0x242>
 8006800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	f43f af0b 	beq.w	8006626 <_printf_float+0xb6>
 8006810:	f04f 0900 	mov.w	r9, #0
 8006814:	f104 0a1a 	add.w	sl, r4, #26
 8006818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800681a:	425b      	negs	r3, r3
 800681c:	454b      	cmp	r3, r9
 800681e:	dc01      	bgt.n	8006824 <_printf_float+0x2b4>
 8006820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006822:	e794      	b.n	800674e <_printf_float+0x1de>
 8006824:	2301      	movs	r3, #1
 8006826:	4652      	mov	r2, sl
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f aef9 	beq.w	8006626 <_printf_float+0xb6>
 8006834:	f109 0901 	add.w	r9, r9, #1
 8006838:	e7ee      	b.n	8006818 <_printf_float+0x2a8>
 800683a:	bf00      	nop
 800683c:	7fefffff 	.word	0x7fefffff
 8006840:	080098dc 	.word	0x080098dc
 8006844:	080098e0 	.word	0x080098e0
 8006848:	080098e8 	.word	0x080098e8
 800684c:	080098e4 	.word	0x080098e4
 8006850:	080098ec 	.word	0x080098ec
 8006854:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006858:	429a      	cmp	r2, r3
 800685a:	bfa8      	it	ge
 800685c:	461a      	movge	r2, r3
 800685e:	2a00      	cmp	r2, #0
 8006860:	4691      	mov	r9, r2
 8006862:	dc37      	bgt.n	80068d4 <_printf_float+0x364>
 8006864:	f04f 0b00 	mov.w	fp, #0
 8006868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800686c:	f104 021a 	add.w	r2, r4, #26
 8006870:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006874:	ebaa 0309 	sub.w	r3, sl, r9
 8006878:	455b      	cmp	r3, fp
 800687a:	dc33      	bgt.n	80068e4 <_printf_float+0x374>
 800687c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006880:	429a      	cmp	r2, r3
 8006882:	db3b      	blt.n	80068fc <_printf_float+0x38c>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	07da      	lsls	r2, r3, #31
 8006888:	d438      	bmi.n	80068fc <_printf_float+0x38c>
 800688a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800688c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800688e:	eba3 020a 	sub.w	r2, r3, sl
 8006892:	eba3 0901 	sub.w	r9, r3, r1
 8006896:	4591      	cmp	r9, r2
 8006898:	bfa8      	it	ge
 800689a:	4691      	movge	r9, r2
 800689c:	f1b9 0f00 	cmp.w	r9, #0
 80068a0:	dc34      	bgt.n	800690c <_printf_float+0x39c>
 80068a2:	f04f 0800 	mov.w	r8, #0
 80068a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068aa:	f104 0a1a 	add.w	sl, r4, #26
 80068ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	eba3 0309 	sub.w	r3, r3, r9
 80068b8:	4543      	cmp	r3, r8
 80068ba:	f77f af7a 	ble.w	80067b2 <_printf_float+0x242>
 80068be:	2301      	movs	r3, #1
 80068c0:	4652      	mov	r2, sl
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f aeac 	beq.w	8006626 <_printf_float+0xb6>
 80068ce:	f108 0801 	add.w	r8, r8, #1
 80068d2:	e7ec      	b.n	80068ae <_printf_float+0x33e>
 80068d4:	4613      	mov	r3, r2
 80068d6:	4631      	mov	r1, r6
 80068d8:	4642      	mov	r2, r8
 80068da:	4628      	mov	r0, r5
 80068dc:	47b8      	blx	r7
 80068de:	3001      	adds	r0, #1
 80068e0:	d1c0      	bne.n	8006864 <_printf_float+0x2f4>
 80068e2:	e6a0      	b.n	8006626 <_printf_float+0xb6>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f ae99 	beq.w	8006626 <_printf_float+0xb6>
 80068f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068f6:	f10b 0b01 	add.w	fp, fp, #1
 80068fa:	e7b9      	b.n	8006870 <_printf_float+0x300>
 80068fc:	4631      	mov	r1, r6
 80068fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	d1bf      	bne.n	800688a <_printf_float+0x31a>
 800690a:	e68c      	b.n	8006626 <_printf_float+0xb6>
 800690c:	464b      	mov	r3, r9
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	eb08 020a 	add.w	r2, r8, sl
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	d1c2      	bne.n	80068a2 <_printf_float+0x332>
 800691c:	e683      	b.n	8006626 <_printf_float+0xb6>
 800691e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006920:	2a01      	cmp	r2, #1
 8006922:	dc01      	bgt.n	8006928 <_printf_float+0x3b8>
 8006924:	07db      	lsls	r3, r3, #31
 8006926:	d537      	bpl.n	8006998 <_printf_float+0x428>
 8006928:	2301      	movs	r3, #1
 800692a:	4642      	mov	r2, r8
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	f43f ae77 	beq.w	8006626 <_printf_float+0xb6>
 8006938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	f43f ae6f 	beq.w	8006626 <_printf_float+0xb6>
 8006948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800694c:	2200      	movs	r2, #0
 800694e:	2300      	movs	r3, #0
 8006950:	f7fa f896 	bl	8000a80 <__aeabi_dcmpeq>
 8006954:	b9d8      	cbnz	r0, 800698e <_printf_float+0x41e>
 8006956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006958:	f108 0201 	add.w	r2, r8, #1
 800695c:	3b01      	subs	r3, #1
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	d10e      	bne.n	8006986 <_printf_float+0x416>
 8006968:	e65d      	b.n	8006626 <_printf_float+0xb6>
 800696a:	2301      	movs	r3, #1
 800696c:	464a      	mov	r2, r9
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae56 	beq.w	8006626 <_printf_float+0xb6>
 800697a:	f108 0801 	add.w	r8, r8, #1
 800697e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006980:	3b01      	subs	r3, #1
 8006982:	4543      	cmp	r3, r8
 8006984:	dcf1      	bgt.n	800696a <_printf_float+0x3fa>
 8006986:	4653      	mov	r3, sl
 8006988:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800698c:	e6e0      	b.n	8006750 <_printf_float+0x1e0>
 800698e:	f04f 0800 	mov.w	r8, #0
 8006992:	f104 091a 	add.w	r9, r4, #26
 8006996:	e7f2      	b.n	800697e <_printf_float+0x40e>
 8006998:	2301      	movs	r3, #1
 800699a:	4642      	mov	r2, r8
 800699c:	e7df      	b.n	800695e <_printf_float+0x3ee>
 800699e:	2301      	movs	r3, #1
 80069a0:	464a      	mov	r2, r9
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae3c 	beq.w	8006626 <_printf_float+0xb6>
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80069b6:	1a5b      	subs	r3, r3, r1
 80069b8:	4543      	cmp	r3, r8
 80069ba:	dcf0      	bgt.n	800699e <_printf_float+0x42e>
 80069bc:	e6fd      	b.n	80067ba <_printf_float+0x24a>
 80069be:	f04f 0800 	mov.w	r8, #0
 80069c2:	f104 0919 	add.w	r9, r4, #25
 80069c6:	e7f4      	b.n	80069b2 <_printf_float+0x442>

080069c8 <_printf_common>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	4616      	mov	r6, r2
 80069ce:	4699      	mov	r9, r3
 80069d0:	688a      	ldr	r2, [r1, #8]
 80069d2:	690b      	ldr	r3, [r1, #16]
 80069d4:	4607      	mov	r7, r0
 80069d6:	4293      	cmp	r3, r2
 80069d8:	bfb8      	it	lt
 80069da:	4613      	movlt	r3, r2
 80069dc:	6033      	str	r3, [r6, #0]
 80069de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069e2:	460c      	mov	r4, r1
 80069e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e8:	b10a      	cbz	r2, 80069ee <_printf_common+0x26>
 80069ea:	3301      	adds	r3, #1
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	0699      	lsls	r1, r3, #26
 80069f2:	bf42      	ittt	mi
 80069f4:	6833      	ldrmi	r3, [r6, #0]
 80069f6:	3302      	addmi	r3, #2
 80069f8:	6033      	strmi	r3, [r6, #0]
 80069fa:	6825      	ldr	r5, [r4, #0]
 80069fc:	f015 0506 	ands.w	r5, r5, #6
 8006a00:	d106      	bne.n	8006a10 <_printf_common+0x48>
 8006a02:	f104 0a19 	add.w	sl, r4, #25
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	6832      	ldr	r2, [r6, #0]
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dc28      	bgt.n	8006a62 <_printf_common+0x9a>
 8006a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a14:	1e13      	subs	r3, r2, #0
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	bf18      	it	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	0692      	lsls	r2, r2, #26
 8006a1e:	d42d      	bmi.n	8006a7c <_printf_common+0xb4>
 8006a20:	4649      	mov	r1, r9
 8006a22:	4638      	mov	r0, r7
 8006a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a28:	47c0      	blx	r8
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d020      	beq.n	8006a70 <_printf_common+0xa8>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	68e5      	ldr	r5, [r4, #12]
 8006a32:	f003 0306 	and.w	r3, r3, #6
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	bf18      	it	ne
 8006a3a:	2500      	movne	r5, #0
 8006a3c:	6832      	ldr	r2, [r6, #0]
 8006a3e:	f04f 0600 	mov.w	r6, #0
 8006a42:	68a3      	ldr	r3, [r4, #8]
 8006a44:	bf08      	it	eq
 8006a46:	1aad      	subeq	r5, r5, r2
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	bf08      	it	eq
 8006a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bfc4      	itt	gt
 8006a54:	1a9b      	subgt	r3, r3, r2
 8006a56:	18ed      	addgt	r5, r5, r3
 8006a58:	341a      	adds	r4, #26
 8006a5a:	42b5      	cmp	r5, r6
 8006a5c:	d11a      	bne.n	8006a94 <_printf_common+0xcc>
 8006a5e:	2000      	movs	r0, #0
 8006a60:	e008      	b.n	8006a74 <_printf_common+0xac>
 8006a62:	2301      	movs	r3, #1
 8006a64:	4652      	mov	r2, sl
 8006a66:	4649      	mov	r1, r9
 8006a68:	4638      	mov	r0, r7
 8006a6a:	47c0      	blx	r8
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d103      	bne.n	8006a78 <_printf_common+0xb0>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a78:	3501      	adds	r5, #1
 8006a7a:	e7c4      	b.n	8006a06 <_printf_common+0x3e>
 8006a7c:	2030      	movs	r0, #48	; 0x30
 8006a7e:	18e1      	adds	r1, r4, r3
 8006a80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a8a:	4422      	add	r2, r4
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a92:	e7c5      	b.n	8006a20 <_printf_common+0x58>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4622      	mov	r2, r4
 8006a98:	4649      	mov	r1, r9
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	47c0      	blx	r8
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d0e6      	beq.n	8006a70 <_printf_common+0xa8>
 8006aa2:	3601      	adds	r6, #1
 8006aa4:	e7d9      	b.n	8006a5a <_printf_common+0x92>
	...

08006aa8 <_printf_i>:
 8006aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	7e0f      	ldrb	r7, [r1, #24]
 8006aae:	4691      	mov	r9, r2
 8006ab0:	2f78      	cmp	r7, #120	; 0x78
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	469a      	mov	sl, r3
 8006ab8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006abe:	d807      	bhi.n	8006ad0 <_printf_i+0x28>
 8006ac0:	2f62      	cmp	r7, #98	; 0x62
 8006ac2:	d80a      	bhi.n	8006ada <_printf_i+0x32>
 8006ac4:	2f00      	cmp	r7, #0
 8006ac6:	f000 80d9 	beq.w	8006c7c <_printf_i+0x1d4>
 8006aca:	2f58      	cmp	r7, #88	; 0x58
 8006acc:	f000 80a4 	beq.w	8006c18 <_printf_i+0x170>
 8006ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ad8:	e03a      	b.n	8006b50 <_printf_i+0xa8>
 8006ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ade:	2b15      	cmp	r3, #21
 8006ae0:	d8f6      	bhi.n	8006ad0 <_printf_i+0x28>
 8006ae2:	a101      	add	r1, pc, #4	; (adr r1, 8006ae8 <_printf_i+0x40>)
 8006ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae8:	08006b41 	.word	0x08006b41
 8006aec:	08006b55 	.word	0x08006b55
 8006af0:	08006ad1 	.word	0x08006ad1
 8006af4:	08006ad1 	.word	0x08006ad1
 8006af8:	08006ad1 	.word	0x08006ad1
 8006afc:	08006ad1 	.word	0x08006ad1
 8006b00:	08006b55 	.word	0x08006b55
 8006b04:	08006ad1 	.word	0x08006ad1
 8006b08:	08006ad1 	.word	0x08006ad1
 8006b0c:	08006ad1 	.word	0x08006ad1
 8006b10:	08006ad1 	.word	0x08006ad1
 8006b14:	08006c63 	.word	0x08006c63
 8006b18:	08006b85 	.word	0x08006b85
 8006b1c:	08006c45 	.word	0x08006c45
 8006b20:	08006ad1 	.word	0x08006ad1
 8006b24:	08006ad1 	.word	0x08006ad1
 8006b28:	08006c85 	.word	0x08006c85
 8006b2c:	08006ad1 	.word	0x08006ad1
 8006b30:	08006b85 	.word	0x08006b85
 8006b34:	08006ad1 	.word	0x08006ad1
 8006b38:	08006ad1 	.word	0x08006ad1
 8006b3c:	08006c4d 	.word	0x08006c4d
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	602a      	str	r2, [r5, #0]
 8006b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0a4      	b.n	8006c9e <_printf_i+0x1f6>
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	6829      	ldr	r1, [r5, #0]
 8006b58:	0606      	lsls	r6, r0, #24
 8006b5a:	f101 0304 	add.w	r3, r1, #4
 8006b5e:	d50a      	bpl.n	8006b76 <_printf_i+0xce>
 8006b60:	680e      	ldr	r6, [r1, #0]
 8006b62:	602b      	str	r3, [r5, #0]
 8006b64:	2e00      	cmp	r6, #0
 8006b66:	da03      	bge.n	8006b70 <_printf_i+0xc8>
 8006b68:	232d      	movs	r3, #45	; 0x2d
 8006b6a:	4276      	negs	r6, r6
 8006b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b70:	230a      	movs	r3, #10
 8006b72:	485e      	ldr	r0, [pc, #376]	; (8006cec <_printf_i+0x244>)
 8006b74:	e019      	b.n	8006baa <_printf_i+0x102>
 8006b76:	680e      	ldr	r6, [r1, #0]
 8006b78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	bf18      	it	ne
 8006b80:	b236      	sxthne	r6, r6
 8006b82:	e7ef      	b.n	8006b64 <_printf_i+0xbc>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	1d19      	adds	r1, r3, #4
 8006b8a:	6029      	str	r1, [r5, #0]
 8006b8c:	0601      	lsls	r1, r0, #24
 8006b8e:	d501      	bpl.n	8006b94 <_printf_i+0xec>
 8006b90:	681e      	ldr	r6, [r3, #0]
 8006b92:	e002      	b.n	8006b9a <_printf_i+0xf2>
 8006b94:	0646      	lsls	r6, r0, #25
 8006b96:	d5fb      	bpl.n	8006b90 <_printf_i+0xe8>
 8006b98:	881e      	ldrh	r6, [r3, #0]
 8006b9a:	2f6f      	cmp	r7, #111	; 0x6f
 8006b9c:	bf0c      	ite	eq
 8006b9e:	2308      	moveq	r3, #8
 8006ba0:	230a      	movne	r3, #10
 8006ba2:	4852      	ldr	r0, [pc, #328]	; (8006cec <_printf_i+0x244>)
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006baa:	6865      	ldr	r5, [r4, #4]
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	bfa8      	it	ge
 8006bb0:	6821      	ldrge	r1, [r4, #0]
 8006bb2:	60a5      	str	r5, [r4, #8]
 8006bb4:	bfa4      	itt	ge
 8006bb6:	f021 0104 	bicge.w	r1, r1, #4
 8006bba:	6021      	strge	r1, [r4, #0]
 8006bbc:	b90e      	cbnz	r6, 8006bc2 <_printf_i+0x11a>
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	d04d      	beq.n	8006c5e <_printf_i+0x1b6>
 8006bc2:	4615      	mov	r5, r2
 8006bc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bc8:	fb03 6711 	mls	r7, r3, r1, r6
 8006bcc:	5dc7      	ldrb	r7, [r0, r7]
 8006bce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bd2:	4637      	mov	r7, r6
 8006bd4:	42bb      	cmp	r3, r7
 8006bd6:	460e      	mov	r6, r1
 8006bd8:	d9f4      	bls.n	8006bc4 <_printf_i+0x11c>
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d10b      	bne.n	8006bf6 <_printf_i+0x14e>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	07de      	lsls	r6, r3, #31
 8006be2:	d508      	bpl.n	8006bf6 <_printf_i+0x14e>
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	6861      	ldr	r1, [r4, #4]
 8006be8:	4299      	cmp	r1, r3
 8006bea:	bfde      	ittt	le
 8006bec:	2330      	movle	r3, #48	; 0x30
 8006bee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bf2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bf6:	1b52      	subs	r2, r2, r5
 8006bf8:	6122      	str	r2, [r4, #16]
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4640      	mov	r0, r8
 8006c00:	f8cd a000 	str.w	sl, [sp]
 8006c04:	aa03      	add	r2, sp, #12
 8006c06:	f7ff fedf 	bl	80069c8 <_printf_common>
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d14c      	bne.n	8006ca8 <_printf_i+0x200>
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c12:	b004      	add	sp, #16
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	4834      	ldr	r0, [pc, #208]	; (8006cec <_printf_i+0x244>)
 8006c1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c1e:	6829      	ldr	r1, [r5, #0]
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c26:	6029      	str	r1, [r5, #0]
 8006c28:	061d      	lsls	r5, r3, #24
 8006c2a:	d514      	bpl.n	8006c56 <_printf_i+0x1ae>
 8006c2c:	07df      	lsls	r7, r3, #31
 8006c2e:	bf44      	itt	mi
 8006c30:	f043 0320 	orrmi.w	r3, r3, #32
 8006c34:	6023      	strmi	r3, [r4, #0]
 8006c36:	b91e      	cbnz	r6, 8006c40 <_printf_i+0x198>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	f023 0320 	bic.w	r3, r3, #32
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	2310      	movs	r3, #16
 8006c42:	e7af      	b.n	8006ba4 <_printf_i+0xfc>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	f043 0320 	orr.w	r3, r3, #32
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	2378      	movs	r3, #120	; 0x78
 8006c4e:	4828      	ldr	r0, [pc, #160]	; (8006cf0 <_printf_i+0x248>)
 8006c50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c54:	e7e3      	b.n	8006c1e <_printf_i+0x176>
 8006c56:	0659      	lsls	r1, r3, #25
 8006c58:	bf48      	it	mi
 8006c5a:	b2b6      	uxthmi	r6, r6
 8006c5c:	e7e6      	b.n	8006c2c <_printf_i+0x184>
 8006c5e:	4615      	mov	r5, r2
 8006c60:	e7bb      	b.n	8006bda <_printf_i+0x132>
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	6826      	ldr	r6, [r4, #0]
 8006c66:	1d18      	adds	r0, r3, #4
 8006c68:	6961      	ldr	r1, [r4, #20]
 8006c6a:	6028      	str	r0, [r5, #0]
 8006c6c:	0635      	lsls	r5, r6, #24
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	d501      	bpl.n	8006c76 <_printf_i+0x1ce>
 8006c72:	6019      	str	r1, [r3, #0]
 8006c74:	e002      	b.n	8006c7c <_printf_i+0x1d4>
 8006c76:	0670      	lsls	r0, r6, #25
 8006c78:	d5fb      	bpl.n	8006c72 <_printf_i+0x1ca>
 8006c7a:	8019      	strh	r1, [r3, #0]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4615      	mov	r5, r2
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	e7ba      	b.n	8006bfa <_printf_i+0x152>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	2100      	movs	r1, #0
 8006c88:	1d1a      	adds	r2, r3, #4
 8006c8a:	602a      	str	r2, [r5, #0]
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	4628      	mov	r0, r5
 8006c92:	f000 fed7 	bl	8007a44 <memchr>
 8006c96:	b108      	cbz	r0, 8006c9c <_printf_i+0x1f4>
 8006c98:	1b40      	subs	r0, r0, r5
 8006c9a:	6060      	str	r0, [r4, #4]
 8006c9c:	6863      	ldr	r3, [r4, #4]
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca6:	e7a8      	b.n	8006bfa <_printf_i+0x152>
 8006ca8:	462a      	mov	r2, r5
 8006caa:	4649      	mov	r1, r9
 8006cac:	4640      	mov	r0, r8
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	47d0      	blx	sl
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d0ab      	beq.n	8006c0e <_printf_i+0x166>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	079b      	lsls	r3, r3, #30
 8006cba:	d413      	bmi.n	8006ce4 <_printf_i+0x23c>
 8006cbc:	68e0      	ldr	r0, [r4, #12]
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	4298      	cmp	r0, r3
 8006cc2:	bfb8      	it	lt
 8006cc4:	4618      	movlt	r0, r3
 8006cc6:	e7a4      	b.n	8006c12 <_printf_i+0x16a>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4632      	mov	r2, r6
 8006ccc:	4649      	mov	r1, r9
 8006cce:	4640      	mov	r0, r8
 8006cd0:	47d0      	blx	sl
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d09b      	beq.n	8006c0e <_printf_i+0x166>
 8006cd6:	3501      	adds	r5, #1
 8006cd8:	68e3      	ldr	r3, [r4, #12]
 8006cda:	9903      	ldr	r1, [sp, #12]
 8006cdc:	1a5b      	subs	r3, r3, r1
 8006cde:	42ab      	cmp	r3, r5
 8006ce0:	dcf2      	bgt.n	8006cc8 <_printf_i+0x220>
 8006ce2:	e7eb      	b.n	8006cbc <_printf_i+0x214>
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	f104 0619 	add.w	r6, r4, #25
 8006cea:	e7f5      	b.n	8006cd8 <_printf_i+0x230>
 8006cec:	080098ee 	.word	0x080098ee
 8006cf0:	080098ff 	.word	0x080098ff

08006cf4 <siprintf>:
 8006cf4:	b40e      	push	{r1, r2, r3}
 8006cf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cfa:	b500      	push	{lr}
 8006cfc:	b09c      	sub	sp, #112	; 0x70
 8006cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8006d00:	9002      	str	r0, [sp, #8]
 8006d02:	9006      	str	r0, [sp, #24]
 8006d04:	9107      	str	r1, [sp, #28]
 8006d06:	9104      	str	r1, [sp, #16]
 8006d08:	4808      	ldr	r0, [pc, #32]	; (8006d2c <siprintf+0x38>)
 8006d0a:	4909      	ldr	r1, [pc, #36]	; (8006d30 <siprintf+0x3c>)
 8006d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d10:	9105      	str	r1, [sp, #20]
 8006d12:	6800      	ldr	r0, [r0, #0]
 8006d14:	a902      	add	r1, sp, #8
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	f001 fb7e 	bl	8008418 <_svfiprintf_r>
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	9b02      	ldr	r3, [sp, #8]
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	b01c      	add	sp, #112	; 0x70
 8006d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d28:	b003      	add	sp, #12
 8006d2a:	4770      	bx	lr
 8006d2c:	200000a8 	.word	0x200000a8
 8006d30:	ffff0208 	.word	0xffff0208

08006d34 <quorem>:
 8006d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	6903      	ldr	r3, [r0, #16]
 8006d3a:	690c      	ldr	r4, [r1, #16]
 8006d3c:	4607      	mov	r7, r0
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	f2c0 8082 	blt.w	8006e48 <quorem+0x114>
 8006d44:	3c01      	subs	r4, #1
 8006d46:	f100 0514 	add.w	r5, r0, #20
 8006d4a:	f101 0814 	add.w	r8, r1, #20
 8006d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d6c:	d331      	bcc.n	8006dd2 <quorem+0x9e>
 8006d6e:	f04f 0e00 	mov.w	lr, #0
 8006d72:	4640      	mov	r0, r8
 8006d74:	46ac      	mov	ip, r5
 8006d76:	46f2      	mov	sl, lr
 8006d78:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d7c:	b293      	uxth	r3, r2
 8006d7e:	fb06 e303 	mla	r3, r6, r3, lr
 8006d82:	0c12      	lsrs	r2, r2, #16
 8006d84:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	fb06 e202 	mla	r2, r6, r2, lr
 8006d8e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d92:	f8dc a000 	ldr.w	sl, [ip]
 8006d96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d9a:	fa1f fa8a 	uxth.w	sl, sl
 8006d9e:	4453      	add	r3, sl
 8006da0:	f8dc a000 	ldr.w	sl, [ip]
 8006da4:	b292      	uxth	r2, r2
 8006da6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006daa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db4:	4581      	cmp	r9, r0
 8006db6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dba:	f84c 3b04 	str.w	r3, [ip], #4
 8006dbe:	d2db      	bcs.n	8006d78 <quorem+0x44>
 8006dc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dc4:	b92b      	cbnz	r3, 8006dd2 <quorem+0x9e>
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	3b04      	subs	r3, #4
 8006dca:	429d      	cmp	r5, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	d32f      	bcc.n	8006e30 <quorem+0xfc>
 8006dd0:	613c      	str	r4, [r7, #16]
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	f001 f8d0 	bl	8007f78 <__mcmp>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	db25      	blt.n	8006e28 <quorem+0xf4>
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f04f 0c00 	mov.w	ip, #0
 8006de2:	3601      	adds	r6, #1
 8006de4:	f858 1b04 	ldr.w	r1, [r8], #4
 8006de8:	f8d0 e000 	ldr.w	lr, [r0]
 8006dec:	b28b      	uxth	r3, r1
 8006dee:	ebac 0303 	sub.w	r3, ip, r3
 8006df2:	fa1f f28e 	uxth.w	r2, lr
 8006df6:	4413      	add	r3, r2
 8006df8:	0c0a      	lsrs	r2, r1, #16
 8006dfa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006dfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e08:	45c1      	cmp	r9, r8
 8006e0a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e0e:	f840 3b04 	str.w	r3, [r0], #4
 8006e12:	d2e7      	bcs.n	8006de4 <quorem+0xb0>
 8006e14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e1c:	b922      	cbnz	r2, 8006e28 <quorem+0xf4>
 8006e1e:	3b04      	subs	r3, #4
 8006e20:	429d      	cmp	r5, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	d30a      	bcc.n	8006e3c <quorem+0x108>
 8006e26:	613c      	str	r4, [r7, #16]
 8006e28:	4630      	mov	r0, r6
 8006e2a:	b003      	add	sp, #12
 8006e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	3b04      	subs	r3, #4
 8006e34:	2a00      	cmp	r2, #0
 8006e36:	d1cb      	bne.n	8006dd0 <quorem+0x9c>
 8006e38:	3c01      	subs	r4, #1
 8006e3a:	e7c6      	b.n	8006dca <quorem+0x96>
 8006e3c:	6812      	ldr	r2, [r2, #0]
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	d1f0      	bne.n	8006e26 <quorem+0xf2>
 8006e44:	3c01      	subs	r4, #1
 8006e46:	e7eb      	b.n	8006e20 <quorem+0xec>
 8006e48:	2000      	movs	r0, #0
 8006e4a:	e7ee      	b.n	8006e2a <quorem+0xf6>
 8006e4c:	0000      	movs	r0, r0
	...

08006e50 <_dtoa_r>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	4616      	mov	r6, r2
 8006e56:	461f      	mov	r7, r3
 8006e58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e5a:	b099      	sub	sp, #100	; 0x64
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006e66:	b974      	cbnz	r4, 8006e86 <_dtoa_r+0x36>
 8006e68:	2010      	movs	r0, #16
 8006e6a:	f000 fde3 	bl	8007a34 <malloc>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	6268      	str	r0, [r5, #36]	; 0x24
 8006e72:	b920      	cbnz	r0, 8006e7e <_dtoa_r+0x2e>
 8006e74:	21ea      	movs	r1, #234	; 0xea
 8006e76:	4ba8      	ldr	r3, [pc, #672]	; (8007118 <_dtoa_r+0x2c8>)
 8006e78:	48a8      	ldr	r0, [pc, #672]	; (800711c <_dtoa_r+0x2cc>)
 8006e7a:	f001 fbdd 	bl	8008638 <__assert_func>
 8006e7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e82:	6004      	str	r4, [r0, #0]
 8006e84:	60c4      	str	r4, [r0, #12]
 8006e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	b151      	cbz	r1, 8006ea2 <_dtoa_r+0x52>
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4093      	lsls	r3, r2
 8006e92:	604a      	str	r2, [r1, #4]
 8006e94:	608b      	str	r3, [r1, #8]
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 fe30 	bl	8007afc <_Bfree>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	1e3b      	subs	r3, r7, #0
 8006ea4:	bfaf      	iteee	ge
 8006ea6:	2300      	movge	r3, #0
 8006ea8:	2201      	movlt	r2, #1
 8006eaa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006eae:	9305      	strlt	r3, [sp, #20]
 8006eb0:	bfa8      	it	ge
 8006eb2:	f8c8 3000 	strge.w	r3, [r8]
 8006eb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006eba:	4b99      	ldr	r3, [pc, #612]	; (8007120 <_dtoa_r+0x2d0>)
 8006ebc:	bfb8      	it	lt
 8006ebe:	f8c8 2000 	strlt.w	r2, [r8]
 8006ec2:	ea33 0309 	bics.w	r3, r3, r9
 8006ec6:	d119      	bne.n	8006efc <_dtoa_r+0xac>
 8006ec8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ecc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ed4:	4333      	orrs	r3, r6
 8006ed6:	f000 857f 	beq.w	80079d8 <_dtoa_r+0xb88>
 8006eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006edc:	b953      	cbnz	r3, 8006ef4 <_dtoa_r+0xa4>
 8006ede:	4b91      	ldr	r3, [pc, #580]	; (8007124 <_dtoa_r+0x2d4>)
 8006ee0:	e022      	b.n	8006f28 <_dtoa_r+0xd8>
 8006ee2:	4b91      	ldr	r3, [pc, #580]	; (8007128 <_dtoa_r+0x2d8>)
 8006ee4:	9303      	str	r3, [sp, #12]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	9803      	ldr	r0, [sp, #12]
 8006eee:	b019      	add	sp, #100	; 0x64
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	4b8b      	ldr	r3, [pc, #556]	; (8007124 <_dtoa_r+0x2d4>)
 8006ef6:	9303      	str	r3, [sp, #12]
 8006ef8:	3303      	adds	r3, #3
 8006efa:	e7f5      	b.n	8006ee8 <_dtoa_r+0x98>
 8006efc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006f04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f7f9 fdb8 	bl	8000a80 <__aeabi_dcmpeq>
 8006f10:	4680      	mov	r8, r0
 8006f12:	b158      	cbz	r0, 8006f2c <_dtoa_r+0xdc>
 8006f14:	2301      	movs	r3, #1
 8006f16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8558 	beq.w	80079d2 <_dtoa_r+0xb82>
 8006f22:	4882      	ldr	r0, [pc, #520]	; (800712c <_dtoa_r+0x2dc>)
 8006f24:	6018      	str	r0, [r3, #0]
 8006f26:	1e43      	subs	r3, r0, #1
 8006f28:	9303      	str	r3, [sp, #12]
 8006f2a:	e7df      	b.n	8006eec <_dtoa_r+0x9c>
 8006f2c:	ab16      	add	r3, sp, #88	; 0x58
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	ab17      	add	r3, sp, #92	; 0x5c
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	4628      	mov	r0, r5
 8006f36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f3a:	f001 f8c5 	bl	80080c8 <__d2b>
 8006f3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f42:	4683      	mov	fp, r0
 8006f44:	2c00      	cmp	r4, #0
 8006f46:	d07f      	beq.n	8007048 <_dtoa_r+0x1f8>
 8006f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006f5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006f62:	2200      	movs	r2, #0
 8006f64:	4b72      	ldr	r3, [pc, #456]	; (8007130 <_dtoa_r+0x2e0>)
 8006f66:	f7f9 f96b 	bl	8000240 <__aeabi_dsub>
 8006f6a:	a365      	add	r3, pc, #404	; (adr r3, 8007100 <_dtoa_r+0x2b0>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 fb1e 	bl	80005b0 <__aeabi_dmul>
 8006f74:	a364      	add	r3, pc, #400	; (adr r3, 8007108 <_dtoa_r+0x2b8>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	f7f9 f963 	bl	8000244 <__adddf3>
 8006f7e:	4606      	mov	r6, r0
 8006f80:	4620      	mov	r0, r4
 8006f82:	460f      	mov	r7, r1
 8006f84:	f7f9 faaa 	bl	80004dc <__aeabi_i2d>
 8006f88:	a361      	add	r3, pc, #388	; (adr r3, 8007110 <_dtoa_r+0x2c0>)
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f7f9 fb0f 	bl	80005b0 <__aeabi_dmul>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4630      	mov	r0, r6
 8006f98:	4639      	mov	r1, r7
 8006f9a:	f7f9 f953 	bl	8000244 <__adddf3>
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	f7f9 fdb5 	bl	8000b10 <__aeabi_d2iz>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4682      	mov	sl, r0
 8006faa:	2300      	movs	r3, #0
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7f9 fd70 	bl	8000a94 <__aeabi_dcmplt>
 8006fb4:	b148      	cbz	r0, 8006fca <_dtoa_r+0x17a>
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	f7f9 fa90 	bl	80004dc <__aeabi_i2d>
 8006fbc:	4632      	mov	r2, r6
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	f7f9 fd5e 	bl	8000a80 <__aeabi_dcmpeq>
 8006fc4:	b908      	cbnz	r0, 8006fca <_dtoa_r+0x17a>
 8006fc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006fca:	f1ba 0f16 	cmp.w	sl, #22
 8006fce:	d858      	bhi.n	8007082 <_dtoa_r+0x232>
 8006fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fd4:	4b57      	ldr	r3, [pc, #348]	; (8007134 <_dtoa_r+0x2e4>)
 8006fd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f7f9 fd59 	bl	8000a94 <__aeabi_dcmplt>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d04f      	beq.n	8007086 <_dtoa_r+0x236>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ff0:	1b1c      	subs	r4, r3, r4
 8006ff2:	1e63      	subs	r3, r4, #1
 8006ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff6:	bf49      	itett	mi
 8006ff8:	f1c4 0301 	rsbmi	r3, r4, #1
 8006ffc:	2300      	movpl	r3, #0
 8006ffe:	9306      	strmi	r3, [sp, #24]
 8007000:	2300      	movmi	r3, #0
 8007002:	bf54      	ite	pl
 8007004:	9306      	strpl	r3, [sp, #24]
 8007006:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007008:	f1ba 0f00 	cmp.w	sl, #0
 800700c:	db3d      	blt.n	800708a <_dtoa_r+0x23a>
 800700e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007010:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007014:	4453      	add	r3, sl
 8007016:	9309      	str	r3, [sp, #36]	; 0x24
 8007018:	2300      	movs	r3, #0
 800701a:	930a      	str	r3, [sp, #40]	; 0x28
 800701c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800701e:	2b09      	cmp	r3, #9
 8007020:	f200 808c 	bhi.w	800713c <_dtoa_r+0x2ec>
 8007024:	2b05      	cmp	r3, #5
 8007026:	bfc4      	itt	gt
 8007028:	3b04      	subgt	r3, #4
 800702a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800702c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800702e:	bfc8      	it	gt
 8007030:	2400      	movgt	r4, #0
 8007032:	f1a3 0302 	sub.w	r3, r3, #2
 8007036:	bfd8      	it	le
 8007038:	2401      	movle	r4, #1
 800703a:	2b03      	cmp	r3, #3
 800703c:	f200 808a 	bhi.w	8007154 <_dtoa_r+0x304>
 8007040:	e8df f003 	tbb	[pc, r3]
 8007044:	5b4d4f2d 	.word	0x5b4d4f2d
 8007048:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800704c:	441c      	add	r4, r3
 800704e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007052:	2b20      	cmp	r3, #32
 8007054:	bfc3      	ittte	gt
 8007056:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800705a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800705e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007062:	f1c3 0320 	rsble	r3, r3, #32
 8007066:	bfc6      	itte	gt
 8007068:	fa26 f000 	lsrgt.w	r0, r6, r0
 800706c:	4318      	orrgt	r0, r3
 800706e:	fa06 f003 	lslle.w	r0, r6, r3
 8007072:	f7f9 fa23 	bl	80004bc <__aeabi_ui2d>
 8007076:	2301      	movs	r3, #1
 8007078:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800707c:	3c01      	subs	r4, #1
 800707e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007080:	e76f      	b.n	8006f62 <_dtoa_r+0x112>
 8007082:	2301      	movs	r3, #1
 8007084:	e7b2      	b.n	8006fec <_dtoa_r+0x19c>
 8007086:	900f      	str	r0, [sp, #60]	; 0x3c
 8007088:	e7b1      	b.n	8006fee <_dtoa_r+0x19e>
 800708a:	9b06      	ldr	r3, [sp, #24]
 800708c:	eba3 030a 	sub.w	r3, r3, sl
 8007090:	9306      	str	r3, [sp, #24]
 8007092:	f1ca 0300 	rsb	r3, sl, #0
 8007096:	930a      	str	r3, [sp, #40]	; 0x28
 8007098:	2300      	movs	r3, #0
 800709a:	930e      	str	r3, [sp, #56]	; 0x38
 800709c:	e7be      	b.n	800701c <_dtoa_r+0x1cc>
 800709e:	2300      	movs	r3, #0
 80070a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80070a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dc58      	bgt.n	800715a <_dtoa_r+0x30a>
 80070a8:	f04f 0901 	mov.w	r9, #1
 80070ac:	464b      	mov	r3, r9
 80070ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80070b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80070b6:	2200      	movs	r2, #0
 80070b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80070ba:	6042      	str	r2, [r0, #4]
 80070bc:	2204      	movs	r2, #4
 80070be:	f102 0614 	add.w	r6, r2, #20
 80070c2:	429e      	cmp	r6, r3
 80070c4:	6841      	ldr	r1, [r0, #4]
 80070c6:	d94e      	bls.n	8007166 <_dtoa_r+0x316>
 80070c8:	4628      	mov	r0, r5
 80070ca:	f000 fcd7 	bl	8007a7c <_Balloc>
 80070ce:	9003      	str	r0, [sp, #12]
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d14c      	bne.n	800716e <_dtoa_r+0x31e>
 80070d4:	4602      	mov	r2, r0
 80070d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070da:	4b17      	ldr	r3, [pc, #92]	; (8007138 <_dtoa_r+0x2e8>)
 80070dc:	e6cc      	b.n	8006e78 <_dtoa_r+0x28>
 80070de:	2301      	movs	r3, #1
 80070e0:	e7de      	b.n	80070a0 <_dtoa_r+0x250>
 80070e2:	2300      	movs	r3, #0
 80070e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070e8:	eb0a 0903 	add.w	r9, sl, r3
 80070ec:	f109 0301 	add.w	r3, r9, #1
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	9308      	str	r3, [sp, #32]
 80070f4:	bfb8      	it	lt
 80070f6:	2301      	movlt	r3, #1
 80070f8:	e7dd      	b.n	80070b6 <_dtoa_r+0x266>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e7f2      	b.n	80070e4 <_dtoa_r+0x294>
 80070fe:	bf00      	nop
 8007100:	636f4361 	.word	0x636f4361
 8007104:	3fd287a7 	.word	0x3fd287a7
 8007108:	8b60c8b3 	.word	0x8b60c8b3
 800710c:	3fc68a28 	.word	0x3fc68a28
 8007110:	509f79fb 	.word	0x509f79fb
 8007114:	3fd34413 	.word	0x3fd34413
 8007118:	0800991d 	.word	0x0800991d
 800711c:	08009934 	.word	0x08009934
 8007120:	7ff00000 	.word	0x7ff00000
 8007124:	08009919 	.word	0x08009919
 8007128:	08009910 	.word	0x08009910
 800712c:	080098ed 	.word	0x080098ed
 8007130:	3ff80000 	.word	0x3ff80000
 8007134:	08009a28 	.word	0x08009a28
 8007138:	0800998f 	.word	0x0800998f
 800713c:	2401      	movs	r4, #1
 800713e:	2300      	movs	r3, #0
 8007140:	940b      	str	r4, [sp, #44]	; 0x2c
 8007142:	9322      	str	r3, [sp, #136]	; 0x88
 8007144:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007148:	2200      	movs	r2, #0
 800714a:	2312      	movs	r3, #18
 800714c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007150:	9223      	str	r2, [sp, #140]	; 0x8c
 8007152:	e7b0      	b.n	80070b6 <_dtoa_r+0x266>
 8007154:	2301      	movs	r3, #1
 8007156:	930b      	str	r3, [sp, #44]	; 0x2c
 8007158:	e7f4      	b.n	8007144 <_dtoa_r+0x2f4>
 800715a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800715e:	464b      	mov	r3, r9
 8007160:	f8cd 9020 	str.w	r9, [sp, #32]
 8007164:	e7a7      	b.n	80070b6 <_dtoa_r+0x266>
 8007166:	3101      	adds	r1, #1
 8007168:	6041      	str	r1, [r0, #4]
 800716a:	0052      	lsls	r2, r2, #1
 800716c:	e7a7      	b.n	80070be <_dtoa_r+0x26e>
 800716e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007170:	9a03      	ldr	r2, [sp, #12]
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	9b08      	ldr	r3, [sp, #32]
 8007176:	2b0e      	cmp	r3, #14
 8007178:	f200 80a8 	bhi.w	80072cc <_dtoa_r+0x47c>
 800717c:	2c00      	cmp	r4, #0
 800717e:	f000 80a5 	beq.w	80072cc <_dtoa_r+0x47c>
 8007182:	f1ba 0f00 	cmp.w	sl, #0
 8007186:	dd34      	ble.n	80071f2 <_dtoa_r+0x3a2>
 8007188:	4a9a      	ldr	r2, [pc, #616]	; (80073f4 <_dtoa_r+0x5a4>)
 800718a:	f00a 030f 	and.w	r3, sl, #15
 800718e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007192:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007196:	e9d3 3400 	ldrd	r3, r4, [r3]
 800719a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800719e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80071a2:	d016      	beq.n	80071d2 <_dtoa_r+0x382>
 80071a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071a8:	4b93      	ldr	r3, [pc, #588]	; (80073f8 <_dtoa_r+0x5a8>)
 80071aa:	2703      	movs	r7, #3
 80071ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071b0:	f7f9 fb28 	bl	8000804 <__aeabi_ddiv>
 80071b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071b8:	f004 040f 	and.w	r4, r4, #15
 80071bc:	4e8e      	ldr	r6, [pc, #568]	; (80073f8 <_dtoa_r+0x5a8>)
 80071be:	b954      	cbnz	r4, 80071d6 <_dtoa_r+0x386>
 80071c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c8:	f7f9 fb1c 	bl	8000804 <__aeabi_ddiv>
 80071cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071d0:	e029      	b.n	8007226 <_dtoa_r+0x3d6>
 80071d2:	2702      	movs	r7, #2
 80071d4:	e7f2      	b.n	80071bc <_dtoa_r+0x36c>
 80071d6:	07e1      	lsls	r1, r4, #31
 80071d8:	d508      	bpl.n	80071ec <_dtoa_r+0x39c>
 80071da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071e2:	f7f9 f9e5 	bl	80005b0 <__aeabi_dmul>
 80071e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071ea:	3701      	adds	r7, #1
 80071ec:	1064      	asrs	r4, r4, #1
 80071ee:	3608      	adds	r6, #8
 80071f0:	e7e5      	b.n	80071be <_dtoa_r+0x36e>
 80071f2:	f000 80a5 	beq.w	8007340 <_dtoa_r+0x4f0>
 80071f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071fa:	f1ca 0400 	rsb	r4, sl, #0
 80071fe:	4b7d      	ldr	r3, [pc, #500]	; (80073f4 <_dtoa_r+0x5a4>)
 8007200:	f004 020f 	and.w	r2, r4, #15
 8007204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f9d0 	bl	80005b0 <__aeabi_dmul>
 8007210:	2702      	movs	r7, #2
 8007212:	2300      	movs	r3, #0
 8007214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007218:	4e77      	ldr	r6, [pc, #476]	; (80073f8 <_dtoa_r+0x5a8>)
 800721a:	1124      	asrs	r4, r4, #4
 800721c:	2c00      	cmp	r4, #0
 800721e:	f040 8084 	bne.w	800732a <_dtoa_r+0x4da>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1d2      	bne.n	80071cc <_dtoa_r+0x37c>
 8007226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 808b 	beq.w	8007344 <_dtoa_r+0x4f4>
 800722e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007232:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007236:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800723a:	2200      	movs	r2, #0
 800723c:	4b6f      	ldr	r3, [pc, #444]	; (80073fc <_dtoa_r+0x5ac>)
 800723e:	f7f9 fc29 	bl	8000a94 <__aeabi_dcmplt>
 8007242:	2800      	cmp	r0, #0
 8007244:	d07e      	beq.n	8007344 <_dtoa_r+0x4f4>
 8007246:	9b08      	ldr	r3, [sp, #32]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d07b      	beq.n	8007344 <_dtoa_r+0x4f4>
 800724c:	f1b9 0f00 	cmp.w	r9, #0
 8007250:	dd38      	ble.n	80072c4 <_dtoa_r+0x474>
 8007252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007256:	2200      	movs	r2, #0
 8007258:	4b69      	ldr	r3, [pc, #420]	; (8007400 <_dtoa_r+0x5b0>)
 800725a:	f7f9 f9a9 	bl	80005b0 <__aeabi_dmul>
 800725e:	464c      	mov	r4, r9
 8007260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007264:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8007268:	3701      	adds	r7, #1
 800726a:	4638      	mov	r0, r7
 800726c:	f7f9 f936 	bl	80004dc <__aeabi_i2d>
 8007270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007274:	f7f9 f99c 	bl	80005b0 <__aeabi_dmul>
 8007278:	2200      	movs	r2, #0
 800727a:	4b62      	ldr	r3, [pc, #392]	; (8007404 <_dtoa_r+0x5b4>)
 800727c:	f7f8 ffe2 	bl	8000244 <__adddf3>
 8007280:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007284:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007288:	9611      	str	r6, [sp, #68]	; 0x44
 800728a:	2c00      	cmp	r4, #0
 800728c:	d15d      	bne.n	800734a <_dtoa_r+0x4fa>
 800728e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007292:	2200      	movs	r2, #0
 8007294:	4b5c      	ldr	r3, [pc, #368]	; (8007408 <_dtoa_r+0x5b8>)
 8007296:	f7f8 ffd3 	bl	8000240 <__aeabi_dsub>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072a2:	4633      	mov	r3, r6
 80072a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072a6:	f7f9 fc13 	bl	8000ad0 <__aeabi_dcmpgt>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	f040 829c 	bne.w	80077e8 <_dtoa_r+0x998>
 80072b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072ba:	f7f9 fbeb 	bl	8000a94 <__aeabi_dcmplt>
 80072be:	2800      	cmp	r0, #0
 80072c0:	f040 8290 	bne.w	80077e4 <_dtoa_r+0x994>
 80072c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80072c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f2c0 8152 	blt.w	8007578 <_dtoa_r+0x728>
 80072d4:	f1ba 0f0e 	cmp.w	sl, #14
 80072d8:	f300 814e 	bgt.w	8007578 <_dtoa_r+0x728>
 80072dc:	4b45      	ldr	r3, [pc, #276]	; (80073f4 <_dtoa_r+0x5a4>)
 80072de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80072ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f280 80db 	bge.w	80074a8 <_dtoa_r+0x658>
 80072f2:	9b08      	ldr	r3, [sp, #32]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f300 80d7 	bgt.w	80074a8 <_dtoa_r+0x658>
 80072fa:	f040 8272 	bne.w	80077e2 <_dtoa_r+0x992>
 80072fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007302:	2200      	movs	r2, #0
 8007304:	4b40      	ldr	r3, [pc, #256]	; (8007408 <_dtoa_r+0x5b8>)
 8007306:	f7f9 f953 	bl	80005b0 <__aeabi_dmul>
 800730a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800730e:	f7f9 fbd5 	bl	8000abc <__aeabi_dcmpge>
 8007312:	9c08      	ldr	r4, [sp, #32]
 8007314:	4626      	mov	r6, r4
 8007316:	2800      	cmp	r0, #0
 8007318:	f040 8248 	bne.w	80077ac <_dtoa_r+0x95c>
 800731c:	2331      	movs	r3, #49	; 0x31
 800731e:	9f03      	ldr	r7, [sp, #12]
 8007320:	f10a 0a01 	add.w	sl, sl, #1
 8007324:	f807 3b01 	strb.w	r3, [r7], #1
 8007328:	e244      	b.n	80077b4 <_dtoa_r+0x964>
 800732a:	07e2      	lsls	r2, r4, #31
 800732c:	d505      	bpl.n	800733a <_dtoa_r+0x4ea>
 800732e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007332:	f7f9 f93d 	bl	80005b0 <__aeabi_dmul>
 8007336:	2301      	movs	r3, #1
 8007338:	3701      	adds	r7, #1
 800733a:	1064      	asrs	r4, r4, #1
 800733c:	3608      	adds	r6, #8
 800733e:	e76d      	b.n	800721c <_dtoa_r+0x3cc>
 8007340:	2702      	movs	r7, #2
 8007342:	e770      	b.n	8007226 <_dtoa_r+0x3d6>
 8007344:	46d0      	mov	r8, sl
 8007346:	9c08      	ldr	r4, [sp, #32]
 8007348:	e78f      	b.n	800726a <_dtoa_r+0x41a>
 800734a:	9903      	ldr	r1, [sp, #12]
 800734c:	4b29      	ldr	r3, [pc, #164]	; (80073f4 <_dtoa_r+0x5a4>)
 800734e:	4421      	add	r1, r4
 8007350:	9112      	str	r1, [sp, #72]	; 0x48
 8007352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007354:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007358:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800735c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007360:	2900      	cmp	r1, #0
 8007362:	d055      	beq.n	8007410 <_dtoa_r+0x5c0>
 8007364:	2000      	movs	r0, #0
 8007366:	4929      	ldr	r1, [pc, #164]	; (800740c <_dtoa_r+0x5bc>)
 8007368:	f7f9 fa4c 	bl	8000804 <__aeabi_ddiv>
 800736c:	463b      	mov	r3, r7
 800736e:	4632      	mov	r2, r6
 8007370:	f7f8 ff66 	bl	8000240 <__aeabi_dsub>
 8007374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007378:	9f03      	ldr	r7, [sp, #12]
 800737a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800737e:	f7f9 fbc7 	bl	8000b10 <__aeabi_d2iz>
 8007382:	4604      	mov	r4, r0
 8007384:	f7f9 f8aa 	bl	80004dc <__aeabi_i2d>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007390:	f7f8 ff56 	bl	8000240 <__aeabi_dsub>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	3430      	adds	r4, #48	; 0x30
 800739a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800739e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073a2:	f807 4b01 	strb.w	r4, [r7], #1
 80073a6:	f7f9 fb75 	bl	8000a94 <__aeabi_dcmplt>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d174      	bne.n	8007498 <_dtoa_r+0x648>
 80073ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b2:	2000      	movs	r0, #0
 80073b4:	4911      	ldr	r1, [pc, #68]	; (80073fc <_dtoa_r+0x5ac>)
 80073b6:	f7f8 ff43 	bl	8000240 <__aeabi_dsub>
 80073ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073be:	f7f9 fb69 	bl	8000a94 <__aeabi_dcmplt>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f040 80b7 	bne.w	8007536 <_dtoa_r+0x6e6>
 80073c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073ca:	429f      	cmp	r7, r3
 80073cc:	f43f af7a 	beq.w	80072c4 <_dtoa_r+0x474>
 80073d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073d4:	2200      	movs	r2, #0
 80073d6:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <_dtoa_r+0x5b0>)
 80073d8:	f7f9 f8ea 	bl	80005b0 <__aeabi_dmul>
 80073dc:	2200      	movs	r2, #0
 80073de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <_dtoa_r+0x5b0>)
 80073e8:	f7f9 f8e2 	bl	80005b0 <__aeabi_dmul>
 80073ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073f0:	e7c3      	b.n	800737a <_dtoa_r+0x52a>
 80073f2:	bf00      	nop
 80073f4:	08009a28 	.word	0x08009a28
 80073f8:	08009a00 	.word	0x08009a00
 80073fc:	3ff00000 	.word	0x3ff00000
 8007400:	40240000 	.word	0x40240000
 8007404:	401c0000 	.word	0x401c0000
 8007408:	40140000 	.word	0x40140000
 800740c:	3fe00000 	.word	0x3fe00000
 8007410:	4630      	mov	r0, r6
 8007412:	4639      	mov	r1, r7
 8007414:	f7f9 f8cc 	bl	80005b0 <__aeabi_dmul>
 8007418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800741a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800741e:	9c03      	ldr	r4, [sp, #12]
 8007420:	9314      	str	r3, [sp, #80]	; 0x50
 8007422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007426:	f7f9 fb73 	bl	8000b10 <__aeabi_d2iz>
 800742a:	9015      	str	r0, [sp, #84]	; 0x54
 800742c:	f7f9 f856 	bl	80004dc <__aeabi_i2d>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007438:	f7f8 ff02 	bl	8000240 <__aeabi_dsub>
 800743c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800743e:	4606      	mov	r6, r0
 8007440:	3330      	adds	r3, #48	; 0x30
 8007442:	f804 3b01 	strb.w	r3, [r4], #1
 8007446:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007448:	460f      	mov	r7, r1
 800744a:	429c      	cmp	r4, r3
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	d124      	bne.n	800749c <_dtoa_r+0x64c>
 8007452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007456:	4bb0      	ldr	r3, [pc, #704]	; (8007718 <_dtoa_r+0x8c8>)
 8007458:	f7f8 fef4 	bl	8000244 <__adddf3>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4630      	mov	r0, r6
 8007462:	4639      	mov	r1, r7
 8007464:	f7f9 fb34 	bl	8000ad0 <__aeabi_dcmpgt>
 8007468:	2800      	cmp	r0, #0
 800746a:	d163      	bne.n	8007534 <_dtoa_r+0x6e4>
 800746c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007470:	2000      	movs	r0, #0
 8007472:	49a9      	ldr	r1, [pc, #676]	; (8007718 <_dtoa_r+0x8c8>)
 8007474:	f7f8 fee4 	bl	8000240 <__aeabi_dsub>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7f9 fb08 	bl	8000a94 <__aeabi_dcmplt>
 8007484:	2800      	cmp	r0, #0
 8007486:	f43f af1d 	beq.w	80072c4 <_dtoa_r+0x474>
 800748a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800748c:	1e7b      	subs	r3, r7, #1
 800748e:	9314      	str	r3, [sp, #80]	; 0x50
 8007490:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007494:	2b30      	cmp	r3, #48	; 0x30
 8007496:	d0f8      	beq.n	800748a <_dtoa_r+0x63a>
 8007498:	46c2      	mov	sl, r8
 800749a:	e03b      	b.n	8007514 <_dtoa_r+0x6c4>
 800749c:	4b9f      	ldr	r3, [pc, #636]	; (800771c <_dtoa_r+0x8cc>)
 800749e:	f7f9 f887 	bl	80005b0 <__aeabi_dmul>
 80074a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a6:	e7bc      	b.n	8007422 <_dtoa_r+0x5d2>
 80074a8:	9f03      	ldr	r7, [sp, #12]
 80074aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80074ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074b2:	4640      	mov	r0, r8
 80074b4:	4649      	mov	r1, r9
 80074b6:	f7f9 f9a5 	bl	8000804 <__aeabi_ddiv>
 80074ba:	f7f9 fb29 	bl	8000b10 <__aeabi_d2iz>
 80074be:	4604      	mov	r4, r0
 80074c0:	f7f9 f80c 	bl	80004dc <__aeabi_i2d>
 80074c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074c8:	f7f9 f872 	bl	80005b0 <__aeabi_dmul>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4640      	mov	r0, r8
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f8 feb4 	bl	8000240 <__aeabi_dsub>
 80074d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80074dc:	f807 6b01 	strb.w	r6, [r7], #1
 80074e0:	9e03      	ldr	r6, [sp, #12]
 80074e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80074e6:	1bbe      	subs	r6, r7, r6
 80074e8:	45b4      	cmp	ip, r6
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	d136      	bne.n	800755e <_dtoa_r+0x70e>
 80074f0:	f7f8 fea8 	bl	8000244 <__adddf3>
 80074f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074f8:	4680      	mov	r8, r0
 80074fa:	4689      	mov	r9, r1
 80074fc:	f7f9 fae8 	bl	8000ad0 <__aeabi_dcmpgt>
 8007500:	bb58      	cbnz	r0, 800755a <_dtoa_r+0x70a>
 8007502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007506:	4640      	mov	r0, r8
 8007508:	4649      	mov	r1, r9
 800750a:	f7f9 fab9 	bl	8000a80 <__aeabi_dcmpeq>
 800750e:	b108      	cbz	r0, 8007514 <_dtoa_r+0x6c4>
 8007510:	07e1      	lsls	r1, r4, #31
 8007512:	d422      	bmi.n	800755a <_dtoa_r+0x70a>
 8007514:	4628      	mov	r0, r5
 8007516:	4659      	mov	r1, fp
 8007518:	f000 faf0 	bl	8007afc <_Bfree>
 800751c:	2300      	movs	r3, #0
 800751e:	703b      	strb	r3, [r7, #0]
 8007520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007522:	f10a 0001 	add.w	r0, sl, #1
 8007526:	6018      	str	r0, [r3, #0]
 8007528:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800752a:	2b00      	cmp	r3, #0
 800752c:	f43f acde 	beq.w	8006eec <_dtoa_r+0x9c>
 8007530:	601f      	str	r7, [r3, #0]
 8007532:	e4db      	b.n	8006eec <_dtoa_r+0x9c>
 8007534:	4627      	mov	r7, r4
 8007536:	463b      	mov	r3, r7
 8007538:	461f      	mov	r7, r3
 800753a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800753e:	2a39      	cmp	r2, #57	; 0x39
 8007540:	d107      	bne.n	8007552 <_dtoa_r+0x702>
 8007542:	9a03      	ldr	r2, [sp, #12]
 8007544:	429a      	cmp	r2, r3
 8007546:	d1f7      	bne.n	8007538 <_dtoa_r+0x6e8>
 8007548:	2230      	movs	r2, #48	; 0x30
 800754a:	9903      	ldr	r1, [sp, #12]
 800754c:	f108 0801 	add.w	r8, r8, #1
 8007550:	700a      	strb	r2, [r1, #0]
 8007552:	781a      	ldrb	r2, [r3, #0]
 8007554:	3201      	adds	r2, #1
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e79e      	b.n	8007498 <_dtoa_r+0x648>
 800755a:	46d0      	mov	r8, sl
 800755c:	e7eb      	b.n	8007536 <_dtoa_r+0x6e6>
 800755e:	2200      	movs	r2, #0
 8007560:	4b6e      	ldr	r3, [pc, #440]	; (800771c <_dtoa_r+0x8cc>)
 8007562:	f7f9 f825 	bl	80005b0 <__aeabi_dmul>
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	4680      	mov	r8, r0
 800756c:	4689      	mov	r9, r1
 800756e:	f7f9 fa87 	bl	8000a80 <__aeabi_dcmpeq>
 8007572:	2800      	cmp	r0, #0
 8007574:	d09b      	beq.n	80074ae <_dtoa_r+0x65e>
 8007576:	e7cd      	b.n	8007514 <_dtoa_r+0x6c4>
 8007578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800757a:	2a00      	cmp	r2, #0
 800757c:	f000 80d0 	beq.w	8007720 <_dtoa_r+0x8d0>
 8007580:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007582:	2a01      	cmp	r2, #1
 8007584:	f300 80ae 	bgt.w	80076e4 <_dtoa_r+0x894>
 8007588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800758a:	2a00      	cmp	r2, #0
 800758c:	f000 80a6 	beq.w	80076dc <_dtoa_r+0x88c>
 8007590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007594:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007596:	9f06      	ldr	r7, [sp, #24]
 8007598:	9a06      	ldr	r2, [sp, #24]
 800759a:	2101      	movs	r1, #1
 800759c:	441a      	add	r2, r3
 800759e:	9206      	str	r2, [sp, #24]
 80075a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075a2:	4628      	mov	r0, r5
 80075a4:	441a      	add	r2, r3
 80075a6:	9209      	str	r2, [sp, #36]	; 0x24
 80075a8:	f000 fb5e 	bl	8007c68 <__i2b>
 80075ac:	4606      	mov	r6, r0
 80075ae:	2f00      	cmp	r7, #0
 80075b0:	dd0c      	ble.n	80075cc <_dtoa_r+0x77c>
 80075b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dd09      	ble.n	80075cc <_dtoa_r+0x77c>
 80075b8:	42bb      	cmp	r3, r7
 80075ba:	bfa8      	it	ge
 80075bc:	463b      	movge	r3, r7
 80075be:	9a06      	ldr	r2, [sp, #24]
 80075c0:	1aff      	subs	r7, r7, r3
 80075c2:	1ad2      	subs	r2, r2, r3
 80075c4:	9206      	str	r2, [sp, #24]
 80075c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	9309      	str	r3, [sp, #36]	; 0x24
 80075cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ce:	b1f3      	cbz	r3, 800760e <_dtoa_r+0x7be>
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80a8 	beq.w	8007728 <_dtoa_r+0x8d8>
 80075d8:	2c00      	cmp	r4, #0
 80075da:	dd10      	ble.n	80075fe <_dtoa_r+0x7ae>
 80075dc:	4631      	mov	r1, r6
 80075de:	4622      	mov	r2, r4
 80075e0:	4628      	mov	r0, r5
 80075e2:	f000 fbff 	bl	8007de4 <__pow5mult>
 80075e6:	465a      	mov	r2, fp
 80075e8:	4601      	mov	r1, r0
 80075ea:	4606      	mov	r6, r0
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 fb51 	bl	8007c94 <__multiply>
 80075f2:	4680      	mov	r8, r0
 80075f4:	4659      	mov	r1, fp
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 fa80 	bl	8007afc <_Bfree>
 80075fc:	46c3      	mov	fp, r8
 80075fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007600:	1b1a      	subs	r2, r3, r4
 8007602:	d004      	beq.n	800760e <_dtoa_r+0x7be>
 8007604:	4659      	mov	r1, fp
 8007606:	4628      	mov	r0, r5
 8007608:	f000 fbec 	bl	8007de4 <__pow5mult>
 800760c:	4683      	mov	fp, r0
 800760e:	2101      	movs	r1, #1
 8007610:	4628      	mov	r0, r5
 8007612:	f000 fb29 	bl	8007c68 <__i2b>
 8007616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007618:	4604      	mov	r4, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	f340 8086 	ble.w	800772c <_dtoa_r+0x8dc>
 8007620:	461a      	mov	r2, r3
 8007622:	4601      	mov	r1, r0
 8007624:	4628      	mov	r0, r5
 8007626:	f000 fbdd 	bl	8007de4 <__pow5mult>
 800762a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800762c:	4604      	mov	r4, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	dd7f      	ble.n	8007732 <_dtoa_r+0x8e2>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800763c:	6918      	ldr	r0, [r3, #16]
 800763e:	f000 fac5 	bl	8007bcc <__hi0bits>
 8007642:	f1c0 0020 	rsb	r0, r0, #32
 8007646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007648:	4418      	add	r0, r3
 800764a:	f010 001f 	ands.w	r0, r0, #31
 800764e:	f000 8092 	beq.w	8007776 <_dtoa_r+0x926>
 8007652:	f1c0 0320 	rsb	r3, r0, #32
 8007656:	2b04      	cmp	r3, #4
 8007658:	f340 808a 	ble.w	8007770 <_dtoa_r+0x920>
 800765c:	f1c0 001c 	rsb	r0, r0, #28
 8007660:	9b06      	ldr	r3, [sp, #24]
 8007662:	4407      	add	r7, r0
 8007664:	4403      	add	r3, r0
 8007666:	9306      	str	r3, [sp, #24]
 8007668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766a:	4403      	add	r3, r0
 800766c:	9309      	str	r3, [sp, #36]	; 0x24
 800766e:	9b06      	ldr	r3, [sp, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	dd05      	ble.n	8007680 <_dtoa_r+0x830>
 8007674:	4659      	mov	r1, fp
 8007676:	461a      	mov	r2, r3
 8007678:	4628      	mov	r0, r5
 800767a:	f000 fc0d 	bl	8007e98 <__lshift>
 800767e:	4683      	mov	fp, r0
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	dd05      	ble.n	8007692 <_dtoa_r+0x842>
 8007686:	4621      	mov	r1, r4
 8007688:	461a      	mov	r2, r3
 800768a:	4628      	mov	r0, r5
 800768c:	f000 fc04 	bl	8007e98 <__lshift>
 8007690:	4604      	mov	r4, r0
 8007692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d070      	beq.n	800777a <_dtoa_r+0x92a>
 8007698:	4621      	mov	r1, r4
 800769a:	4658      	mov	r0, fp
 800769c:	f000 fc6c 	bl	8007f78 <__mcmp>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	da6a      	bge.n	800777a <_dtoa_r+0x92a>
 80076a4:	2300      	movs	r3, #0
 80076a6:	4659      	mov	r1, fp
 80076a8:	220a      	movs	r2, #10
 80076aa:	4628      	mov	r0, r5
 80076ac:	f000 fa48 	bl	8007b40 <__multadd>
 80076b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b2:	4683      	mov	fp, r0
 80076b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8194 	beq.w	80079e6 <_dtoa_r+0xb96>
 80076be:	4631      	mov	r1, r6
 80076c0:	2300      	movs	r3, #0
 80076c2:	220a      	movs	r2, #10
 80076c4:	4628      	mov	r0, r5
 80076c6:	f000 fa3b 	bl	8007b40 <__multadd>
 80076ca:	f1b9 0f00 	cmp.w	r9, #0
 80076ce:	4606      	mov	r6, r0
 80076d0:	f300 8093 	bgt.w	80077fa <_dtoa_r+0x9aa>
 80076d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	dc57      	bgt.n	800778a <_dtoa_r+0x93a>
 80076da:	e08e      	b.n	80077fa <_dtoa_r+0x9aa>
 80076dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80076de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076e2:	e757      	b.n	8007594 <_dtoa_r+0x744>
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	1e5c      	subs	r4, r3, #1
 80076e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ea:	42a3      	cmp	r3, r4
 80076ec:	bfb7      	itett	lt
 80076ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076f0:	1b1c      	subge	r4, r3, r4
 80076f2:	1ae2      	sublt	r2, r4, r3
 80076f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80076f6:	bfbe      	ittt	lt
 80076f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80076fa:	189b      	addlt	r3, r3, r2
 80076fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80076fe:	9b08      	ldr	r3, [sp, #32]
 8007700:	bfb8      	it	lt
 8007702:	2400      	movlt	r4, #0
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfbb      	ittet	lt
 8007708:	9b06      	ldrlt	r3, [sp, #24]
 800770a:	9a08      	ldrlt	r2, [sp, #32]
 800770c:	9f06      	ldrge	r7, [sp, #24]
 800770e:	1a9f      	sublt	r7, r3, r2
 8007710:	bfac      	ite	ge
 8007712:	9b08      	ldrge	r3, [sp, #32]
 8007714:	2300      	movlt	r3, #0
 8007716:	e73f      	b.n	8007598 <_dtoa_r+0x748>
 8007718:	3fe00000 	.word	0x3fe00000
 800771c:	40240000 	.word	0x40240000
 8007720:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007722:	9f06      	ldr	r7, [sp, #24]
 8007724:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007726:	e742      	b.n	80075ae <_dtoa_r+0x75e>
 8007728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800772a:	e76b      	b.n	8007604 <_dtoa_r+0x7b4>
 800772c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800772e:	2b01      	cmp	r3, #1
 8007730:	dc19      	bgt.n	8007766 <_dtoa_r+0x916>
 8007732:	9b04      	ldr	r3, [sp, #16]
 8007734:	b9bb      	cbnz	r3, 8007766 <_dtoa_r+0x916>
 8007736:	9b05      	ldr	r3, [sp, #20]
 8007738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800773c:	b99b      	cbnz	r3, 8007766 <_dtoa_r+0x916>
 800773e:	9b05      	ldr	r3, [sp, #20]
 8007740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007744:	0d1b      	lsrs	r3, r3, #20
 8007746:	051b      	lsls	r3, r3, #20
 8007748:	b183      	cbz	r3, 800776c <_dtoa_r+0x91c>
 800774a:	f04f 0801 	mov.w	r8, #1
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	3301      	adds	r3, #1
 8007752:	9306      	str	r3, [sp, #24]
 8007754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007756:	3301      	adds	r3, #1
 8007758:	9309      	str	r3, [sp, #36]	; 0x24
 800775a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	f47f af6a 	bne.w	8007636 <_dtoa_r+0x7e6>
 8007762:	2001      	movs	r0, #1
 8007764:	e76f      	b.n	8007646 <_dtoa_r+0x7f6>
 8007766:	f04f 0800 	mov.w	r8, #0
 800776a:	e7f6      	b.n	800775a <_dtoa_r+0x90a>
 800776c:	4698      	mov	r8, r3
 800776e:	e7f4      	b.n	800775a <_dtoa_r+0x90a>
 8007770:	f43f af7d 	beq.w	800766e <_dtoa_r+0x81e>
 8007774:	4618      	mov	r0, r3
 8007776:	301c      	adds	r0, #28
 8007778:	e772      	b.n	8007660 <_dtoa_r+0x810>
 800777a:	9b08      	ldr	r3, [sp, #32]
 800777c:	2b00      	cmp	r3, #0
 800777e:	dc36      	bgt.n	80077ee <_dtoa_r+0x99e>
 8007780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007782:	2b02      	cmp	r3, #2
 8007784:	dd33      	ble.n	80077ee <_dtoa_r+0x99e>
 8007786:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800778a:	f1b9 0f00 	cmp.w	r9, #0
 800778e:	d10d      	bne.n	80077ac <_dtoa_r+0x95c>
 8007790:	4621      	mov	r1, r4
 8007792:	464b      	mov	r3, r9
 8007794:	2205      	movs	r2, #5
 8007796:	4628      	mov	r0, r5
 8007798:	f000 f9d2 	bl	8007b40 <__multadd>
 800779c:	4601      	mov	r1, r0
 800779e:	4604      	mov	r4, r0
 80077a0:	4658      	mov	r0, fp
 80077a2:	f000 fbe9 	bl	8007f78 <__mcmp>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f73f adb8 	bgt.w	800731c <_dtoa_r+0x4cc>
 80077ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077ae:	9f03      	ldr	r7, [sp, #12]
 80077b0:	ea6f 0a03 	mvn.w	sl, r3
 80077b4:	f04f 0800 	mov.w	r8, #0
 80077b8:	4621      	mov	r1, r4
 80077ba:	4628      	mov	r0, r5
 80077bc:	f000 f99e 	bl	8007afc <_Bfree>
 80077c0:	2e00      	cmp	r6, #0
 80077c2:	f43f aea7 	beq.w	8007514 <_dtoa_r+0x6c4>
 80077c6:	f1b8 0f00 	cmp.w	r8, #0
 80077ca:	d005      	beq.n	80077d8 <_dtoa_r+0x988>
 80077cc:	45b0      	cmp	r8, r6
 80077ce:	d003      	beq.n	80077d8 <_dtoa_r+0x988>
 80077d0:	4641      	mov	r1, r8
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 f992 	bl	8007afc <_Bfree>
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f98e 	bl	8007afc <_Bfree>
 80077e0:	e698      	b.n	8007514 <_dtoa_r+0x6c4>
 80077e2:	2400      	movs	r4, #0
 80077e4:	4626      	mov	r6, r4
 80077e6:	e7e1      	b.n	80077ac <_dtoa_r+0x95c>
 80077e8:	46c2      	mov	sl, r8
 80077ea:	4626      	mov	r6, r4
 80077ec:	e596      	b.n	800731c <_dtoa_r+0x4cc>
 80077ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80fd 	beq.w	80079f4 <_dtoa_r+0xba4>
 80077fa:	2f00      	cmp	r7, #0
 80077fc:	dd05      	ble.n	800780a <_dtoa_r+0x9ba>
 80077fe:	4631      	mov	r1, r6
 8007800:	463a      	mov	r2, r7
 8007802:	4628      	mov	r0, r5
 8007804:	f000 fb48 	bl	8007e98 <__lshift>
 8007808:	4606      	mov	r6, r0
 800780a:	f1b8 0f00 	cmp.w	r8, #0
 800780e:	d05c      	beq.n	80078ca <_dtoa_r+0xa7a>
 8007810:	4628      	mov	r0, r5
 8007812:	6871      	ldr	r1, [r6, #4]
 8007814:	f000 f932 	bl	8007a7c <_Balloc>
 8007818:	4607      	mov	r7, r0
 800781a:	b928      	cbnz	r0, 8007828 <_dtoa_r+0x9d8>
 800781c:	4602      	mov	r2, r0
 800781e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007822:	4b7f      	ldr	r3, [pc, #508]	; (8007a20 <_dtoa_r+0xbd0>)
 8007824:	f7ff bb28 	b.w	8006e78 <_dtoa_r+0x28>
 8007828:	6932      	ldr	r2, [r6, #16]
 800782a:	f106 010c 	add.w	r1, r6, #12
 800782e:	3202      	adds	r2, #2
 8007830:	0092      	lsls	r2, r2, #2
 8007832:	300c      	adds	r0, #12
 8007834:	f000 f914 	bl	8007a60 <memcpy>
 8007838:	2201      	movs	r2, #1
 800783a:	4639      	mov	r1, r7
 800783c:	4628      	mov	r0, r5
 800783e:	f000 fb2b 	bl	8007e98 <__lshift>
 8007842:	46b0      	mov	r8, r6
 8007844:	4606      	mov	r6, r0
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	9308      	str	r3, [sp, #32]
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	444b      	add	r3, r9
 8007850:	930a      	str	r3, [sp, #40]	; 0x28
 8007852:	9b04      	ldr	r3, [sp, #16]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	9309      	str	r3, [sp, #36]	; 0x24
 800785a:	9b08      	ldr	r3, [sp, #32]
 800785c:	4621      	mov	r1, r4
 800785e:	3b01      	subs	r3, #1
 8007860:	4658      	mov	r0, fp
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	f7ff fa66 	bl	8006d34 <quorem>
 8007868:	4603      	mov	r3, r0
 800786a:	4641      	mov	r1, r8
 800786c:	3330      	adds	r3, #48	; 0x30
 800786e:	9006      	str	r0, [sp, #24]
 8007870:	4658      	mov	r0, fp
 8007872:	930b      	str	r3, [sp, #44]	; 0x2c
 8007874:	f000 fb80 	bl	8007f78 <__mcmp>
 8007878:	4632      	mov	r2, r6
 800787a:	4681      	mov	r9, r0
 800787c:	4621      	mov	r1, r4
 800787e:	4628      	mov	r0, r5
 8007880:	f000 fb96 	bl	8007fb0 <__mdiff>
 8007884:	68c2      	ldr	r2, [r0, #12]
 8007886:	4607      	mov	r7, r0
 8007888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788a:	bb02      	cbnz	r2, 80078ce <_dtoa_r+0xa7e>
 800788c:	4601      	mov	r1, r0
 800788e:	4658      	mov	r0, fp
 8007890:	f000 fb72 	bl	8007f78 <__mcmp>
 8007894:	4602      	mov	r2, r0
 8007896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007898:	4639      	mov	r1, r7
 800789a:	4628      	mov	r0, r5
 800789c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80078a0:	f000 f92c 	bl	8007afc <_Bfree>
 80078a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078a8:	9f08      	ldr	r7, [sp, #32]
 80078aa:	ea43 0102 	orr.w	r1, r3, r2
 80078ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b0:	430b      	orrs	r3, r1
 80078b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b4:	d10d      	bne.n	80078d2 <_dtoa_r+0xa82>
 80078b6:	2b39      	cmp	r3, #57	; 0x39
 80078b8:	d029      	beq.n	800790e <_dtoa_r+0xabe>
 80078ba:	f1b9 0f00 	cmp.w	r9, #0
 80078be:	dd01      	ble.n	80078c4 <_dtoa_r+0xa74>
 80078c0:	9b06      	ldr	r3, [sp, #24]
 80078c2:	3331      	adds	r3, #49	; 0x31
 80078c4:	9a04      	ldr	r2, [sp, #16]
 80078c6:	7013      	strb	r3, [r2, #0]
 80078c8:	e776      	b.n	80077b8 <_dtoa_r+0x968>
 80078ca:	4630      	mov	r0, r6
 80078cc:	e7b9      	b.n	8007842 <_dtoa_r+0x9f2>
 80078ce:	2201      	movs	r2, #1
 80078d0:	e7e2      	b.n	8007898 <_dtoa_r+0xa48>
 80078d2:	f1b9 0f00 	cmp.w	r9, #0
 80078d6:	db06      	blt.n	80078e6 <_dtoa_r+0xa96>
 80078d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80078da:	ea41 0909 	orr.w	r9, r1, r9
 80078de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078e0:	ea59 0101 	orrs.w	r1, r9, r1
 80078e4:	d120      	bne.n	8007928 <_dtoa_r+0xad8>
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	ddec      	ble.n	80078c4 <_dtoa_r+0xa74>
 80078ea:	4659      	mov	r1, fp
 80078ec:	2201      	movs	r2, #1
 80078ee:	4628      	mov	r0, r5
 80078f0:	9308      	str	r3, [sp, #32]
 80078f2:	f000 fad1 	bl	8007e98 <__lshift>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4683      	mov	fp, r0
 80078fa:	f000 fb3d 	bl	8007f78 <__mcmp>
 80078fe:	2800      	cmp	r0, #0
 8007900:	9b08      	ldr	r3, [sp, #32]
 8007902:	dc02      	bgt.n	800790a <_dtoa_r+0xaba>
 8007904:	d1de      	bne.n	80078c4 <_dtoa_r+0xa74>
 8007906:	07da      	lsls	r2, r3, #31
 8007908:	d5dc      	bpl.n	80078c4 <_dtoa_r+0xa74>
 800790a:	2b39      	cmp	r3, #57	; 0x39
 800790c:	d1d8      	bne.n	80078c0 <_dtoa_r+0xa70>
 800790e:	2339      	movs	r3, #57	; 0x39
 8007910:	9a04      	ldr	r2, [sp, #16]
 8007912:	7013      	strb	r3, [r2, #0]
 8007914:	463b      	mov	r3, r7
 8007916:	461f      	mov	r7, r3
 8007918:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800791c:	3b01      	subs	r3, #1
 800791e:	2a39      	cmp	r2, #57	; 0x39
 8007920:	d050      	beq.n	80079c4 <_dtoa_r+0xb74>
 8007922:	3201      	adds	r2, #1
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	e747      	b.n	80077b8 <_dtoa_r+0x968>
 8007928:	2a00      	cmp	r2, #0
 800792a:	dd03      	ble.n	8007934 <_dtoa_r+0xae4>
 800792c:	2b39      	cmp	r3, #57	; 0x39
 800792e:	d0ee      	beq.n	800790e <_dtoa_r+0xabe>
 8007930:	3301      	adds	r3, #1
 8007932:	e7c7      	b.n	80078c4 <_dtoa_r+0xa74>
 8007934:	9a08      	ldr	r2, [sp, #32]
 8007936:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007938:	f802 3c01 	strb.w	r3, [r2, #-1]
 800793c:	428a      	cmp	r2, r1
 800793e:	d02a      	beq.n	8007996 <_dtoa_r+0xb46>
 8007940:	4659      	mov	r1, fp
 8007942:	2300      	movs	r3, #0
 8007944:	220a      	movs	r2, #10
 8007946:	4628      	mov	r0, r5
 8007948:	f000 f8fa 	bl	8007b40 <__multadd>
 800794c:	45b0      	cmp	r8, r6
 800794e:	4683      	mov	fp, r0
 8007950:	f04f 0300 	mov.w	r3, #0
 8007954:	f04f 020a 	mov.w	r2, #10
 8007958:	4641      	mov	r1, r8
 800795a:	4628      	mov	r0, r5
 800795c:	d107      	bne.n	800796e <_dtoa_r+0xb1e>
 800795e:	f000 f8ef 	bl	8007b40 <__multadd>
 8007962:	4680      	mov	r8, r0
 8007964:	4606      	mov	r6, r0
 8007966:	9b08      	ldr	r3, [sp, #32]
 8007968:	3301      	adds	r3, #1
 800796a:	9308      	str	r3, [sp, #32]
 800796c:	e775      	b.n	800785a <_dtoa_r+0xa0a>
 800796e:	f000 f8e7 	bl	8007b40 <__multadd>
 8007972:	4631      	mov	r1, r6
 8007974:	4680      	mov	r8, r0
 8007976:	2300      	movs	r3, #0
 8007978:	220a      	movs	r2, #10
 800797a:	4628      	mov	r0, r5
 800797c:	f000 f8e0 	bl	8007b40 <__multadd>
 8007980:	4606      	mov	r6, r0
 8007982:	e7f0      	b.n	8007966 <_dtoa_r+0xb16>
 8007984:	f1b9 0f00 	cmp.w	r9, #0
 8007988:	bfcc      	ite	gt
 800798a:	464f      	movgt	r7, r9
 800798c:	2701      	movle	r7, #1
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	9a03      	ldr	r2, [sp, #12]
 8007994:	4417      	add	r7, r2
 8007996:	4659      	mov	r1, fp
 8007998:	2201      	movs	r2, #1
 800799a:	4628      	mov	r0, r5
 800799c:	9308      	str	r3, [sp, #32]
 800799e:	f000 fa7b 	bl	8007e98 <__lshift>
 80079a2:	4621      	mov	r1, r4
 80079a4:	4683      	mov	fp, r0
 80079a6:	f000 fae7 	bl	8007f78 <__mcmp>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	dcb2      	bgt.n	8007914 <_dtoa_r+0xac4>
 80079ae:	d102      	bne.n	80079b6 <_dtoa_r+0xb66>
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	07db      	lsls	r3, r3, #31
 80079b4:	d4ae      	bmi.n	8007914 <_dtoa_r+0xac4>
 80079b6:	463b      	mov	r3, r7
 80079b8:	461f      	mov	r7, r3
 80079ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079be:	2a30      	cmp	r2, #48	; 0x30
 80079c0:	d0fa      	beq.n	80079b8 <_dtoa_r+0xb68>
 80079c2:	e6f9      	b.n	80077b8 <_dtoa_r+0x968>
 80079c4:	9a03      	ldr	r2, [sp, #12]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d1a5      	bne.n	8007916 <_dtoa_r+0xac6>
 80079ca:	2331      	movs	r3, #49	; 0x31
 80079cc:	f10a 0a01 	add.w	sl, sl, #1
 80079d0:	e779      	b.n	80078c6 <_dtoa_r+0xa76>
 80079d2:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <_dtoa_r+0xbd4>)
 80079d4:	f7ff baa8 	b.w	8006f28 <_dtoa_r+0xd8>
 80079d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f47f aa81 	bne.w	8006ee2 <_dtoa_r+0x92>
 80079e0:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <_dtoa_r+0xbd8>)
 80079e2:	f7ff baa1 	b.w	8006f28 <_dtoa_r+0xd8>
 80079e6:	f1b9 0f00 	cmp.w	r9, #0
 80079ea:	dc03      	bgt.n	80079f4 <_dtoa_r+0xba4>
 80079ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	f73f aecb 	bgt.w	800778a <_dtoa_r+0x93a>
 80079f4:	9f03      	ldr	r7, [sp, #12]
 80079f6:	4621      	mov	r1, r4
 80079f8:	4658      	mov	r0, fp
 80079fa:	f7ff f99b 	bl	8006d34 <quorem>
 80079fe:	9a03      	ldr	r2, [sp, #12]
 8007a00:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a04:	f807 3b01 	strb.w	r3, [r7], #1
 8007a08:	1aba      	subs	r2, r7, r2
 8007a0a:	4591      	cmp	r9, r2
 8007a0c:	ddba      	ble.n	8007984 <_dtoa_r+0xb34>
 8007a0e:	4659      	mov	r1, fp
 8007a10:	2300      	movs	r3, #0
 8007a12:	220a      	movs	r2, #10
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 f893 	bl	8007b40 <__multadd>
 8007a1a:	4683      	mov	fp, r0
 8007a1c:	e7eb      	b.n	80079f6 <_dtoa_r+0xba6>
 8007a1e:	bf00      	nop
 8007a20:	0800998f 	.word	0x0800998f
 8007a24:	080098ec 	.word	0x080098ec
 8007a28:	08009910 	.word	0x08009910

08007a2c <_localeconv_r>:
 8007a2c:	4800      	ldr	r0, [pc, #0]	; (8007a30 <_localeconv_r+0x4>)
 8007a2e:	4770      	bx	lr
 8007a30:	200001fc 	.word	0x200001fc

08007a34 <malloc>:
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <malloc+0xc>)
 8007a36:	4601      	mov	r1, r0
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f000 bc1d 	b.w	8008278 <_malloc_r>
 8007a3e:	bf00      	nop
 8007a40:	200000a8 	.word	0x200000a8

08007a44 <memchr>:
 8007a44:	4603      	mov	r3, r0
 8007a46:	b510      	push	{r4, lr}
 8007a48:	b2c9      	uxtb	r1, r1
 8007a4a:	4402      	add	r2, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	d101      	bne.n	8007a56 <memchr+0x12>
 8007a52:	2000      	movs	r0, #0
 8007a54:	e003      	b.n	8007a5e <memchr+0x1a>
 8007a56:	7804      	ldrb	r4, [r0, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	428c      	cmp	r4, r1
 8007a5c:	d1f6      	bne.n	8007a4c <memchr+0x8>
 8007a5e:	bd10      	pop	{r4, pc}

08007a60 <memcpy>:
 8007a60:	440a      	add	r2, r1
 8007a62:	4291      	cmp	r1, r2
 8007a64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a68:	d100      	bne.n	8007a6c <memcpy+0xc>
 8007a6a:	4770      	bx	lr
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a72:	4291      	cmp	r1, r2
 8007a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a78:	d1f9      	bne.n	8007a6e <memcpy+0xe>
 8007a7a:	bd10      	pop	{r4, pc}

08007a7c <_Balloc>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a80:	4604      	mov	r4, r0
 8007a82:	460d      	mov	r5, r1
 8007a84:	b976      	cbnz	r6, 8007aa4 <_Balloc+0x28>
 8007a86:	2010      	movs	r0, #16
 8007a88:	f7ff ffd4 	bl	8007a34 <malloc>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	6260      	str	r0, [r4, #36]	; 0x24
 8007a90:	b920      	cbnz	r0, 8007a9c <_Balloc+0x20>
 8007a92:	2166      	movs	r1, #102	; 0x66
 8007a94:	4b17      	ldr	r3, [pc, #92]	; (8007af4 <_Balloc+0x78>)
 8007a96:	4818      	ldr	r0, [pc, #96]	; (8007af8 <_Balloc+0x7c>)
 8007a98:	f000 fdce 	bl	8008638 <__assert_func>
 8007a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aa0:	6006      	str	r6, [r0, #0]
 8007aa2:	60c6      	str	r6, [r0, #12]
 8007aa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007aa6:	68f3      	ldr	r3, [r6, #12]
 8007aa8:	b183      	cbz	r3, 8007acc <_Balloc+0x50>
 8007aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ab2:	b9b8      	cbnz	r0, 8007ae4 <_Balloc+0x68>
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	fa01 f605 	lsl.w	r6, r1, r5
 8007aba:	1d72      	adds	r2, r6, #5
 8007abc:	4620      	mov	r0, r4
 8007abe:	0092      	lsls	r2, r2, #2
 8007ac0:	f000 fb5e 	bl	8008180 <_calloc_r>
 8007ac4:	b160      	cbz	r0, 8007ae0 <_Balloc+0x64>
 8007ac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aca:	e00e      	b.n	8007aea <_Balloc+0x6e>
 8007acc:	2221      	movs	r2, #33	; 0x21
 8007ace:	2104      	movs	r1, #4
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 fb55 	bl	8008180 <_calloc_r>
 8007ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad8:	60f0      	str	r0, [r6, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e4      	bne.n	8007aaa <_Balloc+0x2e>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	6802      	ldr	r2, [r0, #0]
 8007ae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aea:	2300      	movs	r3, #0
 8007aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007af0:	e7f7      	b.n	8007ae2 <_Balloc+0x66>
 8007af2:	bf00      	nop
 8007af4:	0800991d 	.word	0x0800991d
 8007af8:	080099a0 	.word	0x080099a0

08007afc <_Bfree>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b00:	4605      	mov	r5, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	b976      	cbnz	r6, 8007b24 <_Bfree+0x28>
 8007b06:	2010      	movs	r0, #16
 8007b08:	f7ff ff94 	bl	8007a34 <malloc>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	6268      	str	r0, [r5, #36]	; 0x24
 8007b10:	b920      	cbnz	r0, 8007b1c <_Bfree+0x20>
 8007b12:	218a      	movs	r1, #138	; 0x8a
 8007b14:	4b08      	ldr	r3, [pc, #32]	; (8007b38 <_Bfree+0x3c>)
 8007b16:	4809      	ldr	r0, [pc, #36]	; (8007b3c <_Bfree+0x40>)
 8007b18:	f000 fd8e 	bl	8008638 <__assert_func>
 8007b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b20:	6006      	str	r6, [r0, #0]
 8007b22:	60c6      	str	r6, [r0, #12]
 8007b24:	b13c      	cbz	r4, 8007b36 <_Bfree+0x3a>
 8007b26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b28:	6862      	ldr	r2, [r4, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b30:	6021      	str	r1, [r4, #0]
 8007b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	0800991d 	.word	0x0800991d
 8007b3c:	080099a0 	.word	0x080099a0

08007b40 <__multadd>:
 8007b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b44:	4607      	mov	r7, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	461e      	mov	r6, r3
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	690d      	ldr	r5, [r1, #16]
 8007b4e:	f101 0c14 	add.w	ip, r1, #20
 8007b52:	f8dc 3000 	ldr.w	r3, [ip]
 8007b56:	3001      	adds	r0, #1
 8007b58:	b299      	uxth	r1, r3
 8007b5a:	fb02 6101 	mla	r1, r2, r1, r6
 8007b5e:	0c1e      	lsrs	r6, r3, #16
 8007b60:	0c0b      	lsrs	r3, r1, #16
 8007b62:	fb02 3306 	mla	r3, r2, r6, r3
 8007b66:	b289      	uxth	r1, r1
 8007b68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b6c:	4285      	cmp	r5, r0
 8007b6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b72:	f84c 1b04 	str.w	r1, [ip], #4
 8007b76:	dcec      	bgt.n	8007b52 <__multadd+0x12>
 8007b78:	b30e      	cbz	r6, 8007bbe <__multadd+0x7e>
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	42ab      	cmp	r3, r5
 8007b7e:	dc19      	bgt.n	8007bb4 <__multadd+0x74>
 8007b80:	6861      	ldr	r1, [r4, #4]
 8007b82:	4638      	mov	r0, r7
 8007b84:	3101      	adds	r1, #1
 8007b86:	f7ff ff79 	bl	8007a7c <_Balloc>
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	b928      	cbnz	r0, 8007b9a <__multadd+0x5a>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	21b5      	movs	r1, #181	; 0xb5
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <__multadd+0x84>)
 8007b94:	480c      	ldr	r0, [pc, #48]	; (8007bc8 <__multadd+0x88>)
 8007b96:	f000 fd4f 	bl	8008638 <__assert_func>
 8007b9a:	6922      	ldr	r2, [r4, #16]
 8007b9c:	f104 010c 	add.w	r1, r4, #12
 8007ba0:	3202      	adds	r2, #2
 8007ba2:	0092      	lsls	r2, r2, #2
 8007ba4:	300c      	adds	r0, #12
 8007ba6:	f7ff ff5b 	bl	8007a60 <memcpy>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7ff ffa5 	bl	8007afc <_Bfree>
 8007bb2:	4644      	mov	r4, r8
 8007bb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bb8:	3501      	adds	r5, #1
 8007bba:	615e      	str	r6, [r3, #20]
 8007bbc:	6125      	str	r5, [r4, #16]
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc4:	0800998f 	.word	0x0800998f
 8007bc8:	080099a0 	.word	0x080099a0

08007bcc <__hi0bits>:
 8007bcc:	0c02      	lsrs	r2, r0, #16
 8007bce:	0412      	lsls	r2, r2, #16
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	b9ca      	cbnz	r2, 8007c08 <__hi0bits+0x3c>
 8007bd4:	0403      	lsls	r3, r0, #16
 8007bd6:	2010      	movs	r0, #16
 8007bd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007bdc:	bf04      	itt	eq
 8007bde:	021b      	lsleq	r3, r3, #8
 8007be0:	3008      	addeq	r0, #8
 8007be2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007be6:	bf04      	itt	eq
 8007be8:	011b      	lsleq	r3, r3, #4
 8007bea:	3004      	addeq	r0, #4
 8007bec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007bf0:	bf04      	itt	eq
 8007bf2:	009b      	lsleq	r3, r3, #2
 8007bf4:	3002      	addeq	r0, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	db05      	blt.n	8007c06 <__hi0bits+0x3a>
 8007bfa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007bfe:	f100 0001 	add.w	r0, r0, #1
 8007c02:	bf08      	it	eq
 8007c04:	2020      	moveq	r0, #32
 8007c06:	4770      	bx	lr
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e7e5      	b.n	8007bd8 <__hi0bits+0xc>

08007c0c <__lo0bits>:
 8007c0c:	6803      	ldr	r3, [r0, #0]
 8007c0e:	4602      	mov	r2, r0
 8007c10:	f013 0007 	ands.w	r0, r3, #7
 8007c14:	d00b      	beq.n	8007c2e <__lo0bits+0x22>
 8007c16:	07d9      	lsls	r1, r3, #31
 8007c18:	d421      	bmi.n	8007c5e <__lo0bits+0x52>
 8007c1a:	0798      	lsls	r0, r3, #30
 8007c1c:	bf49      	itett	mi
 8007c1e:	085b      	lsrmi	r3, r3, #1
 8007c20:	089b      	lsrpl	r3, r3, #2
 8007c22:	2001      	movmi	r0, #1
 8007c24:	6013      	strmi	r3, [r2, #0]
 8007c26:	bf5c      	itt	pl
 8007c28:	2002      	movpl	r0, #2
 8007c2a:	6013      	strpl	r3, [r2, #0]
 8007c2c:	4770      	bx	lr
 8007c2e:	b299      	uxth	r1, r3
 8007c30:	b909      	cbnz	r1, 8007c36 <__lo0bits+0x2a>
 8007c32:	2010      	movs	r0, #16
 8007c34:	0c1b      	lsrs	r3, r3, #16
 8007c36:	b2d9      	uxtb	r1, r3
 8007c38:	b909      	cbnz	r1, 8007c3e <__lo0bits+0x32>
 8007c3a:	3008      	adds	r0, #8
 8007c3c:	0a1b      	lsrs	r3, r3, #8
 8007c3e:	0719      	lsls	r1, r3, #28
 8007c40:	bf04      	itt	eq
 8007c42:	091b      	lsreq	r3, r3, #4
 8007c44:	3004      	addeq	r0, #4
 8007c46:	0799      	lsls	r1, r3, #30
 8007c48:	bf04      	itt	eq
 8007c4a:	089b      	lsreq	r3, r3, #2
 8007c4c:	3002      	addeq	r0, #2
 8007c4e:	07d9      	lsls	r1, r3, #31
 8007c50:	d403      	bmi.n	8007c5a <__lo0bits+0x4e>
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	f100 0001 	add.w	r0, r0, #1
 8007c58:	d003      	beq.n	8007c62 <__lo0bits+0x56>
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	4770      	bx	lr
 8007c5e:	2000      	movs	r0, #0
 8007c60:	4770      	bx	lr
 8007c62:	2020      	movs	r0, #32
 8007c64:	4770      	bx	lr
	...

08007c68 <__i2b>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	f7ff ff05 	bl	8007a7c <_Balloc>
 8007c72:	4602      	mov	r2, r0
 8007c74:	b928      	cbnz	r0, 8007c82 <__i2b+0x1a>
 8007c76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c7a:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <__i2b+0x24>)
 8007c7c:	4804      	ldr	r0, [pc, #16]	; (8007c90 <__i2b+0x28>)
 8007c7e:	f000 fcdb 	bl	8008638 <__assert_func>
 8007c82:	2301      	movs	r3, #1
 8007c84:	6144      	str	r4, [r0, #20]
 8007c86:	6103      	str	r3, [r0, #16]
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	0800998f 	.word	0x0800998f
 8007c90:	080099a0 	.word	0x080099a0

08007c94 <__multiply>:
 8007c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c98:	4691      	mov	r9, r2
 8007c9a:	690a      	ldr	r2, [r1, #16]
 8007c9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	bfbe      	ittt	lt
 8007ca6:	460b      	movlt	r3, r1
 8007ca8:	464c      	movlt	r4, r9
 8007caa:	4699      	movlt	r9, r3
 8007cac:	6927      	ldr	r7, [r4, #16]
 8007cae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	6861      	ldr	r1, [r4, #4]
 8007cb6:	eb07 060a 	add.w	r6, r7, sl
 8007cba:	42b3      	cmp	r3, r6
 8007cbc:	b085      	sub	sp, #20
 8007cbe:	bfb8      	it	lt
 8007cc0:	3101      	addlt	r1, #1
 8007cc2:	f7ff fedb 	bl	8007a7c <_Balloc>
 8007cc6:	b930      	cbnz	r0, 8007cd6 <__multiply+0x42>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	f240 115d 	movw	r1, #349	; 0x15d
 8007cce:	4b43      	ldr	r3, [pc, #268]	; (8007ddc <__multiply+0x148>)
 8007cd0:	4843      	ldr	r0, [pc, #268]	; (8007de0 <__multiply+0x14c>)
 8007cd2:	f000 fcb1 	bl	8008638 <__assert_func>
 8007cd6:	f100 0514 	add.w	r5, r0, #20
 8007cda:	462b      	mov	r3, r5
 8007cdc:	2200      	movs	r2, #0
 8007cde:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ce2:	4543      	cmp	r3, r8
 8007ce4:	d321      	bcc.n	8007d2a <__multiply+0x96>
 8007ce6:	f104 0314 	add.w	r3, r4, #20
 8007cea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cee:	f109 0314 	add.w	r3, r9, #20
 8007cf2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cf6:	9202      	str	r2, [sp, #8]
 8007cf8:	1b3a      	subs	r2, r7, r4
 8007cfa:	3a15      	subs	r2, #21
 8007cfc:	f022 0203 	bic.w	r2, r2, #3
 8007d00:	3204      	adds	r2, #4
 8007d02:	f104 0115 	add.w	r1, r4, #21
 8007d06:	428f      	cmp	r7, r1
 8007d08:	bf38      	it	cc
 8007d0a:	2204      	movcc	r2, #4
 8007d0c:	9201      	str	r2, [sp, #4]
 8007d0e:	9a02      	ldr	r2, [sp, #8]
 8007d10:	9303      	str	r3, [sp, #12]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d80c      	bhi.n	8007d30 <__multiply+0x9c>
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	dd03      	ble.n	8007d22 <__multiply+0x8e>
 8007d1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d059      	beq.n	8007dd6 <__multiply+0x142>
 8007d22:	6106      	str	r6, [r0, #16]
 8007d24:	b005      	add	sp, #20
 8007d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2a:	f843 2b04 	str.w	r2, [r3], #4
 8007d2e:	e7d8      	b.n	8007ce2 <__multiply+0x4e>
 8007d30:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d34:	f1ba 0f00 	cmp.w	sl, #0
 8007d38:	d023      	beq.n	8007d82 <__multiply+0xee>
 8007d3a:	46a9      	mov	r9, r5
 8007d3c:	f04f 0c00 	mov.w	ip, #0
 8007d40:	f104 0e14 	add.w	lr, r4, #20
 8007d44:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d48:	f8d9 1000 	ldr.w	r1, [r9]
 8007d4c:	fa1f fb82 	uxth.w	fp, r2
 8007d50:	b289      	uxth	r1, r1
 8007d52:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d56:	4461      	add	r1, ip
 8007d58:	f8d9 c000 	ldr.w	ip, [r9]
 8007d5c:	0c12      	lsrs	r2, r2, #16
 8007d5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007d62:	fb0a c202 	mla	r2, sl, r2, ip
 8007d66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d6a:	b289      	uxth	r1, r1
 8007d6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d70:	4577      	cmp	r7, lr
 8007d72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d76:	f849 1b04 	str.w	r1, [r9], #4
 8007d7a:	d8e3      	bhi.n	8007d44 <__multiply+0xb0>
 8007d7c:	9a01      	ldr	r2, [sp, #4]
 8007d7e:	f845 c002 	str.w	ip, [r5, r2]
 8007d82:	9a03      	ldr	r2, [sp, #12]
 8007d84:	3304      	adds	r3, #4
 8007d86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d8a:	f1b9 0f00 	cmp.w	r9, #0
 8007d8e:	d020      	beq.n	8007dd2 <__multiply+0x13e>
 8007d90:	46ae      	mov	lr, r5
 8007d92:	f04f 0a00 	mov.w	sl, #0
 8007d96:	6829      	ldr	r1, [r5, #0]
 8007d98:	f104 0c14 	add.w	ip, r4, #20
 8007d9c:	f8bc b000 	ldrh.w	fp, [ip]
 8007da0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007da4:	b289      	uxth	r1, r1
 8007da6:	fb09 220b 	mla	r2, r9, fp, r2
 8007daa:	4492      	add	sl, r2
 8007dac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007db0:	f84e 1b04 	str.w	r1, [lr], #4
 8007db4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007db8:	f8be 1000 	ldrh.w	r1, [lr]
 8007dbc:	0c12      	lsrs	r2, r2, #16
 8007dbe:	fb09 1102 	mla	r1, r9, r2, r1
 8007dc2:	4567      	cmp	r7, ip
 8007dc4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007dc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dcc:	d8e6      	bhi.n	8007d9c <__multiply+0x108>
 8007dce:	9a01      	ldr	r2, [sp, #4]
 8007dd0:	50a9      	str	r1, [r5, r2]
 8007dd2:	3504      	adds	r5, #4
 8007dd4:	e79b      	b.n	8007d0e <__multiply+0x7a>
 8007dd6:	3e01      	subs	r6, #1
 8007dd8:	e79d      	b.n	8007d16 <__multiply+0x82>
 8007dda:	bf00      	nop
 8007ddc:	0800998f 	.word	0x0800998f
 8007de0:	080099a0 	.word	0x080099a0

08007de4 <__pow5mult>:
 8007de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de8:	4615      	mov	r5, r2
 8007dea:	f012 0203 	ands.w	r2, r2, #3
 8007dee:	4606      	mov	r6, r0
 8007df0:	460f      	mov	r7, r1
 8007df2:	d007      	beq.n	8007e04 <__pow5mult+0x20>
 8007df4:	4c25      	ldr	r4, [pc, #148]	; (8007e8c <__pow5mult+0xa8>)
 8007df6:	3a01      	subs	r2, #1
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dfe:	f7ff fe9f 	bl	8007b40 <__multadd>
 8007e02:	4607      	mov	r7, r0
 8007e04:	10ad      	asrs	r5, r5, #2
 8007e06:	d03d      	beq.n	8007e84 <__pow5mult+0xa0>
 8007e08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e0a:	b97c      	cbnz	r4, 8007e2c <__pow5mult+0x48>
 8007e0c:	2010      	movs	r0, #16
 8007e0e:	f7ff fe11 	bl	8007a34 <malloc>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6270      	str	r0, [r6, #36]	; 0x24
 8007e16:	b928      	cbnz	r0, 8007e24 <__pow5mult+0x40>
 8007e18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <__pow5mult+0xac>)
 8007e1e:	481d      	ldr	r0, [pc, #116]	; (8007e94 <__pow5mult+0xb0>)
 8007e20:	f000 fc0a 	bl	8008638 <__assert_func>
 8007e24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e28:	6004      	str	r4, [r0, #0]
 8007e2a:	60c4      	str	r4, [r0, #12]
 8007e2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e34:	b94c      	cbnz	r4, 8007e4a <__pow5mult+0x66>
 8007e36:	f240 2171 	movw	r1, #625	; 0x271
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7ff ff14 	bl	8007c68 <__i2b>
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e48:	6003      	str	r3, [r0, #0]
 8007e4a:	f04f 0900 	mov.w	r9, #0
 8007e4e:	07eb      	lsls	r3, r5, #31
 8007e50:	d50a      	bpl.n	8007e68 <__pow5mult+0x84>
 8007e52:	4639      	mov	r1, r7
 8007e54:	4622      	mov	r2, r4
 8007e56:	4630      	mov	r0, r6
 8007e58:	f7ff ff1c 	bl	8007c94 <__multiply>
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	4639      	mov	r1, r7
 8007e60:	4630      	mov	r0, r6
 8007e62:	f7ff fe4b 	bl	8007afc <_Bfree>
 8007e66:	4647      	mov	r7, r8
 8007e68:	106d      	asrs	r5, r5, #1
 8007e6a:	d00b      	beq.n	8007e84 <__pow5mult+0xa0>
 8007e6c:	6820      	ldr	r0, [r4, #0]
 8007e6e:	b938      	cbnz	r0, 8007e80 <__pow5mult+0x9c>
 8007e70:	4622      	mov	r2, r4
 8007e72:	4621      	mov	r1, r4
 8007e74:	4630      	mov	r0, r6
 8007e76:	f7ff ff0d 	bl	8007c94 <__multiply>
 8007e7a:	6020      	str	r0, [r4, #0]
 8007e7c:	f8c0 9000 	str.w	r9, [r0]
 8007e80:	4604      	mov	r4, r0
 8007e82:	e7e4      	b.n	8007e4e <__pow5mult+0x6a>
 8007e84:	4638      	mov	r0, r7
 8007e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8a:	bf00      	nop
 8007e8c:	08009af0 	.word	0x08009af0
 8007e90:	0800991d 	.word	0x0800991d
 8007e94:	080099a0 	.word	0x080099a0

08007e98 <__lshift>:
 8007e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	4691      	mov	r9, r2
 8007ea2:	6923      	ldr	r3, [r4, #16]
 8007ea4:	6849      	ldr	r1, [r1, #4]
 8007ea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eaa:	68a3      	ldr	r3, [r4, #8]
 8007eac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eb0:	f108 0601 	add.w	r6, r8, #1
 8007eb4:	42b3      	cmp	r3, r6
 8007eb6:	db0b      	blt.n	8007ed0 <__lshift+0x38>
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7ff fddf 	bl	8007a7c <_Balloc>
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	b948      	cbnz	r0, 8007ed6 <__lshift+0x3e>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ec8:	4b29      	ldr	r3, [pc, #164]	; (8007f70 <__lshift+0xd8>)
 8007eca:	482a      	ldr	r0, [pc, #168]	; (8007f74 <__lshift+0xdc>)
 8007ecc:	f000 fbb4 	bl	8008638 <__assert_func>
 8007ed0:	3101      	adds	r1, #1
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	e7ee      	b.n	8007eb4 <__lshift+0x1c>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f100 0114 	add.w	r1, r0, #20
 8007edc:	f100 0210 	add.w	r2, r0, #16
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	4553      	cmp	r3, sl
 8007ee4:	db37      	blt.n	8007f56 <__lshift+0xbe>
 8007ee6:	6920      	ldr	r0, [r4, #16]
 8007ee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eec:	f104 0314 	add.w	r3, r4, #20
 8007ef0:	f019 091f 	ands.w	r9, r9, #31
 8007ef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ef8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007efc:	d02f      	beq.n	8007f5e <__lshift+0xc6>
 8007efe:	468a      	mov	sl, r1
 8007f00:	f04f 0c00 	mov.w	ip, #0
 8007f04:	f1c9 0e20 	rsb	lr, r9, #32
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	fa02 f209 	lsl.w	r2, r2, r9
 8007f0e:	ea42 020c 	orr.w	r2, r2, ip
 8007f12:	f84a 2b04 	str.w	r2, [sl], #4
 8007f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1a:	4298      	cmp	r0, r3
 8007f1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f20:	d8f2      	bhi.n	8007f08 <__lshift+0x70>
 8007f22:	1b03      	subs	r3, r0, r4
 8007f24:	3b15      	subs	r3, #21
 8007f26:	f023 0303 	bic.w	r3, r3, #3
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	f104 0215 	add.w	r2, r4, #21
 8007f30:	4290      	cmp	r0, r2
 8007f32:	bf38      	it	cc
 8007f34:	2304      	movcc	r3, #4
 8007f36:	f841 c003 	str.w	ip, [r1, r3]
 8007f3a:	f1bc 0f00 	cmp.w	ip, #0
 8007f3e:	d001      	beq.n	8007f44 <__lshift+0xac>
 8007f40:	f108 0602 	add.w	r6, r8, #2
 8007f44:	3e01      	subs	r6, #1
 8007f46:	4638      	mov	r0, r7
 8007f48:	4621      	mov	r1, r4
 8007f4a:	612e      	str	r6, [r5, #16]
 8007f4c:	f7ff fdd6 	bl	8007afc <_Bfree>
 8007f50:	4628      	mov	r0, r5
 8007f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f56:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	e7c1      	b.n	8007ee2 <__lshift+0x4a>
 8007f5e:	3904      	subs	r1, #4
 8007f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f64:	4298      	cmp	r0, r3
 8007f66:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f6a:	d8f9      	bhi.n	8007f60 <__lshift+0xc8>
 8007f6c:	e7ea      	b.n	8007f44 <__lshift+0xac>
 8007f6e:	bf00      	nop
 8007f70:	0800998f 	.word	0x0800998f
 8007f74:	080099a0 	.word	0x080099a0

08007f78 <__mcmp>:
 8007f78:	4603      	mov	r3, r0
 8007f7a:	690a      	ldr	r2, [r1, #16]
 8007f7c:	6900      	ldr	r0, [r0, #16]
 8007f7e:	b530      	push	{r4, r5, lr}
 8007f80:	1a80      	subs	r0, r0, r2
 8007f82:	d10d      	bne.n	8007fa0 <__mcmp+0x28>
 8007f84:	3314      	adds	r3, #20
 8007f86:	3114      	adds	r1, #20
 8007f88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f98:	4295      	cmp	r5, r2
 8007f9a:	d002      	beq.n	8007fa2 <__mcmp+0x2a>
 8007f9c:	d304      	bcc.n	8007fa8 <__mcmp+0x30>
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	bd30      	pop	{r4, r5, pc}
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	d3f4      	bcc.n	8007f90 <__mcmp+0x18>
 8007fa6:	e7fb      	b.n	8007fa0 <__mcmp+0x28>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fac:	e7f8      	b.n	8007fa0 <__mcmp+0x28>
	...

08007fb0 <__mdiff>:
 8007fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	460d      	mov	r5, r1
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4628      	mov	r0, r5
 8007fbc:	4614      	mov	r4, r2
 8007fbe:	f7ff ffdb 	bl	8007f78 <__mcmp>
 8007fc2:	1e06      	subs	r6, r0, #0
 8007fc4:	d111      	bne.n	8007fea <__mdiff+0x3a>
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f7ff fd57 	bl	8007a7c <_Balloc>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	b928      	cbnz	r0, 8007fde <__mdiff+0x2e>
 8007fd2:	f240 2132 	movw	r1, #562	; 0x232
 8007fd6:	4b3a      	ldr	r3, [pc, #232]	; (80080c0 <__mdiff+0x110>)
 8007fd8:	483a      	ldr	r0, [pc, #232]	; (80080c4 <__mdiff+0x114>)
 8007fda:	f000 fb2d 	bl	8008638 <__assert_func>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fea:	bfa4      	itt	ge
 8007fec:	4623      	movge	r3, r4
 8007fee:	462c      	movge	r4, r5
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	6861      	ldr	r1, [r4, #4]
 8007ff4:	bfa6      	itte	ge
 8007ff6:	461d      	movge	r5, r3
 8007ff8:	2600      	movge	r6, #0
 8007ffa:	2601      	movlt	r6, #1
 8007ffc:	f7ff fd3e 	bl	8007a7c <_Balloc>
 8008000:	4602      	mov	r2, r0
 8008002:	b918      	cbnz	r0, 800800c <__mdiff+0x5c>
 8008004:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008008:	4b2d      	ldr	r3, [pc, #180]	; (80080c0 <__mdiff+0x110>)
 800800a:	e7e5      	b.n	8007fd8 <__mdiff+0x28>
 800800c:	f102 0814 	add.w	r8, r2, #20
 8008010:	46c2      	mov	sl, r8
 8008012:	f04f 0c00 	mov.w	ip, #0
 8008016:	6927      	ldr	r7, [r4, #16]
 8008018:	60c6      	str	r6, [r0, #12]
 800801a:	692e      	ldr	r6, [r5, #16]
 800801c:	f104 0014 	add.w	r0, r4, #20
 8008020:	f105 0914 	add.w	r9, r5, #20
 8008024:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008028:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800802c:	3410      	adds	r4, #16
 800802e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008032:	f859 3b04 	ldr.w	r3, [r9], #4
 8008036:	fa1f f18b 	uxth.w	r1, fp
 800803a:	448c      	add	ip, r1
 800803c:	b299      	uxth	r1, r3
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	ebac 0101 	sub.w	r1, ip, r1
 8008044:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008048:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800804c:	b289      	uxth	r1, r1
 800804e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008052:	454e      	cmp	r6, r9
 8008054:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008058:	f84a 3b04 	str.w	r3, [sl], #4
 800805c:	d8e7      	bhi.n	800802e <__mdiff+0x7e>
 800805e:	1b73      	subs	r3, r6, r5
 8008060:	3b15      	subs	r3, #21
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	3515      	adds	r5, #21
 8008068:	3304      	adds	r3, #4
 800806a:	42ae      	cmp	r6, r5
 800806c:	bf38      	it	cc
 800806e:	2304      	movcc	r3, #4
 8008070:	4418      	add	r0, r3
 8008072:	4443      	add	r3, r8
 8008074:	461e      	mov	r6, r3
 8008076:	4605      	mov	r5, r0
 8008078:	4575      	cmp	r5, lr
 800807a:	d30e      	bcc.n	800809a <__mdiff+0xea>
 800807c:	f10e 0103 	add.w	r1, lr, #3
 8008080:	1a09      	subs	r1, r1, r0
 8008082:	f021 0103 	bic.w	r1, r1, #3
 8008086:	3803      	subs	r0, #3
 8008088:	4586      	cmp	lr, r0
 800808a:	bf38      	it	cc
 800808c:	2100      	movcc	r1, #0
 800808e:	4419      	add	r1, r3
 8008090:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008094:	b18b      	cbz	r3, 80080ba <__mdiff+0x10a>
 8008096:	6117      	str	r7, [r2, #16]
 8008098:	e7a4      	b.n	8007fe4 <__mdiff+0x34>
 800809a:	f855 8b04 	ldr.w	r8, [r5], #4
 800809e:	fa1f f188 	uxth.w	r1, r8
 80080a2:	4461      	add	r1, ip
 80080a4:	140c      	asrs	r4, r1, #16
 80080a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080aa:	b289      	uxth	r1, r1
 80080ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80080b4:	f846 1b04 	str.w	r1, [r6], #4
 80080b8:	e7de      	b.n	8008078 <__mdiff+0xc8>
 80080ba:	3f01      	subs	r7, #1
 80080bc:	e7e8      	b.n	8008090 <__mdiff+0xe0>
 80080be:	bf00      	nop
 80080c0:	0800998f 	.word	0x0800998f
 80080c4:	080099a0 	.word	0x080099a0

080080c8 <__d2b>:
 80080c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80080cc:	2101      	movs	r1, #1
 80080ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80080d2:	4690      	mov	r8, r2
 80080d4:	461d      	mov	r5, r3
 80080d6:	f7ff fcd1 	bl	8007a7c <_Balloc>
 80080da:	4604      	mov	r4, r0
 80080dc:	b930      	cbnz	r0, 80080ec <__d2b+0x24>
 80080de:	4602      	mov	r2, r0
 80080e0:	f240 310a 	movw	r1, #778	; 0x30a
 80080e4:	4b24      	ldr	r3, [pc, #144]	; (8008178 <__d2b+0xb0>)
 80080e6:	4825      	ldr	r0, [pc, #148]	; (800817c <__d2b+0xb4>)
 80080e8:	f000 faa6 	bl	8008638 <__assert_func>
 80080ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80080f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80080f4:	bb2d      	cbnz	r5, 8008142 <__d2b+0x7a>
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	f1b8 0300 	subs.w	r3, r8, #0
 80080fc:	d026      	beq.n	800814c <__d2b+0x84>
 80080fe:	4668      	mov	r0, sp
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	f7ff fd83 	bl	8007c0c <__lo0bits>
 8008106:	9900      	ldr	r1, [sp, #0]
 8008108:	b1f0      	cbz	r0, 8008148 <__d2b+0x80>
 800810a:	9a01      	ldr	r2, [sp, #4]
 800810c:	f1c0 0320 	rsb	r3, r0, #32
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	430b      	orrs	r3, r1
 8008116:	40c2      	lsrs	r2, r0
 8008118:	6163      	str	r3, [r4, #20]
 800811a:	9201      	str	r2, [sp, #4]
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	bf14      	ite	ne
 8008122:	2102      	movne	r1, #2
 8008124:	2101      	moveq	r1, #1
 8008126:	61a3      	str	r3, [r4, #24]
 8008128:	6121      	str	r1, [r4, #16]
 800812a:	b1c5      	cbz	r5, 800815e <__d2b+0x96>
 800812c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008130:	4405      	add	r5, r0
 8008132:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008136:	603d      	str	r5, [r7, #0]
 8008138:	6030      	str	r0, [r6, #0]
 800813a:	4620      	mov	r0, r4
 800813c:	b002      	add	sp, #8
 800813e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008146:	e7d6      	b.n	80080f6 <__d2b+0x2e>
 8008148:	6161      	str	r1, [r4, #20]
 800814a:	e7e7      	b.n	800811c <__d2b+0x54>
 800814c:	a801      	add	r0, sp, #4
 800814e:	f7ff fd5d 	bl	8007c0c <__lo0bits>
 8008152:	2101      	movs	r1, #1
 8008154:	9b01      	ldr	r3, [sp, #4]
 8008156:	6121      	str	r1, [r4, #16]
 8008158:	6163      	str	r3, [r4, #20]
 800815a:	3020      	adds	r0, #32
 800815c:	e7e5      	b.n	800812a <__d2b+0x62>
 800815e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008162:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008166:	6038      	str	r0, [r7, #0]
 8008168:	6918      	ldr	r0, [r3, #16]
 800816a:	f7ff fd2f 	bl	8007bcc <__hi0bits>
 800816e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008172:	6031      	str	r1, [r6, #0]
 8008174:	e7e1      	b.n	800813a <__d2b+0x72>
 8008176:	bf00      	nop
 8008178:	0800998f 	.word	0x0800998f
 800817c:	080099a0 	.word	0x080099a0

08008180 <_calloc_r>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	fba1 5402 	umull	r5, r4, r1, r2
 8008186:	b934      	cbnz	r4, 8008196 <_calloc_r+0x16>
 8008188:	4629      	mov	r1, r5
 800818a:	f000 f875 	bl	8008278 <_malloc_r>
 800818e:	4606      	mov	r6, r0
 8008190:	b928      	cbnz	r0, 800819e <_calloc_r+0x1e>
 8008192:	4630      	mov	r0, r6
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	220c      	movs	r2, #12
 8008198:	2600      	movs	r6, #0
 800819a:	6002      	str	r2, [r0, #0]
 800819c:	e7f9      	b.n	8008192 <_calloc_r+0x12>
 800819e:	462a      	mov	r2, r5
 80081a0:	4621      	mov	r1, r4
 80081a2:	f7fe f93f 	bl	8006424 <memset>
 80081a6:	e7f4      	b.n	8008192 <_calloc_r+0x12>

080081a8 <_free_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4605      	mov	r5, r0
 80081ac:	2900      	cmp	r1, #0
 80081ae:	d040      	beq.n	8008232 <_free_r+0x8a>
 80081b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081b4:	1f0c      	subs	r4, r1, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfb8      	it	lt
 80081ba:	18e4      	addlt	r4, r4, r3
 80081bc:	f000 fa98 	bl	80086f0 <__malloc_lock>
 80081c0:	4a1c      	ldr	r2, [pc, #112]	; (8008234 <_free_r+0x8c>)
 80081c2:	6813      	ldr	r3, [r2, #0]
 80081c4:	b933      	cbnz	r3, 80081d4 <_free_r+0x2c>
 80081c6:	6063      	str	r3, [r4, #4]
 80081c8:	6014      	str	r4, [r2, #0]
 80081ca:	4628      	mov	r0, r5
 80081cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081d0:	f000 ba94 	b.w	80086fc <__malloc_unlock>
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	d908      	bls.n	80081ea <_free_r+0x42>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	1821      	adds	r1, r4, r0
 80081dc:	428b      	cmp	r3, r1
 80081de:	bf01      	itttt	eq
 80081e0:	6819      	ldreq	r1, [r3, #0]
 80081e2:	685b      	ldreq	r3, [r3, #4]
 80081e4:	1809      	addeq	r1, r1, r0
 80081e6:	6021      	streq	r1, [r4, #0]
 80081e8:	e7ed      	b.n	80081c6 <_free_r+0x1e>
 80081ea:	461a      	mov	r2, r3
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	b10b      	cbz	r3, 80081f4 <_free_r+0x4c>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d9fa      	bls.n	80081ea <_free_r+0x42>
 80081f4:	6811      	ldr	r1, [r2, #0]
 80081f6:	1850      	adds	r0, r2, r1
 80081f8:	42a0      	cmp	r0, r4
 80081fa:	d10b      	bne.n	8008214 <_free_r+0x6c>
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	4401      	add	r1, r0
 8008200:	1850      	adds	r0, r2, r1
 8008202:	4283      	cmp	r3, r0
 8008204:	6011      	str	r1, [r2, #0]
 8008206:	d1e0      	bne.n	80081ca <_free_r+0x22>
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	4401      	add	r1, r0
 800820e:	6011      	str	r1, [r2, #0]
 8008210:	6053      	str	r3, [r2, #4]
 8008212:	e7da      	b.n	80081ca <_free_r+0x22>
 8008214:	d902      	bls.n	800821c <_free_r+0x74>
 8008216:	230c      	movs	r3, #12
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	e7d6      	b.n	80081ca <_free_r+0x22>
 800821c:	6820      	ldr	r0, [r4, #0]
 800821e:	1821      	adds	r1, r4, r0
 8008220:	428b      	cmp	r3, r1
 8008222:	bf01      	itttt	eq
 8008224:	6819      	ldreq	r1, [r3, #0]
 8008226:	685b      	ldreq	r3, [r3, #4]
 8008228:	1809      	addeq	r1, r1, r0
 800822a:	6021      	streq	r1, [r4, #0]
 800822c:	6063      	str	r3, [r4, #4]
 800822e:	6054      	str	r4, [r2, #4]
 8008230:	e7cb      	b.n	80081ca <_free_r+0x22>
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20000404 	.word	0x20000404

08008238 <sbrk_aligned>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	4e0e      	ldr	r6, [pc, #56]	; (8008274 <sbrk_aligned+0x3c>)
 800823c:	460c      	mov	r4, r1
 800823e:	6831      	ldr	r1, [r6, #0]
 8008240:	4605      	mov	r5, r0
 8008242:	b911      	cbnz	r1, 800824a <sbrk_aligned+0x12>
 8008244:	f000 f9e8 	bl	8008618 <_sbrk_r>
 8008248:	6030      	str	r0, [r6, #0]
 800824a:	4621      	mov	r1, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f000 f9e3 	bl	8008618 <_sbrk_r>
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	d00a      	beq.n	800826c <sbrk_aligned+0x34>
 8008256:	1cc4      	adds	r4, r0, #3
 8008258:	f024 0403 	bic.w	r4, r4, #3
 800825c:	42a0      	cmp	r0, r4
 800825e:	d007      	beq.n	8008270 <sbrk_aligned+0x38>
 8008260:	1a21      	subs	r1, r4, r0
 8008262:	4628      	mov	r0, r5
 8008264:	f000 f9d8 	bl	8008618 <_sbrk_r>
 8008268:	3001      	adds	r0, #1
 800826a:	d101      	bne.n	8008270 <sbrk_aligned+0x38>
 800826c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008270:	4620      	mov	r0, r4
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	20000408 	.word	0x20000408

08008278 <_malloc_r>:
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	1ccd      	adds	r5, r1, #3
 800827e:	f025 0503 	bic.w	r5, r5, #3
 8008282:	3508      	adds	r5, #8
 8008284:	2d0c      	cmp	r5, #12
 8008286:	bf38      	it	cc
 8008288:	250c      	movcc	r5, #12
 800828a:	2d00      	cmp	r5, #0
 800828c:	4607      	mov	r7, r0
 800828e:	db01      	blt.n	8008294 <_malloc_r+0x1c>
 8008290:	42a9      	cmp	r1, r5
 8008292:	d905      	bls.n	80082a0 <_malloc_r+0x28>
 8008294:	230c      	movs	r3, #12
 8008296:	2600      	movs	r6, #0
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	4630      	mov	r0, r6
 800829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a0:	4e2e      	ldr	r6, [pc, #184]	; (800835c <_malloc_r+0xe4>)
 80082a2:	f000 fa25 	bl	80086f0 <__malloc_lock>
 80082a6:	6833      	ldr	r3, [r6, #0]
 80082a8:	461c      	mov	r4, r3
 80082aa:	bb34      	cbnz	r4, 80082fa <_malloc_r+0x82>
 80082ac:	4629      	mov	r1, r5
 80082ae:	4638      	mov	r0, r7
 80082b0:	f7ff ffc2 	bl	8008238 <sbrk_aligned>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	4604      	mov	r4, r0
 80082b8:	d14d      	bne.n	8008356 <_malloc_r+0xde>
 80082ba:	6834      	ldr	r4, [r6, #0]
 80082bc:	4626      	mov	r6, r4
 80082be:	2e00      	cmp	r6, #0
 80082c0:	d140      	bne.n	8008344 <_malloc_r+0xcc>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	4631      	mov	r1, r6
 80082c6:	4638      	mov	r0, r7
 80082c8:	eb04 0803 	add.w	r8, r4, r3
 80082cc:	f000 f9a4 	bl	8008618 <_sbrk_r>
 80082d0:	4580      	cmp	r8, r0
 80082d2:	d13a      	bne.n	800834a <_malloc_r+0xd2>
 80082d4:	6821      	ldr	r1, [r4, #0]
 80082d6:	3503      	adds	r5, #3
 80082d8:	1a6d      	subs	r5, r5, r1
 80082da:	f025 0503 	bic.w	r5, r5, #3
 80082de:	3508      	adds	r5, #8
 80082e0:	2d0c      	cmp	r5, #12
 80082e2:	bf38      	it	cc
 80082e4:	250c      	movcc	r5, #12
 80082e6:	4638      	mov	r0, r7
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7ff ffa5 	bl	8008238 <sbrk_aligned>
 80082ee:	3001      	adds	r0, #1
 80082f0:	d02b      	beq.n	800834a <_malloc_r+0xd2>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	442b      	add	r3, r5
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	e00e      	b.n	8008318 <_malloc_r+0xa0>
 80082fa:	6822      	ldr	r2, [r4, #0]
 80082fc:	1b52      	subs	r2, r2, r5
 80082fe:	d41e      	bmi.n	800833e <_malloc_r+0xc6>
 8008300:	2a0b      	cmp	r2, #11
 8008302:	d916      	bls.n	8008332 <_malloc_r+0xba>
 8008304:	1961      	adds	r1, r4, r5
 8008306:	42a3      	cmp	r3, r4
 8008308:	6025      	str	r5, [r4, #0]
 800830a:	bf18      	it	ne
 800830c:	6059      	strne	r1, [r3, #4]
 800830e:	6863      	ldr	r3, [r4, #4]
 8008310:	bf08      	it	eq
 8008312:	6031      	streq	r1, [r6, #0]
 8008314:	5162      	str	r2, [r4, r5]
 8008316:	604b      	str	r3, [r1, #4]
 8008318:	4638      	mov	r0, r7
 800831a:	f104 060b 	add.w	r6, r4, #11
 800831e:	f000 f9ed 	bl	80086fc <__malloc_unlock>
 8008322:	f026 0607 	bic.w	r6, r6, #7
 8008326:	1d23      	adds	r3, r4, #4
 8008328:	1af2      	subs	r2, r6, r3
 800832a:	d0b6      	beq.n	800829a <_malloc_r+0x22>
 800832c:	1b9b      	subs	r3, r3, r6
 800832e:	50a3      	str	r3, [r4, r2]
 8008330:	e7b3      	b.n	800829a <_malloc_r+0x22>
 8008332:	6862      	ldr	r2, [r4, #4]
 8008334:	42a3      	cmp	r3, r4
 8008336:	bf0c      	ite	eq
 8008338:	6032      	streq	r2, [r6, #0]
 800833a:	605a      	strne	r2, [r3, #4]
 800833c:	e7ec      	b.n	8008318 <_malloc_r+0xa0>
 800833e:	4623      	mov	r3, r4
 8008340:	6864      	ldr	r4, [r4, #4]
 8008342:	e7b2      	b.n	80082aa <_malloc_r+0x32>
 8008344:	4634      	mov	r4, r6
 8008346:	6876      	ldr	r6, [r6, #4]
 8008348:	e7b9      	b.n	80082be <_malloc_r+0x46>
 800834a:	230c      	movs	r3, #12
 800834c:	4638      	mov	r0, r7
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	f000 f9d4 	bl	80086fc <__malloc_unlock>
 8008354:	e7a1      	b.n	800829a <_malloc_r+0x22>
 8008356:	6025      	str	r5, [r4, #0]
 8008358:	e7de      	b.n	8008318 <_malloc_r+0xa0>
 800835a:	bf00      	nop
 800835c:	20000404 	.word	0x20000404

08008360 <__ssputs_r>:
 8008360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	688e      	ldr	r6, [r1, #8]
 8008366:	4682      	mov	sl, r0
 8008368:	429e      	cmp	r6, r3
 800836a:	460c      	mov	r4, r1
 800836c:	4690      	mov	r8, r2
 800836e:	461f      	mov	r7, r3
 8008370:	d838      	bhi.n	80083e4 <__ssputs_r+0x84>
 8008372:	898a      	ldrh	r2, [r1, #12]
 8008374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008378:	d032      	beq.n	80083e0 <__ssputs_r+0x80>
 800837a:	6825      	ldr	r5, [r4, #0]
 800837c:	6909      	ldr	r1, [r1, #16]
 800837e:	3301      	adds	r3, #1
 8008380:	eba5 0901 	sub.w	r9, r5, r1
 8008384:	6965      	ldr	r5, [r4, #20]
 8008386:	444b      	add	r3, r9
 8008388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800838c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008390:	106d      	asrs	r5, r5, #1
 8008392:	429d      	cmp	r5, r3
 8008394:	bf38      	it	cc
 8008396:	461d      	movcc	r5, r3
 8008398:	0553      	lsls	r3, r2, #21
 800839a:	d531      	bpl.n	8008400 <__ssputs_r+0xa0>
 800839c:	4629      	mov	r1, r5
 800839e:	f7ff ff6b 	bl	8008278 <_malloc_r>
 80083a2:	4606      	mov	r6, r0
 80083a4:	b950      	cbnz	r0, 80083bc <__ssputs_r+0x5c>
 80083a6:	230c      	movs	r3, #12
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ac:	f8ca 3000 	str.w	r3, [sl]
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083bc:	464a      	mov	r2, r9
 80083be:	6921      	ldr	r1, [r4, #16]
 80083c0:	f7ff fb4e 	bl	8007a60 <memcpy>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	6126      	str	r6, [r4, #16]
 80083d2:	444e      	add	r6, r9
 80083d4:	6026      	str	r6, [r4, #0]
 80083d6:	463e      	mov	r6, r7
 80083d8:	6165      	str	r5, [r4, #20]
 80083da:	eba5 0509 	sub.w	r5, r5, r9
 80083de:	60a5      	str	r5, [r4, #8]
 80083e0:	42be      	cmp	r6, r7
 80083e2:	d900      	bls.n	80083e6 <__ssputs_r+0x86>
 80083e4:	463e      	mov	r6, r7
 80083e6:	4632      	mov	r2, r6
 80083e8:	4641      	mov	r1, r8
 80083ea:	6820      	ldr	r0, [r4, #0]
 80083ec:	f000 f966 	bl	80086bc <memmove>
 80083f0:	68a3      	ldr	r3, [r4, #8]
 80083f2:	2000      	movs	r0, #0
 80083f4:	1b9b      	subs	r3, r3, r6
 80083f6:	60a3      	str	r3, [r4, #8]
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	4433      	add	r3, r6
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	e7db      	b.n	80083b8 <__ssputs_r+0x58>
 8008400:	462a      	mov	r2, r5
 8008402:	f000 f981 	bl	8008708 <_realloc_r>
 8008406:	4606      	mov	r6, r0
 8008408:	2800      	cmp	r0, #0
 800840a:	d1e1      	bne.n	80083d0 <__ssputs_r+0x70>
 800840c:	4650      	mov	r0, sl
 800840e:	6921      	ldr	r1, [r4, #16]
 8008410:	f7ff feca 	bl	80081a8 <_free_r>
 8008414:	e7c7      	b.n	80083a6 <__ssputs_r+0x46>
	...

08008418 <_svfiprintf_r>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	4698      	mov	r8, r3
 800841e:	898b      	ldrh	r3, [r1, #12]
 8008420:	4607      	mov	r7, r0
 8008422:	061b      	lsls	r3, r3, #24
 8008424:	460d      	mov	r5, r1
 8008426:	4614      	mov	r4, r2
 8008428:	b09d      	sub	sp, #116	; 0x74
 800842a:	d50e      	bpl.n	800844a <_svfiprintf_r+0x32>
 800842c:	690b      	ldr	r3, [r1, #16]
 800842e:	b963      	cbnz	r3, 800844a <_svfiprintf_r+0x32>
 8008430:	2140      	movs	r1, #64	; 0x40
 8008432:	f7ff ff21 	bl	8008278 <_malloc_r>
 8008436:	6028      	str	r0, [r5, #0]
 8008438:	6128      	str	r0, [r5, #16]
 800843a:	b920      	cbnz	r0, 8008446 <_svfiprintf_r+0x2e>
 800843c:	230c      	movs	r3, #12
 800843e:	603b      	str	r3, [r7, #0]
 8008440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008444:	e0d1      	b.n	80085ea <_svfiprintf_r+0x1d2>
 8008446:	2340      	movs	r3, #64	; 0x40
 8008448:	616b      	str	r3, [r5, #20]
 800844a:	2300      	movs	r3, #0
 800844c:	9309      	str	r3, [sp, #36]	; 0x24
 800844e:	2320      	movs	r3, #32
 8008450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008454:	2330      	movs	r3, #48	; 0x30
 8008456:	f04f 0901 	mov.w	r9, #1
 800845a:	f8cd 800c 	str.w	r8, [sp, #12]
 800845e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008604 <_svfiprintf_r+0x1ec>
 8008462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008466:	4623      	mov	r3, r4
 8008468:	469a      	mov	sl, r3
 800846a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846e:	b10a      	cbz	r2, 8008474 <_svfiprintf_r+0x5c>
 8008470:	2a25      	cmp	r2, #37	; 0x25
 8008472:	d1f9      	bne.n	8008468 <_svfiprintf_r+0x50>
 8008474:	ebba 0b04 	subs.w	fp, sl, r4
 8008478:	d00b      	beq.n	8008492 <_svfiprintf_r+0x7a>
 800847a:	465b      	mov	r3, fp
 800847c:	4622      	mov	r2, r4
 800847e:	4629      	mov	r1, r5
 8008480:	4638      	mov	r0, r7
 8008482:	f7ff ff6d 	bl	8008360 <__ssputs_r>
 8008486:	3001      	adds	r0, #1
 8008488:	f000 80aa 	beq.w	80085e0 <_svfiprintf_r+0x1c8>
 800848c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800848e:	445a      	add	r2, fp
 8008490:	9209      	str	r2, [sp, #36]	; 0x24
 8008492:	f89a 3000 	ldrb.w	r3, [sl]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 80a2 	beq.w	80085e0 <_svfiprintf_r+0x1c8>
 800849c:	2300      	movs	r3, #0
 800849e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a6:	f10a 0a01 	add.w	sl, sl, #1
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	9307      	str	r3, [sp, #28]
 80084ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084b2:	931a      	str	r3, [sp, #104]	; 0x68
 80084b4:	4654      	mov	r4, sl
 80084b6:	2205      	movs	r2, #5
 80084b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084bc:	4851      	ldr	r0, [pc, #324]	; (8008604 <_svfiprintf_r+0x1ec>)
 80084be:	f7ff fac1 	bl	8007a44 <memchr>
 80084c2:	9a04      	ldr	r2, [sp, #16]
 80084c4:	b9d8      	cbnz	r0, 80084fe <_svfiprintf_r+0xe6>
 80084c6:	06d0      	lsls	r0, r2, #27
 80084c8:	bf44      	itt	mi
 80084ca:	2320      	movmi	r3, #32
 80084cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d0:	0711      	lsls	r1, r2, #28
 80084d2:	bf44      	itt	mi
 80084d4:	232b      	movmi	r3, #43	; 0x2b
 80084d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084da:	f89a 3000 	ldrb.w	r3, [sl]
 80084de:	2b2a      	cmp	r3, #42	; 0x2a
 80084e0:	d015      	beq.n	800850e <_svfiprintf_r+0xf6>
 80084e2:	4654      	mov	r4, sl
 80084e4:	2000      	movs	r0, #0
 80084e6:	f04f 0c0a 	mov.w	ip, #10
 80084ea:	9a07      	ldr	r2, [sp, #28]
 80084ec:	4621      	mov	r1, r4
 80084ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084f2:	3b30      	subs	r3, #48	; 0x30
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	d94e      	bls.n	8008596 <_svfiprintf_r+0x17e>
 80084f8:	b1b0      	cbz	r0, 8008528 <_svfiprintf_r+0x110>
 80084fa:	9207      	str	r2, [sp, #28]
 80084fc:	e014      	b.n	8008528 <_svfiprintf_r+0x110>
 80084fe:	eba0 0308 	sub.w	r3, r0, r8
 8008502:	fa09 f303 	lsl.w	r3, r9, r3
 8008506:	4313      	orrs	r3, r2
 8008508:	46a2      	mov	sl, r4
 800850a:	9304      	str	r3, [sp, #16]
 800850c:	e7d2      	b.n	80084b4 <_svfiprintf_r+0x9c>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	1d19      	adds	r1, r3, #4
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	9103      	str	r1, [sp, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfbb      	ittet	lt
 800851a:	425b      	neglt	r3, r3
 800851c:	f042 0202 	orrlt.w	r2, r2, #2
 8008520:	9307      	strge	r3, [sp, #28]
 8008522:	9307      	strlt	r3, [sp, #28]
 8008524:	bfb8      	it	lt
 8008526:	9204      	strlt	r2, [sp, #16]
 8008528:	7823      	ldrb	r3, [r4, #0]
 800852a:	2b2e      	cmp	r3, #46	; 0x2e
 800852c:	d10c      	bne.n	8008548 <_svfiprintf_r+0x130>
 800852e:	7863      	ldrb	r3, [r4, #1]
 8008530:	2b2a      	cmp	r3, #42	; 0x2a
 8008532:	d135      	bne.n	80085a0 <_svfiprintf_r+0x188>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	3402      	adds	r4, #2
 8008538:	1d1a      	adds	r2, r3, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	9203      	str	r2, [sp, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfb8      	it	lt
 8008542:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008546:	9305      	str	r3, [sp, #20]
 8008548:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008608 <_svfiprintf_r+0x1f0>
 800854c:	2203      	movs	r2, #3
 800854e:	4650      	mov	r0, sl
 8008550:	7821      	ldrb	r1, [r4, #0]
 8008552:	f7ff fa77 	bl	8007a44 <memchr>
 8008556:	b140      	cbz	r0, 800856a <_svfiprintf_r+0x152>
 8008558:	2340      	movs	r3, #64	; 0x40
 800855a:	eba0 000a 	sub.w	r0, r0, sl
 800855e:	fa03 f000 	lsl.w	r0, r3, r0
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	3401      	adds	r4, #1
 8008566:	4303      	orrs	r3, r0
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856e:	2206      	movs	r2, #6
 8008570:	4826      	ldr	r0, [pc, #152]	; (800860c <_svfiprintf_r+0x1f4>)
 8008572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008576:	f7ff fa65 	bl	8007a44 <memchr>
 800857a:	2800      	cmp	r0, #0
 800857c:	d038      	beq.n	80085f0 <_svfiprintf_r+0x1d8>
 800857e:	4b24      	ldr	r3, [pc, #144]	; (8008610 <_svfiprintf_r+0x1f8>)
 8008580:	bb1b      	cbnz	r3, 80085ca <_svfiprintf_r+0x1b2>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	3307      	adds	r3, #7
 8008586:	f023 0307 	bic.w	r3, r3, #7
 800858a:	3308      	adds	r3, #8
 800858c:	9303      	str	r3, [sp, #12]
 800858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008590:	4433      	add	r3, r6
 8008592:	9309      	str	r3, [sp, #36]	; 0x24
 8008594:	e767      	b.n	8008466 <_svfiprintf_r+0x4e>
 8008596:	460c      	mov	r4, r1
 8008598:	2001      	movs	r0, #1
 800859a:	fb0c 3202 	mla	r2, ip, r2, r3
 800859e:	e7a5      	b.n	80084ec <_svfiprintf_r+0xd4>
 80085a0:	2300      	movs	r3, #0
 80085a2:	f04f 0c0a 	mov.w	ip, #10
 80085a6:	4619      	mov	r1, r3
 80085a8:	3401      	adds	r4, #1
 80085aa:	9305      	str	r3, [sp, #20]
 80085ac:	4620      	mov	r0, r4
 80085ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b2:	3a30      	subs	r2, #48	; 0x30
 80085b4:	2a09      	cmp	r2, #9
 80085b6:	d903      	bls.n	80085c0 <_svfiprintf_r+0x1a8>
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0c5      	beq.n	8008548 <_svfiprintf_r+0x130>
 80085bc:	9105      	str	r1, [sp, #20]
 80085be:	e7c3      	b.n	8008548 <_svfiprintf_r+0x130>
 80085c0:	4604      	mov	r4, r0
 80085c2:	2301      	movs	r3, #1
 80085c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085c8:	e7f0      	b.n	80085ac <_svfiprintf_r+0x194>
 80085ca:	ab03      	add	r3, sp, #12
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	462a      	mov	r2, r5
 80085d0:	4638      	mov	r0, r7
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <_svfiprintf_r+0x1fc>)
 80085d4:	a904      	add	r1, sp, #16
 80085d6:	f7fd ffcb 	bl	8006570 <_printf_float>
 80085da:	1c42      	adds	r2, r0, #1
 80085dc:	4606      	mov	r6, r0
 80085de:	d1d6      	bne.n	800858e <_svfiprintf_r+0x176>
 80085e0:	89ab      	ldrh	r3, [r5, #12]
 80085e2:	065b      	lsls	r3, r3, #25
 80085e4:	f53f af2c 	bmi.w	8008440 <_svfiprintf_r+0x28>
 80085e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ea:	b01d      	add	sp, #116	; 0x74
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	462a      	mov	r2, r5
 80085f6:	4638      	mov	r0, r7
 80085f8:	4b06      	ldr	r3, [pc, #24]	; (8008614 <_svfiprintf_r+0x1fc>)
 80085fa:	a904      	add	r1, sp, #16
 80085fc:	f7fe fa54 	bl	8006aa8 <_printf_i>
 8008600:	e7eb      	b.n	80085da <_svfiprintf_r+0x1c2>
 8008602:	bf00      	nop
 8008604:	08009afc 	.word	0x08009afc
 8008608:	08009b02 	.word	0x08009b02
 800860c:	08009b06 	.word	0x08009b06
 8008610:	08006571 	.word	0x08006571
 8008614:	08008361 	.word	0x08008361

08008618 <_sbrk_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	2300      	movs	r3, #0
 800861c:	4d05      	ldr	r5, [pc, #20]	; (8008634 <_sbrk_r+0x1c>)
 800861e:	4604      	mov	r4, r0
 8008620:	4608      	mov	r0, r1
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	f7fa f9c4 	bl	80029b0 <_sbrk>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_sbrk_r+0x1a>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	b103      	cbz	r3, 8008632 <_sbrk_r+0x1a>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	2000040c 	.word	0x2000040c

08008638 <__assert_func>:
 8008638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800863a:	4614      	mov	r4, r2
 800863c:	461a      	mov	r2, r3
 800863e:	4b09      	ldr	r3, [pc, #36]	; (8008664 <__assert_func+0x2c>)
 8008640:	4605      	mov	r5, r0
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68d8      	ldr	r0, [r3, #12]
 8008646:	b14c      	cbz	r4, 800865c <__assert_func+0x24>
 8008648:	4b07      	ldr	r3, [pc, #28]	; (8008668 <__assert_func+0x30>)
 800864a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800864e:	9100      	str	r1, [sp, #0]
 8008650:	462b      	mov	r3, r5
 8008652:	4906      	ldr	r1, [pc, #24]	; (800866c <__assert_func+0x34>)
 8008654:	f000 f80e 	bl	8008674 <fiprintf>
 8008658:	f000 faaa 	bl	8008bb0 <abort>
 800865c:	4b04      	ldr	r3, [pc, #16]	; (8008670 <__assert_func+0x38>)
 800865e:	461c      	mov	r4, r3
 8008660:	e7f3      	b.n	800864a <__assert_func+0x12>
 8008662:	bf00      	nop
 8008664:	200000a8 	.word	0x200000a8
 8008668:	08009b0d 	.word	0x08009b0d
 800866c:	08009b1a 	.word	0x08009b1a
 8008670:	08009b48 	.word	0x08009b48

08008674 <fiprintf>:
 8008674:	b40e      	push	{r1, r2, r3}
 8008676:	b503      	push	{r0, r1, lr}
 8008678:	4601      	mov	r1, r0
 800867a:	ab03      	add	r3, sp, #12
 800867c:	4805      	ldr	r0, [pc, #20]	; (8008694 <fiprintf+0x20>)
 800867e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008682:	6800      	ldr	r0, [r0, #0]
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	f000 f895 	bl	80087b4 <_vfiprintf_r>
 800868a:	b002      	add	sp, #8
 800868c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008690:	b003      	add	sp, #12
 8008692:	4770      	bx	lr
 8008694:	200000a8 	.word	0x200000a8

08008698 <__ascii_mbtowc>:
 8008698:	b082      	sub	sp, #8
 800869a:	b901      	cbnz	r1, 800869e <__ascii_mbtowc+0x6>
 800869c:	a901      	add	r1, sp, #4
 800869e:	b142      	cbz	r2, 80086b2 <__ascii_mbtowc+0x1a>
 80086a0:	b14b      	cbz	r3, 80086b6 <__ascii_mbtowc+0x1e>
 80086a2:	7813      	ldrb	r3, [r2, #0]
 80086a4:	600b      	str	r3, [r1, #0]
 80086a6:	7812      	ldrb	r2, [r2, #0]
 80086a8:	1e10      	subs	r0, r2, #0
 80086aa:	bf18      	it	ne
 80086ac:	2001      	movne	r0, #1
 80086ae:	b002      	add	sp, #8
 80086b0:	4770      	bx	lr
 80086b2:	4610      	mov	r0, r2
 80086b4:	e7fb      	b.n	80086ae <__ascii_mbtowc+0x16>
 80086b6:	f06f 0001 	mvn.w	r0, #1
 80086ba:	e7f8      	b.n	80086ae <__ascii_mbtowc+0x16>

080086bc <memmove>:
 80086bc:	4288      	cmp	r0, r1
 80086be:	b510      	push	{r4, lr}
 80086c0:	eb01 0402 	add.w	r4, r1, r2
 80086c4:	d902      	bls.n	80086cc <memmove+0x10>
 80086c6:	4284      	cmp	r4, r0
 80086c8:	4623      	mov	r3, r4
 80086ca:	d807      	bhi.n	80086dc <memmove+0x20>
 80086cc:	1e43      	subs	r3, r0, #1
 80086ce:	42a1      	cmp	r1, r4
 80086d0:	d008      	beq.n	80086e4 <memmove+0x28>
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086da:	e7f8      	b.n	80086ce <memmove+0x12>
 80086dc:	4601      	mov	r1, r0
 80086de:	4402      	add	r2, r0
 80086e0:	428a      	cmp	r2, r1
 80086e2:	d100      	bne.n	80086e6 <memmove+0x2a>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ee:	e7f7      	b.n	80086e0 <memmove+0x24>

080086f0 <__malloc_lock>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__malloc_lock+0x8>)
 80086f2:	f000 bc19 	b.w	8008f28 <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	20000410 	.word	0x20000410

080086fc <__malloc_unlock>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__malloc_unlock+0x8>)
 80086fe:	f000 bc14 	b.w	8008f2a <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	20000410 	.word	0x20000410

08008708 <_realloc_r>:
 8008708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870c:	4680      	mov	r8, r0
 800870e:	4614      	mov	r4, r2
 8008710:	460e      	mov	r6, r1
 8008712:	b921      	cbnz	r1, 800871e <_realloc_r+0x16>
 8008714:	4611      	mov	r1, r2
 8008716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800871a:	f7ff bdad 	b.w	8008278 <_malloc_r>
 800871e:	b92a      	cbnz	r2, 800872c <_realloc_r+0x24>
 8008720:	f7ff fd42 	bl	80081a8 <_free_r>
 8008724:	4625      	mov	r5, r4
 8008726:	4628      	mov	r0, r5
 8008728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800872c:	f000 fc64 	bl	8008ff8 <_malloc_usable_size_r>
 8008730:	4284      	cmp	r4, r0
 8008732:	4607      	mov	r7, r0
 8008734:	d802      	bhi.n	800873c <_realloc_r+0x34>
 8008736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800873a:	d812      	bhi.n	8008762 <_realloc_r+0x5a>
 800873c:	4621      	mov	r1, r4
 800873e:	4640      	mov	r0, r8
 8008740:	f7ff fd9a 	bl	8008278 <_malloc_r>
 8008744:	4605      	mov	r5, r0
 8008746:	2800      	cmp	r0, #0
 8008748:	d0ed      	beq.n	8008726 <_realloc_r+0x1e>
 800874a:	42bc      	cmp	r4, r7
 800874c:	4622      	mov	r2, r4
 800874e:	4631      	mov	r1, r6
 8008750:	bf28      	it	cs
 8008752:	463a      	movcs	r2, r7
 8008754:	f7ff f984 	bl	8007a60 <memcpy>
 8008758:	4631      	mov	r1, r6
 800875a:	4640      	mov	r0, r8
 800875c:	f7ff fd24 	bl	80081a8 <_free_r>
 8008760:	e7e1      	b.n	8008726 <_realloc_r+0x1e>
 8008762:	4635      	mov	r5, r6
 8008764:	e7df      	b.n	8008726 <_realloc_r+0x1e>

08008766 <__sfputc_r>:
 8008766:	6893      	ldr	r3, [r2, #8]
 8008768:	b410      	push	{r4}
 800876a:	3b01      	subs	r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	6093      	str	r3, [r2, #8]
 8008770:	da07      	bge.n	8008782 <__sfputc_r+0x1c>
 8008772:	6994      	ldr	r4, [r2, #24]
 8008774:	42a3      	cmp	r3, r4
 8008776:	db01      	blt.n	800877c <__sfputc_r+0x16>
 8008778:	290a      	cmp	r1, #10
 800877a:	d102      	bne.n	8008782 <__sfputc_r+0x1c>
 800877c:	bc10      	pop	{r4}
 800877e:	f000 b949 	b.w	8008a14 <__swbuf_r>
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	1c58      	adds	r0, r3, #1
 8008786:	6010      	str	r0, [r2, #0]
 8008788:	7019      	strb	r1, [r3, #0]
 800878a:	4608      	mov	r0, r1
 800878c:	bc10      	pop	{r4}
 800878e:	4770      	bx	lr

08008790 <__sfputs_r>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	4606      	mov	r6, r0
 8008794:	460f      	mov	r7, r1
 8008796:	4614      	mov	r4, r2
 8008798:	18d5      	adds	r5, r2, r3
 800879a:	42ac      	cmp	r4, r5
 800879c:	d101      	bne.n	80087a2 <__sfputs_r+0x12>
 800879e:	2000      	movs	r0, #0
 80087a0:	e007      	b.n	80087b2 <__sfputs_r+0x22>
 80087a2:	463a      	mov	r2, r7
 80087a4:	4630      	mov	r0, r6
 80087a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087aa:	f7ff ffdc 	bl	8008766 <__sfputc_r>
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	d1f3      	bne.n	800879a <__sfputs_r+0xa>
 80087b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087b4 <_vfiprintf_r>:
 80087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	460d      	mov	r5, r1
 80087ba:	4614      	mov	r4, r2
 80087bc:	4698      	mov	r8, r3
 80087be:	4606      	mov	r6, r0
 80087c0:	b09d      	sub	sp, #116	; 0x74
 80087c2:	b118      	cbz	r0, 80087cc <_vfiprintf_r+0x18>
 80087c4:	6983      	ldr	r3, [r0, #24]
 80087c6:	b90b      	cbnz	r3, 80087cc <_vfiprintf_r+0x18>
 80087c8:	f000 fb10 	bl	8008dec <__sinit>
 80087cc:	4b89      	ldr	r3, [pc, #548]	; (80089f4 <_vfiprintf_r+0x240>)
 80087ce:	429d      	cmp	r5, r3
 80087d0:	d11b      	bne.n	800880a <_vfiprintf_r+0x56>
 80087d2:	6875      	ldr	r5, [r6, #4]
 80087d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087d6:	07d9      	lsls	r1, r3, #31
 80087d8:	d405      	bmi.n	80087e6 <_vfiprintf_r+0x32>
 80087da:	89ab      	ldrh	r3, [r5, #12]
 80087dc:	059a      	lsls	r2, r3, #22
 80087de:	d402      	bmi.n	80087e6 <_vfiprintf_r+0x32>
 80087e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087e2:	f000 fba1 	bl	8008f28 <__retarget_lock_acquire_recursive>
 80087e6:	89ab      	ldrh	r3, [r5, #12]
 80087e8:	071b      	lsls	r3, r3, #28
 80087ea:	d501      	bpl.n	80087f0 <_vfiprintf_r+0x3c>
 80087ec:	692b      	ldr	r3, [r5, #16]
 80087ee:	b9eb      	cbnz	r3, 800882c <_vfiprintf_r+0x78>
 80087f0:	4629      	mov	r1, r5
 80087f2:	4630      	mov	r0, r6
 80087f4:	f000 f96e 	bl	8008ad4 <__swsetup_r>
 80087f8:	b1c0      	cbz	r0, 800882c <_vfiprintf_r+0x78>
 80087fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087fc:	07dc      	lsls	r4, r3, #31
 80087fe:	d50e      	bpl.n	800881e <_vfiprintf_r+0x6a>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008804:	b01d      	add	sp, #116	; 0x74
 8008806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880a:	4b7b      	ldr	r3, [pc, #492]	; (80089f8 <_vfiprintf_r+0x244>)
 800880c:	429d      	cmp	r5, r3
 800880e:	d101      	bne.n	8008814 <_vfiprintf_r+0x60>
 8008810:	68b5      	ldr	r5, [r6, #8]
 8008812:	e7df      	b.n	80087d4 <_vfiprintf_r+0x20>
 8008814:	4b79      	ldr	r3, [pc, #484]	; (80089fc <_vfiprintf_r+0x248>)
 8008816:	429d      	cmp	r5, r3
 8008818:	bf08      	it	eq
 800881a:	68f5      	ldreq	r5, [r6, #12]
 800881c:	e7da      	b.n	80087d4 <_vfiprintf_r+0x20>
 800881e:	89ab      	ldrh	r3, [r5, #12]
 8008820:	0598      	lsls	r0, r3, #22
 8008822:	d4ed      	bmi.n	8008800 <_vfiprintf_r+0x4c>
 8008824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008826:	f000 fb80 	bl	8008f2a <__retarget_lock_release_recursive>
 800882a:	e7e9      	b.n	8008800 <_vfiprintf_r+0x4c>
 800882c:	2300      	movs	r3, #0
 800882e:	9309      	str	r3, [sp, #36]	; 0x24
 8008830:	2320      	movs	r3, #32
 8008832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008836:	2330      	movs	r3, #48	; 0x30
 8008838:	f04f 0901 	mov.w	r9, #1
 800883c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008840:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008a00 <_vfiprintf_r+0x24c>
 8008844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008848:	4623      	mov	r3, r4
 800884a:	469a      	mov	sl, r3
 800884c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008850:	b10a      	cbz	r2, 8008856 <_vfiprintf_r+0xa2>
 8008852:	2a25      	cmp	r2, #37	; 0x25
 8008854:	d1f9      	bne.n	800884a <_vfiprintf_r+0x96>
 8008856:	ebba 0b04 	subs.w	fp, sl, r4
 800885a:	d00b      	beq.n	8008874 <_vfiprintf_r+0xc0>
 800885c:	465b      	mov	r3, fp
 800885e:	4622      	mov	r2, r4
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f7ff ff94 	bl	8008790 <__sfputs_r>
 8008868:	3001      	adds	r0, #1
 800886a:	f000 80aa 	beq.w	80089c2 <_vfiprintf_r+0x20e>
 800886e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008870:	445a      	add	r2, fp
 8008872:	9209      	str	r2, [sp, #36]	; 0x24
 8008874:	f89a 3000 	ldrb.w	r3, [sl]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 80a2 	beq.w	80089c2 <_vfiprintf_r+0x20e>
 800887e:	2300      	movs	r3, #0
 8008880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008888:	f10a 0a01 	add.w	sl, sl, #1
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	9307      	str	r3, [sp, #28]
 8008890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008894:	931a      	str	r3, [sp, #104]	; 0x68
 8008896:	4654      	mov	r4, sl
 8008898:	2205      	movs	r2, #5
 800889a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889e:	4858      	ldr	r0, [pc, #352]	; (8008a00 <_vfiprintf_r+0x24c>)
 80088a0:	f7ff f8d0 	bl	8007a44 <memchr>
 80088a4:	9a04      	ldr	r2, [sp, #16]
 80088a6:	b9d8      	cbnz	r0, 80088e0 <_vfiprintf_r+0x12c>
 80088a8:	06d1      	lsls	r1, r2, #27
 80088aa:	bf44      	itt	mi
 80088ac:	2320      	movmi	r3, #32
 80088ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b2:	0713      	lsls	r3, r2, #28
 80088b4:	bf44      	itt	mi
 80088b6:	232b      	movmi	r3, #43	; 0x2b
 80088b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088bc:	f89a 3000 	ldrb.w	r3, [sl]
 80088c0:	2b2a      	cmp	r3, #42	; 0x2a
 80088c2:	d015      	beq.n	80088f0 <_vfiprintf_r+0x13c>
 80088c4:	4654      	mov	r4, sl
 80088c6:	2000      	movs	r0, #0
 80088c8:	f04f 0c0a 	mov.w	ip, #10
 80088cc:	9a07      	ldr	r2, [sp, #28]
 80088ce:	4621      	mov	r1, r4
 80088d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d4:	3b30      	subs	r3, #48	; 0x30
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	d94e      	bls.n	8008978 <_vfiprintf_r+0x1c4>
 80088da:	b1b0      	cbz	r0, 800890a <_vfiprintf_r+0x156>
 80088dc:	9207      	str	r2, [sp, #28]
 80088de:	e014      	b.n	800890a <_vfiprintf_r+0x156>
 80088e0:	eba0 0308 	sub.w	r3, r0, r8
 80088e4:	fa09 f303 	lsl.w	r3, r9, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	46a2      	mov	sl, r4
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	e7d2      	b.n	8008896 <_vfiprintf_r+0xe2>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	1d19      	adds	r1, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	9103      	str	r1, [sp, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bfbb      	ittet	lt
 80088fc:	425b      	neglt	r3, r3
 80088fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008902:	9307      	strge	r3, [sp, #28]
 8008904:	9307      	strlt	r3, [sp, #28]
 8008906:	bfb8      	it	lt
 8008908:	9204      	strlt	r2, [sp, #16]
 800890a:	7823      	ldrb	r3, [r4, #0]
 800890c:	2b2e      	cmp	r3, #46	; 0x2e
 800890e:	d10c      	bne.n	800892a <_vfiprintf_r+0x176>
 8008910:	7863      	ldrb	r3, [r4, #1]
 8008912:	2b2a      	cmp	r3, #42	; 0x2a
 8008914:	d135      	bne.n	8008982 <_vfiprintf_r+0x1ce>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	3402      	adds	r4, #2
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	9203      	str	r2, [sp, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfb8      	it	lt
 8008924:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008a04 <_vfiprintf_r+0x250>
 800892e:	2203      	movs	r2, #3
 8008930:	4650      	mov	r0, sl
 8008932:	7821      	ldrb	r1, [r4, #0]
 8008934:	f7ff f886 	bl	8007a44 <memchr>
 8008938:	b140      	cbz	r0, 800894c <_vfiprintf_r+0x198>
 800893a:	2340      	movs	r3, #64	; 0x40
 800893c:	eba0 000a 	sub.w	r0, r0, sl
 8008940:	fa03 f000 	lsl.w	r0, r3, r0
 8008944:	9b04      	ldr	r3, [sp, #16]
 8008946:	3401      	adds	r4, #1
 8008948:	4303      	orrs	r3, r0
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008950:	2206      	movs	r2, #6
 8008952:	482d      	ldr	r0, [pc, #180]	; (8008a08 <_vfiprintf_r+0x254>)
 8008954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008958:	f7ff f874 	bl	8007a44 <memchr>
 800895c:	2800      	cmp	r0, #0
 800895e:	d03f      	beq.n	80089e0 <_vfiprintf_r+0x22c>
 8008960:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <_vfiprintf_r+0x258>)
 8008962:	bb1b      	cbnz	r3, 80089ac <_vfiprintf_r+0x1f8>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	3307      	adds	r3, #7
 8008968:	f023 0307 	bic.w	r3, r3, #7
 800896c:	3308      	adds	r3, #8
 800896e:	9303      	str	r3, [sp, #12]
 8008970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008972:	443b      	add	r3, r7
 8008974:	9309      	str	r3, [sp, #36]	; 0x24
 8008976:	e767      	b.n	8008848 <_vfiprintf_r+0x94>
 8008978:	460c      	mov	r4, r1
 800897a:	2001      	movs	r0, #1
 800897c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008980:	e7a5      	b.n	80088ce <_vfiprintf_r+0x11a>
 8008982:	2300      	movs	r3, #0
 8008984:	f04f 0c0a 	mov.w	ip, #10
 8008988:	4619      	mov	r1, r3
 800898a:	3401      	adds	r4, #1
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	4620      	mov	r0, r4
 8008990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008994:	3a30      	subs	r2, #48	; 0x30
 8008996:	2a09      	cmp	r2, #9
 8008998:	d903      	bls.n	80089a2 <_vfiprintf_r+0x1ee>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0c5      	beq.n	800892a <_vfiprintf_r+0x176>
 800899e:	9105      	str	r1, [sp, #20]
 80089a0:	e7c3      	b.n	800892a <_vfiprintf_r+0x176>
 80089a2:	4604      	mov	r4, r0
 80089a4:	2301      	movs	r3, #1
 80089a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089aa:	e7f0      	b.n	800898e <_vfiprintf_r+0x1da>
 80089ac:	ab03      	add	r3, sp, #12
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	462a      	mov	r2, r5
 80089b2:	4630      	mov	r0, r6
 80089b4:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <_vfiprintf_r+0x25c>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	f7fd fdda 	bl	8006570 <_printf_float>
 80089bc:	4607      	mov	r7, r0
 80089be:	1c78      	adds	r0, r7, #1
 80089c0:	d1d6      	bne.n	8008970 <_vfiprintf_r+0x1bc>
 80089c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089c4:	07d9      	lsls	r1, r3, #31
 80089c6:	d405      	bmi.n	80089d4 <_vfiprintf_r+0x220>
 80089c8:	89ab      	ldrh	r3, [r5, #12]
 80089ca:	059a      	lsls	r2, r3, #22
 80089cc:	d402      	bmi.n	80089d4 <_vfiprintf_r+0x220>
 80089ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d0:	f000 faab 	bl	8008f2a <__retarget_lock_release_recursive>
 80089d4:	89ab      	ldrh	r3, [r5, #12]
 80089d6:	065b      	lsls	r3, r3, #25
 80089d8:	f53f af12 	bmi.w	8008800 <_vfiprintf_r+0x4c>
 80089dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089de:	e711      	b.n	8008804 <_vfiprintf_r+0x50>
 80089e0:	ab03      	add	r3, sp, #12
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	462a      	mov	r2, r5
 80089e6:	4630      	mov	r0, r6
 80089e8:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <_vfiprintf_r+0x25c>)
 80089ea:	a904      	add	r1, sp, #16
 80089ec:	f7fe f85c 	bl	8006aa8 <_printf_i>
 80089f0:	e7e4      	b.n	80089bc <_vfiprintf_r+0x208>
 80089f2:	bf00      	nop
 80089f4:	08009c74 	.word	0x08009c74
 80089f8:	08009c94 	.word	0x08009c94
 80089fc:	08009c54 	.word	0x08009c54
 8008a00:	08009afc 	.word	0x08009afc
 8008a04:	08009b02 	.word	0x08009b02
 8008a08:	08009b06 	.word	0x08009b06
 8008a0c:	08006571 	.word	0x08006571
 8008a10:	08008791 	.word	0x08008791

08008a14 <__swbuf_r>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	460e      	mov	r6, r1
 8008a18:	4614      	mov	r4, r2
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	b118      	cbz	r0, 8008a26 <__swbuf_r+0x12>
 8008a1e:	6983      	ldr	r3, [r0, #24]
 8008a20:	b90b      	cbnz	r3, 8008a26 <__swbuf_r+0x12>
 8008a22:	f000 f9e3 	bl	8008dec <__sinit>
 8008a26:	4b21      	ldr	r3, [pc, #132]	; (8008aac <__swbuf_r+0x98>)
 8008a28:	429c      	cmp	r4, r3
 8008a2a:	d12b      	bne.n	8008a84 <__swbuf_r+0x70>
 8008a2c:	686c      	ldr	r4, [r5, #4]
 8008a2e:	69a3      	ldr	r3, [r4, #24]
 8008a30:	60a3      	str	r3, [r4, #8]
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	071a      	lsls	r2, r3, #28
 8008a36:	d52f      	bpl.n	8008a98 <__swbuf_r+0x84>
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	b36b      	cbz	r3, 8008a98 <__swbuf_r+0x84>
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	6820      	ldr	r0, [r4, #0]
 8008a40:	b2f6      	uxtb	r6, r6
 8008a42:	1ac0      	subs	r0, r0, r3
 8008a44:	6963      	ldr	r3, [r4, #20]
 8008a46:	4637      	mov	r7, r6
 8008a48:	4283      	cmp	r3, r0
 8008a4a:	dc04      	bgt.n	8008a56 <__swbuf_r+0x42>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 f938 	bl	8008cc4 <_fflush_r>
 8008a54:	bb30      	cbnz	r0, 8008aa4 <__swbuf_r+0x90>
 8008a56:	68a3      	ldr	r3, [r4, #8]
 8008a58:	3001      	adds	r0, #1
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	60a3      	str	r3, [r4, #8]
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	701e      	strb	r6, [r3, #0]
 8008a66:	6963      	ldr	r3, [r4, #20]
 8008a68:	4283      	cmp	r3, r0
 8008a6a:	d004      	beq.n	8008a76 <__swbuf_r+0x62>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	07db      	lsls	r3, r3, #31
 8008a70:	d506      	bpl.n	8008a80 <__swbuf_r+0x6c>
 8008a72:	2e0a      	cmp	r6, #10
 8008a74:	d104      	bne.n	8008a80 <__swbuf_r+0x6c>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f000 f923 	bl	8008cc4 <_fflush_r>
 8008a7e:	b988      	cbnz	r0, 8008aa4 <__swbuf_r+0x90>
 8008a80:	4638      	mov	r0, r7
 8008a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <__swbuf_r+0x9c>)
 8008a86:	429c      	cmp	r4, r3
 8008a88:	d101      	bne.n	8008a8e <__swbuf_r+0x7a>
 8008a8a:	68ac      	ldr	r4, [r5, #8]
 8008a8c:	e7cf      	b.n	8008a2e <__swbuf_r+0x1a>
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <__swbuf_r+0xa0>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	bf08      	it	eq
 8008a94:	68ec      	ldreq	r4, [r5, #12]
 8008a96:	e7ca      	b.n	8008a2e <__swbuf_r+0x1a>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f000 f81a 	bl	8008ad4 <__swsetup_r>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d0cb      	beq.n	8008a3c <__swbuf_r+0x28>
 8008aa4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008aa8:	e7ea      	b.n	8008a80 <__swbuf_r+0x6c>
 8008aaa:	bf00      	nop
 8008aac:	08009c74 	.word	0x08009c74
 8008ab0:	08009c94 	.word	0x08009c94
 8008ab4:	08009c54 	.word	0x08009c54

08008ab8 <__ascii_wctomb>:
 8008ab8:	4603      	mov	r3, r0
 8008aba:	4608      	mov	r0, r1
 8008abc:	b141      	cbz	r1, 8008ad0 <__ascii_wctomb+0x18>
 8008abe:	2aff      	cmp	r2, #255	; 0xff
 8008ac0:	d904      	bls.n	8008acc <__ascii_wctomb+0x14>
 8008ac2:	228a      	movs	r2, #138	; 0x8a
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	4770      	bx	lr
 8008acc:	2001      	movs	r0, #1
 8008ace:	700a      	strb	r2, [r1, #0]
 8008ad0:	4770      	bx	lr
	...

08008ad4 <__swsetup_r>:
 8008ad4:	4b32      	ldr	r3, [pc, #200]	; (8008ba0 <__swsetup_r+0xcc>)
 8008ad6:	b570      	push	{r4, r5, r6, lr}
 8008ad8:	681d      	ldr	r5, [r3, #0]
 8008ada:	4606      	mov	r6, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	b125      	cbz	r5, 8008aea <__swsetup_r+0x16>
 8008ae0:	69ab      	ldr	r3, [r5, #24]
 8008ae2:	b913      	cbnz	r3, 8008aea <__swsetup_r+0x16>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f981 	bl	8008dec <__sinit>
 8008aea:	4b2e      	ldr	r3, [pc, #184]	; (8008ba4 <__swsetup_r+0xd0>)
 8008aec:	429c      	cmp	r4, r3
 8008aee:	d10f      	bne.n	8008b10 <__swsetup_r+0x3c>
 8008af0:	686c      	ldr	r4, [r5, #4]
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008af8:	0719      	lsls	r1, r3, #28
 8008afa:	d42c      	bmi.n	8008b56 <__swsetup_r+0x82>
 8008afc:	06dd      	lsls	r5, r3, #27
 8008afe:	d411      	bmi.n	8008b24 <__swsetup_r+0x50>
 8008b00:	2309      	movs	r3, #9
 8008b02:	6033      	str	r3, [r6, #0]
 8008b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	e03e      	b.n	8008b8e <__swsetup_r+0xba>
 8008b10:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <__swsetup_r+0xd4>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d101      	bne.n	8008b1a <__swsetup_r+0x46>
 8008b16:	68ac      	ldr	r4, [r5, #8]
 8008b18:	e7eb      	b.n	8008af2 <__swsetup_r+0x1e>
 8008b1a:	4b24      	ldr	r3, [pc, #144]	; (8008bac <__swsetup_r+0xd8>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	bf08      	it	eq
 8008b20:	68ec      	ldreq	r4, [r5, #12]
 8008b22:	e7e6      	b.n	8008af2 <__swsetup_r+0x1e>
 8008b24:	0758      	lsls	r0, r3, #29
 8008b26:	d512      	bpl.n	8008b4e <__swsetup_r+0x7a>
 8008b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2a:	b141      	cbz	r1, 8008b3e <__swsetup_r+0x6a>
 8008b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d002      	beq.n	8008b3a <__swsetup_r+0x66>
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7ff fb37 	bl	80081a8 <_free_r>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b44:	81a3      	strh	r3, [r4, #12]
 8008b46:	2300      	movs	r3, #0
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f043 0308 	orr.w	r3, r3, #8
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	b94b      	cbnz	r3, 8008b6e <__swsetup_r+0x9a>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b64:	d003      	beq.n	8008b6e <__swsetup_r+0x9a>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 fa05 	bl	8008f78 <__smakebuf_r>
 8008b6e:	89a0      	ldrh	r0, [r4, #12]
 8008b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b74:	f010 0301 	ands.w	r3, r0, #1
 8008b78:	d00a      	beq.n	8008b90 <__swsetup_r+0xbc>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60a3      	str	r3, [r4, #8]
 8008b7e:	6963      	ldr	r3, [r4, #20]
 8008b80:	425b      	negs	r3, r3
 8008b82:	61a3      	str	r3, [r4, #24]
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	b943      	cbnz	r3, 8008b9a <__swsetup_r+0xc6>
 8008b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b8c:	d1ba      	bne.n	8008b04 <__swsetup_r+0x30>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0781      	lsls	r1, r0, #30
 8008b92:	bf58      	it	pl
 8008b94:	6963      	ldrpl	r3, [r4, #20]
 8008b96:	60a3      	str	r3, [r4, #8]
 8008b98:	e7f4      	b.n	8008b84 <__swsetup_r+0xb0>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e7f7      	b.n	8008b8e <__swsetup_r+0xba>
 8008b9e:	bf00      	nop
 8008ba0:	200000a8 	.word	0x200000a8
 8008ba4:	08009c74 	.word	0x08009c74
 8008ba8:	08009c94 	.word	0x08009c94
 8008bac:	08009c54 	.word	0x08009c54

08008bb0 <abort>:
 8008bb0:	2006      	movs	r0, #6
 8008bb2:	b508      	push	{r3, lr}
 8008bb4:	f000 fa50 	bl	8009058 <raise>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f7f9 fe86 	bl	80028ca <_exit>
	...

08008bc0 <__sflush_r>:
 8008bc0:	898a      	ldrh	r2, [r1, #12]
 8008bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	0710      	lsls	r0, r2, #28
 8008bc8:	460c      	mov	r4, r1
 8008bca:	d457      	bmi.n	8008c7c <__sflush_r+0xbc>
 8008bcc:	684b      	ldr	r3, [r1, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dc04      	bgt.n	8008bdc <__sflush_r+0x1c>
 8008bd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dc01      	bgt.n	8008bdc <__sflush_r+0x1c>
 8008bd8:	2000      	movs	r0, #0
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	d0fa      	beq.n	8008bd8 <__sflush_r+0x18>
 8008be2:	2300      	movs	r3, #0
 8008be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008be8:	682f      	ldr	r7, [r5, #0]
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	d032      	beq.n	8008c54 <__sflush_r+0x94>
 8008bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	075a      	lsls	r2, r3, #29
 8008bf4:	d505      	bpl.n	8008c02 <__sflush_r+0x42>
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	1ac0      	subs	r0, r0, r3
 8008bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bfc:	b10b      	cbz	r3, 8008c02 <__sflush_r+0x42>
 8008bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c00:	1ac0      	subs	r0, r0, r3
 8008c02:	2300      	movs	r3, #0
 8008c04:	4602      	mov	r2, r0
 8008c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c08:	4628      	mov	r0, r5
 8008c0a:	6a21      	ldr	r1, [r4, #32]
 8008c0c:	47b0      	blx	r6
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	d106      	bne.n	8008c22 <__sflush_r+0x62>
 8008c14:	6829      	ldr	r1, [r5, #0]
 8008c16:	291d      	cmp	r1, #29
 8008c18:	d82c      	bhi.n	8008c74 <__sflush_r+0xb4>
 8008c1a:	4a29      	ldr	r2, [pc, #164]	; (8008cc0 <__sflush_r+0x100>)
 8008c1c:	40ca      	lsrs	r2, r1
 8008c1e:	07d6      	lsls	r6, r2, #31
 8008c20:	d528      	bpl.n	8008c74 <__sflush_r+0xb4>
 8008c22:	2200      	movs	r2, #0
 8008c24:	6062      	str	r2, [r4, #4]
 8008c26:	6922      	ldr	r2, [r4, #16]
 8008c28:	04d9      	lsls	r1, r3, #19
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	d504      	bpl.n	8008c38 <__sflush_r+0x78>
 8008c2e:	1c42      	adds	r2, r0, #1
 8008c30:	d101      	bne.n	8008c36 <__sflush_r+0x76>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	b903      	cbnz	r3, 8008c38 <__sflush_r+0x78>
 8008c36:	6560      	str	r0, [r4, #84]	; 0x54
 8008c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3a:	602f      	str	r7, [r5, #0]
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d0cb      	beq.n	8008bd8 <__sflush_r+0x18>
 8008c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c44:	4299      	cmp	r1, r3
 8008c46:	d002      	beq.n	8008c4e <__sflush_r+0x8e>
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f7ff faad 	bl	80081a8 <_free_r>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	6360      	str	r0, [r4, #52]	; 0x34
 8008c52:	e7c2      	b.n	8008bda <__sflush_r+0x1a>
 8008c54:	6a21      	ldr	r1, [r4, #32]
 8008c56:	2301      	movs	r3, #1
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b0      	blx	r6
 8008c5c:	1c41      	adds	r1, r0, #1
 8008c5e:	d1c7      	bne.n	8008bf0 <__sflush_r+0x30>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0c4      	beq.n	8008bf0 <__sflush_r+0x30>
 8008c66:	2b1d      	cmp	r3, #29
 8008c68:	d001      	beq.n	8008c6e <__sflush_r+0xae>
 8008c6a:	2b16      	cmp	r3, #22
 8008c6c:	d101      	bne.n	8008c72 <__sflush_r+0xb2>
 8008c6e:	602f      	str	r7, [r5, #0]
 8008c70:	e7b2      	b.n	8008bd8 <__sflush_r+0x18>
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	e7ae      	b.n	8008bda <__sflush_r+0x1a>
 8008c7c:	690f      	ldr	r7, [r1, #16]
 8008c7e:	2f00      	cmp	r7, #0
 8008c80:	d0aa      	beq.n	8008bd8 <__sflush_r+0x18>
 8008c82:	0793      	lsls	r3, r2, #30
 8008c84:	bf18      	it	ne
 8008c86:	2300      	movne	r3, #0
 8008c88:	680e      	ldr	r6, [r1, #0]
 8008c8a:	bf08      	it	eq
 8008c8c:	694b      	ldreq	r3, [r1, #20]
 8008c8e:	1bf6      	subs	r6, r6, r7
 8008c90:	600f      	str	r7, [r1, #0]
 8008c92:	608b      	str	r3, [r1, #8]
 8008c94:	2e00      	cmp	r6, #0
 8008c96:	dd9f      	ble.n	8008bd8 <__sflush_r+0x18>
 8008c98:	4633      	mov	r3, r6
 8008c9a:	463a      	mov	r2, r7
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	6a21      	ldr	r1, [r4, #32]
 8008ca0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008ca4:	47e0      	blx	ip
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	dc06      	bgt.n	8008cb8 <__sflush_r+0xf8>
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	e790      	b.n	8008bda <__sflush_r+0x1a>
 8008cb8:	4407      	add	r7, r0
 8008cba:	1a36      	subs	r6, r6, r0
 8008cbc:	e7ea      	b.n	8008c94 <__sflush_r+0xd4>
 8008cbe:	bf00      	nop
 8008cc0:	20400001 	.word	0x20400001

08008cc4 <_fflush_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	690b      	ldr	r3, [r1, #16]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	b913      	cbnz	r3, 8008cd4 <_fflush_r+0x10>
 8008cce:	2500      	movs	r5, #0
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	b118      	cbz	r0, 8008cde <_fflush_r+0x1a>
 8008cd6:	6983      	ldr	r3, [r0, #24]
 8008cd8:	b90b      	cbnz	r3, 8008cde <_fflush_r+0x1a>
 8008cda:	f000 f887 	bl	8008dec <__sinit>
 8008cde:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <_fflush_r+0x6c>)
 8008ce0:	429c      	cmp	r4, r3
 8008ce2:	d11b      	bne.n	8008d1c <_fflush_r+0x58>
 8008ce4:	686c      	ldr	r4, [r5, #4]
 8008ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0ef      	beq.n	8008cce <_fflush_r+0xa>
 8008cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cf0:	07d0      	lsls	r0, r2, #31
 8008cf2:	d404      	bmi.n	8008cfe <_fflush_r+0x3a>
 8008cf4:	0599      	lsls	r1, r3, #22
 8008cf6:	d402      	bmi.n	8008cfe <_fflush_r+0x3a>
 8008cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cfa:	f000 f915 	bl	8008f28 <__retarget_lock_acquire_recursive>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	4621      	mov	r1, r4
 8008d02:	f7ff ff5d 	bl	8008bc0 <__sflush_r>
 8008d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d08:	4605      	mov	r5, r0
 8008d0a:	07da      	lsls	r2, r3, #31
 8008d0c:	d4e0      	bmi.n	8008cd0 <_fflush_r+0xc>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	059b      	lsls	r3, r3, #22
 8008d12:	d4dd      	bmi.n	8008cd0 <_fflush_r+0xc>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f000 f908 	bl	8008f2a <__retarget_lock_release_recursive>
 8008d1a:	e7d9      	b.n	8008cd0 <_fflush_r+0xc>
 8008d1c:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <_fflush_r+0x70>)
 8008d1e:	429c      	cmp	r4, r3
 8008d20:	d101      	bne.n	8008d26 <_fflush_r+0x62>
 8008d22:	68ac      	ldr	r4, [r5, #8]
 8008d24:	e7df      	b.n	8008ce6 <_fflush_r+0x22>
 8008d26:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <_fflush_r+0x74>)
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	bf08      	it	eq
 8008d2c:	68ec      	ldreq	r4, [r5, #12]
 8008d2e:	e7da      	b.n	8008ce6 <_fflush_r+0x22>
 8008d30:	08009c74 	.word	0x08009c74
 8008d34:	08009c94 	.word	0x08009c94
 8008d38:	08009c54 	.word	0x08009c54

08008d3c <std>:
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	4604      	mov	r4, r0
 8008d42:	e9c0 3300 	strd	r3, r3, [r0]
 8008d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d4a:	6083      	str	r3, [r0, #8]
 8008d4c:	8181      	strh	r1, [r0, #12]
 8008d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d50:	81c2      	strh	r2, [r0, #14]
 8008d52:	6183      	str	r3, [r0, #24]
 8008d54:	4619      	mov	r1, r3
 8008d56:	2208      	movs	r2, #8
 8008d58:	305c      	adds	r0, #92	; 0x5c
 8008d5a:	f7fd fb63 	bl	8006424 <memset>
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <std+0x38>)
 8008d60:	6224      	str	r4, [r4, #32]
 8008d62:	6263      	str	r3, [r4, #36]	; 0x24
 8008d64:	4b04      	ldr	r3, [pc, #16]	; (8008d78 <std+0x3c>)
 8008d66:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <std+0x40>)
 8008d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d6c:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <std+0x44>)
 8008d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	bf00      	nop
 8008d74:	08009091 	.word	0x08009091
 8008d78:	080090b3 	.word	0x080090b3
 8008d7c:	080090eb 	.word	0x080090eb
 8008d80:	0800910f 	.word	0x0800910f

08008d84 <_cleanup_r>:
 8008d84:	4901      	ldr	r1, [pc, #4]	; (8008d8c <_cleanup_r+0x8>)
 8008d86:	f000 b8af 	b.w	8008ee8 <_fwalk_reent>
 8008d8a:	bf00      	nop
 8008d8c:	08008cc5 	.word	0x08008cc5

08008d90 <__sfmoreglue>:
 8008d90:	2268      	movs	r2, #104	; 0x68
 8008d92:	b570      	push	{r4, r5, r6, lr}
 8008d94:	1e4d      	subs	r5, r1, #1
 8008d96:	4355      	muls	r5, r2
 8008d98:	460e      	mov	r6, r1
 8008d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d9e:	f7ff fa6b 	bl	8008278 <_malloc_r>
 8008da2:	4604      	mov	r4, r0
 8008da4:	b140      	cbz	r0, 8008db8 <__sfmoreglue+0x28>
 8008da6:	2100      	movs	r1, #0
 8008da8:	e9c0 1600 	strd	r1, r6, [r0]
 8008dac:	300c      	adds	r0, #12
 8008dae:	60a0      	str	r0, [r4, #8]
 8008db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008db4:	f7fd fb36 	bl	8006424 <memset>
 8008db8:	4620      	mov	r0, r4
 8008dba:	bd70      	pop	{r4, r5, r6, pc}

08008dbc <__sfp_lock_acquire>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__sfp_lock_acquire+0x8>)
 8008dbe:	f000 b8b3 	b.w	8008f28 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20000411 	.word	0x20000411

08008dc8 <__sfp_lock_release>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	; (8008dd0 <__sfp_lock_release+0x8>)
 8008dca:	f000 b8ae 	b.w	8008f2a <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	20000411 	.word	0x20000411

08008dd4 <__sinit_lock_acquire>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	; (8008ddc <__sinit_lock_acquire+0x8>)
 8008dd6:	f000 b8a7 	b.w	8008f28 <__retarget_lock_acquire_recursive>
 8008dda:	bf00      	nop
 8008ddc:	20000412 	.word	0x20000412

08008de0 <__sinit_lock_release>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__sinit_lock_release+0x8>)
 8008de2:	f000 b8a2 	b.w	8008f2a <__retarget_lock_release_recursive>
 8008de6:	bf00      	nop
 8008de8:	20000412 	.word	0x20000412

08008dec <__sinit>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	4604      	mov	r4, r0
 8008df0:	f7ff fff0 	bl	8008dd4 <__sinit_lock_acquire>
 8008df4:	69a3      	ldr	r3, [r4, #24]
 8008df6:	b11b      	cbz	r3, 8008e00 <__sinit+0x14>
 8008df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfc:	f7ff bff0 	b.w	8008de0 <__sinit_lock_release>
 8008e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e04:	6523      	str	r3, [r4, #80]	; 0x50
 8008e06:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <__sinit+0x68>)
 8008e08:	4a13      	ldr	r2, [pc, #76]	; (8008e58 <__sinit+0x6c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	bf08      	it	eq
 8008e12:	2301      	moveq	r3, #1
 8008e14:	4620      	mov	r0, r4
 8008e16:	bf08      	it	eq
 8008e18:	61a3      	streq	r3, [r4, #24]
 8008e1a:	f000 f81f 	bl	8008e5c <__sfp>
 8008e1e:	6060      	str	r0, [r4, #4]
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 f81b 	bl	8008e5c <__sfp>
 8008e26:	60a0      	str	r0, [r4, #8]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 f817 	bl	8008e5c <__sfp>
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2104      	movs	r1, #4
 8008e32:	60e0      	str	r0, [r4, #12]
 8008e34:	6860      	ldr	r0, [r4, #4]
 8008e36:	f7ff ff81 	bl	8008d3c <std>
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	2109      	movs	r1, #9
 8008e3e:	68a0      	ldr	r0, [r4, #8]
 8008e40:	f7ff ff7c 	bl	8008d3c <std>
 8008e44:	2202      	movs	r2, #2
 8008e46:	2112      	movs	r1, #18
 8008e48:	68e0      	ldr	r0, [r4, #12]
 8008e4a:	f7ff ff77 	bl	8008d3c <std>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61a3      	str	r3, [r4, #24]
 8008e52:	e7d1      	b.n	8008df8 <__sinit+0xc>
 8008e54:	080098d8 	.word	0x080098d8
 8008e58:	08008d85 	.word	0x08008d85

08008e5c <__sfp>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	4607      	mov	r7, r0
 8008e60:	f7ff ffac 	bl	8008dbc <__sfp_lock_acquire>
 8008e64:	4b1e      	ldr	r3, [pc, #120]	; (8008ee0 <__sfp+0x84>)
 8008e66:	681e      	ldr	r6, [r3, #0]
 8008e68:	69b3      	ldr	r3, [r6, #24]
 8008e6a:	b913      	cbnz	r3, 8008e72 <__sfp+0x16>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff ffbd 	bl	8008dec <__sinit>
 8008e72:	3648      	adds	r6, #72	; 0x48
 8008e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	d503      	bpl.n	8008e84 <__sfp+0x28>
 8008e7c:	6833      	ldr	r3, [r6, #0]
 8008e7e:	b30b      	cbz	r3, 8008ec4 <__sfp+0x68>
 8008e80:	6836      	ldr	r6, [r6, #0]
 8008e82:	e7f7      	b.n	8008e74 <__sfp+0x18>
 8008e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e88:	b9d5      	cbnz	r5, 8008ec0 <__sfp+0x64>
 8008e8a:	4b16      	ldr	r3, [pc, #88]	; (8008ee4 <__sfp+0x88>)
 8008e8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e90:	60e3      	str	r3, [r4, #12]
 8008e92:	6665      	str	r5, [r4, #100]	; 0x64
 8008e94:	f000 f847 	bl	8008f26 <__retarget_lock_init_recursive>
 8008e98:	f7ff ff96 	bl	8008dc8 <__sfp_lock_release>
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ea8:	6025      	str	r5, [r4, #0]
 8008eaa:	61a5      	str	r5, [r4, #24]
 8008eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008eb0:	f7fd fab8 	bl	8006424 <memset>
 8008eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec0:	3468      	adds	r4, #104	; 0x68
 8008ec2:	e7d9      	b.n	8008e78 <__sfp+0x1c>
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f7ff ff62 	bl	8008d90 <__sfmoreglue>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	6030      	str	r0, [r6, #0]
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d1d5      	bne.n	8008e80 <__sfp+0x24>
 8008ed4:	f7ff ff78 	bl	8008dc8 <__sfp_lock_release>
 8008ed8:	230c      	movs	r3, #12
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	e7ee      	b.n	8008ebc <__sfp+0x60>
 8008ede:	bf00      	nop
 8008ee0:	080098d8 	.word	0x080098d8
 8008ee4:	ffff0001 	.word	0xffff0001

08008ee8 <_fwalk_reent>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	4606      	mov	r6, r0
 8008eee:	4688      	mov	r8, r1
 8008ef0:	2700      	movs	r7, #0
 8008ef2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008efa:	f1b9 0901 	subs.w	r9, r9, #1
 8008efe:	d505      	bpl.n	8008f0c <_fwalk_reent+0x24>
 8008f00:	6824      	ldr	r4, [r4, #0]
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	d1f7      	bne.n	8008ef6 <_fwalk_reent+0xe>
 8008f06:	4638      	mov	r0, r7
 8008f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0c:	89ab      	ldrh	r3, [r5, #12]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d907      	bls.n	8008f22 <_fwalk_reent+0x3a>
 8008f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f16:	3301      	adds	r3, #1
 8008f18:	d003      	beq.n	8008f22 <_fwalk_reent+0x3a>
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	47c0      	blx	r8
 8008f20:	4307      	orrs	r7, r0
 8008f22:	3568      	adds	r5, #104	; 0x68
 8008f24:	e7e9      	b.n	8008efa <_fwalk_reent+0x12>

08008f26 <__retarget_lock_init_recursive>:
 8008f26:	4770      	bx	lr

08008f28 <__retarget_lock_acquire_recursive>:
 8008f28:	4770      	bx	lr

08008f2a <__retarget_lock_release_recursive>:
 8008f2a:	4770      	bx	lr

08008f2c <__swhatbuf_r>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	460e      	mov	r6, r1
 8008f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f34:	4614      	mov	r4, r2
 8008f36:	2900      	cmp	r1, #0
 8008f38:	461d      	mov	r5, r3
 8008f3a:	b096      	sub	sp, #88	; 0x58
 8008f3c:	da08      	bge.n	8008f50 <__swhatbuf_r+0x24>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f44:	602a      	str	r2, [r5, #0]
 8008f46:	061a      	lsls	r2, r3, #24
 8008f48:	d410      	bmi.n	8008f6c <__swhatbuf_r+0x40>
 8008f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f4e:	e00e      	b.n	8008f6e <__swhatbuf_r+0x42>
 8008f50:	466a      	mov	r2, sp
 8008f52:	f000 f903 	bl	800915c <_fstat_r>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	dbf1      	blt.n	8008f3e <__swhatbuf_r+0x12>
 8008f5a:	9a01      	ldr	r2, [sp, #4]
 8008f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f64:	425a      	negs	r2, r3
 8008f66:	415a      	adcs	r2, r3
 8008f68:	602a      	str	r2, [r5, #0]
 8008f6a:	e7ee      	b.n	8008f4a <__swhatbuf_r+0x1e>
 8008f6c:	2340      	movs	r3, #64	; 0x40
 8008f6e:	2000      	movs	r0, #0
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	b016      	add	sp, #88	; 0x58
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f78 <__smakebuf_r>:
 8008f78:	898b      	ldrh	r3, [r1, #12]
 8008f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f7c:	079d      	lsls	r5, r3, #30
 8008f7e:	4606      	mov	r6, r0
 8008f80:	460c      	mov	r4, r1
 8008f82:	d507      	bpl.n	8008f94 <__smakebuf_r+0x1c>
 8008f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	6163      	str	r3, [r4, #20]
 8008f90:	b002      	add	sp, #8
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	466a      	mov	r2, sp
 8008f96:	ab01      	add	r3, sp, #4
 8008f98:	f7ff ffc8 	bl	8008f2c <__swhatbuf_r>
 8008f9c:	9900      	ldr	r1, [sp, #0]
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7ff f969 	bl	8008278 <_malloc_r>
 8008fa6:	b948      	cbnz	r0, 8008fbc <__smakebuf_r+0x44>
 8008fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fac:	059a      	lsls	r2, r3, #22
 8008fae:	d4ef      	bmi.n	8008f90 <__smakebuf_r+0x18>
 8008fb0:	f023 0303 	bic.w	r3, r3, #3
 8008fb4:	f043 0302 	orr.w	r3, r3, #2
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e7e3      	b.n	8008f84 <__smakebuf_r+0xc>
 8008fbc:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <__smakebuf_r+0x7c>)
 8008fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	6020      	str	r0, [r4, #0]
 8008fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	9b00      	ldr	r3, [sp, #0]
 8008fcc:	6120      	str	r0, [r4, #16]
 8008fce:	6163      	str	r3, [r4, #20]
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	b15b      	cbz	r3, 8008fec <__smakebuf_r+0x74>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fda:	f000 f8d1 	bl	8009180 <_isatty_r>
 8008fde:	b128      	cbz	r0, 8008fec <__smakebuf_r+0x74>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	f043 0301 	orr.w	r3, r3, #1
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	89a0      	ldrh	r0, [r4, #12]
 8008fee:	4305      	orrs	r5, r0
 8008ff0:	81a5      	strh	r5, [r4, #12]
 8008ff2:	e7cd      	b.n	8008f90 <__smakebuf_r+0x18>
 8008ff4:	08008d85 	.word	0x08008d85

08008ff8 <_malloc_usable_size_r>:
 8008ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ffc:	1f18      	subs	r0, r3, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfbc      	itt	lt
 8009002:	580b      	ldrlt	r3, [r1, r0]
 8009004:	18c0      	addlt	r0, r0, r3
 8009006:	4770      	bx	lr

08009008 <_raise_r>:
 8009008:	291f      	cmp	r1, #31
 800900a:	b538      	push	{r3, r4, r5, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	460d      	mov	r5, r1
 8009010:	d904      	bls.n	800901c <_raise_r+0x14>
 8009012:	2316      	movs	r3, #22
 8009014:	6003      	str	r3, [r0, #0]
 8009016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800901e:	b112      	cbz	r2, 8009026 <_raise_r+0x1e>
 8009020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009024:	b94b      	cbnz	r3, 800903a <_raise_r+0x32>
 8009026:	4620      	mov	r0, r4
 8009028:	f000 f830 	bl	800908c <_getpid_r>
 800902c:	462a      	mov	r2, r5
 800902e:	4601      	mov	r1, r0
 8009030:	4620      	mov	r0, r4
 8009032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009036:	f000 b817 	b.w	8009068 <_kill_r>
 800903a:	2b01      	cmp	r3, #1
 800903c:	d00a      	beq.n	8009054 <_raise_r+0x4c>
 800903e:	1c59      	adds	r1, r3, #1
 8009040:	d103      	bne.n	800904a <_raise_r+0x42>
 8009042:	2316      	movs	r3, #22
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	2001      	movs	r0, #1
 8009048:	e7e7      	b.n	800901a <_raise_r+0x12>
 800904a:	2400      	movs	r4, #0
 800904c:	4628      	mov	r0, r5
 800904e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009052:	4798      	blx	r3
 8009054:	2000      	movs	r0, #0
 8009056:	e7e0      	b.n	800901a <_raise_r+0x12>

08009058 <raise>:
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <raise+0xc>)
 800905a:	4601      	mov	r1, r0
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	f7ff bfd3 	b.w	8009008 <_raise_r>
 8009062:	bf00      	nop
 8009064:	200000a8 	.word	0x200000a8

08009068 <_kill_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	2300      	movs	r3, #0
 800906c:	4d06      	ldr	r5, [pc, #24]	; (8009088 <_kill_r+0x20>)
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	f7f9 fc18 	bl	80028aa <_kill>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	d102      	bne.n	8009084 <_kill_r+0x1c>
 800907e:	682b      	ldr	r3, [r5, #0]
 8009080:	b103      	cbz	r3, 8009084 <_kill_r+0x1c>
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	bd38      	pop	{r3, r4, r5, pc}
 8009086:	bf00      	nop
 8009088:	2000040c 	.word	0x2000040c

0800908c <_getpid_r>:
 800908c:	f7f9 bc06 	b.w	800289c <_getpid>

08009090 <__sread>:
 8009090:	b510      	push	{r4, lr}
 8009092:	460c      	mov	r4, r1
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	f000 f894 	bl	80091c4 <_read_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	bfab      	itete	ge
 80090a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090a2:	89a3      	ldrhlt	r3, [r4, #12]
 80090a4:	181b      	addge	r3, r3, r0
 80090a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090aa:	bfac      	ite	ge
 80090ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80090ae:	81a3      	strhlt	r3, [r4, #12]
 80090b0:	bd10      	pop	{r4, pc}

080090b2 <__swrite>:
 80090b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b6:	461f      	mov	r7, r3
 80090b8:	898b      	ldrh	r3, [r1, #12]
 80090ba:	4605      	mov	r5, r0
 80090bc:	05db      	lsls	r3, r3, #23
 80090be:	460c      	mov	r4, r1
 80090c0:	4616      	mov	r6, r2
 80090c2:	d505      	bpl.n	80090d0 <__swrite+0x1e>
 80090c4:	2302      	movs	r3, #2
 80090c6:	2200      	movs	r2, #0
 80090c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090cc:	f000 f868 	bl	80091a0 <_lseek_r>
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	4632      	mov	r2, r6
 80090d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	4628      	mov	r0, r5
 80090dc:	463b      	mov	r3, r7
 80090de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090e6:	f000 b817 	b.w	8009118 <_write_r>

080090ea <__sseek>:
 80090ea:	b510      	push	{r4, lr}
 80090ec:	460c      	mov	r4, r1
 80090ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f2:	f000 f855 	bl	80091a0 <_lseek_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	bf15      	itete	ne
 80090fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80090fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009106:	81a3      	strheq	r3, [r4, #12]
 8009108:	bf18      	it	ne
 800910a:	81a3      	strhne	r3, [r4, #12]
 800910c:	bd10      	pop	{r4, pc}

0800910e <__sclose>:
 800910e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009112:	f000 b813 	b.w	800913c <_close_r>
	...

08009118 <_write_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	2200      	movs	r2, #0
 8009122:	4d05      	ldr	r5, [pc, #20]	; (8009138 <_write_r+0x20>)
 8009124:	602a      	str	r2, [r5, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f7f9 fbf6 	bl	8002918 <_write>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d102      	bne.n	8009136 <_write_r+0x1e>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b103      	cbz	r3, 8009136 <_write_r+0x1e>
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	2000040c 	.word	0x2000040c

0800913c <_close_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	2300      	movs	r3, #0
 8009140:	4d05      	ldr	r5, [pc, #20]	; (8009158 <_close_r+0x1c>)
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	602b      	str	r3, [r5, #0]
 8009148:	f7f9 fc02 	bl	8002950 <_close>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_close_r+0x1a>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_close_r+0x1a>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	2000040c 	.word	0x2000040c

0800915c <_fstat_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	2300      	movs	r3, #0
 8009160:	4d06      	ldr	r5, [pc, #24]	; (800917c <_fstat_r+0x20>)
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	4611      	mov	r1, r2
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	f7f9 fbfc 	bl	8002966 <_fstat>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	d102      	bne.n	8009178 <_fstat_r+0x1c>
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	b103      	cbz	r3, 8009178 <_fstat_r+0x1c>
 8009176:	6023      	str	r3, [r4, #0]
 8009178:	bd38      	pop	{r3, r4, r5, pc}
 800917a:	bf00      	nop
 800917c:	2000040c 	.word	0x2000040c

08009180 <_isatty_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	2300      	movs	r3, #0
 8009184:	4d05      	ldr	r5, [pc, #20]	; (800919c <_isatty_r+0x1c>)
 8009186:	4604      	mov	r4, r0
 8009188:	4608      	mov	r0, r1
 800918a:	602b      	str	r3, [r5, #0]
 800918c:	f7f9 fbfa 	bl	8002984 <_isatty>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_isatty_r+0x1a>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_isatty_r+0x1a>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	2000040c 	.word	0x2000040c

080091a0 <_lseek_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	4611      	mov	r1, r2
 80091a8:	2200      	movs	r2, #0
 80091aa:	4d05      	ldr	r5, [pc, #20]	; (80091c0 <_lseek_r+0x20>)
 80091ac:	602a      	str	r2, [r5, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f7f9 fbf2 	bl	8002998 <_lseek>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_lseek_r+0x1e>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_lseek_r+0x1e>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	2000040c 	.word	0x2000040c

080091c4 <_read_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	4611      	mov	r1, r2
 80091cc:	2200      	movs	r2, #0
 80091ce:	4d05      	ldr	r5, [pc, #20]	; (80091e4 <_read_r+0x20>)
 80091d0:	602a      	str	r2, [r5, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f7f9 fb83 	bl	80028de <_read>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_read_r+0x1e>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_read_r+0x1e>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	2000040c 	.word	0x2000040c

080091e8 <_init>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr

080091f4 <_fini>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	bf00      	nop
 80091f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fa:	bc08      	pop	{r3}
 80091fc:	469e      	mov	lr, r3
 80091fe:	4770      	bx	lr
